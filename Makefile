# Makefile.in generated by automake 1.9.6 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




srcdir = .
top_srcdir = .

pkgdatadir = $(datadir)/logstalgia
pkglibdir = $(libdir)/logstalgia
pkgincludedir = $(includedir)/logstalgia
top_builddir = .
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = logstalgia$(EXEEXT)
#am__append_1 = -DSDLAPP_FONT_DIR=\"$(sdlappfontdir)\"
DIST_COMMON = README $(am__configure_deps) $(am__dist_fonts_DATA_DIST) \
	$(dist_pkgdata_DATA) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(top_srcdir)/configure COPYING \
	ChangeLog INSTALL THANKS build-aux/config.guess \
	build-aux/config.sub build-aux/depcomp build-aux/install-sh \
	build-aux/missing
subdir = .
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_boost_base.m4 \
	$(top_srcdir)/m4/ax_check_gl.m4 \
	$(top_srcdir)/m4/ax_check_glu.m4 \
	$(top_srcdir)/m4/ax_lang_compiler_ms.m4 \
	$(top_srcdir)/m4/ax_pthread.m4 $(top_srcdir)/m4/pkg.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno configure.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(fontsdir)" \
	"$(DESTDIR)$(pkgdatadir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am__dirstamp = $(am__leading_dot)dirstamp
am_logstalgia_OBJECTS = src/logstalgia-ncsa.$(OBJEXT) \
	src/logstalgia-ball.$(OBJEXT) \
	src/core/logstalgia-conffile.$(OBJEXT) \
	src/core/logstalgia-display.$(OBJEXT) \
	src/core/logstalgia-frustum.$(OBJEXT) \
	src/core/logstalgia-fxfont.$(OBJEXT) \
	src/core/logstalgia-logger.$(OBJEXT) \
	src/core/logstalgia-ppm.$(OBJEXT) \
	src/core/logstalgia-png_writer.$(OBJEXT) \
	src/core/logstalgia-plane.$(OBJEXT) \
	src/core/logstalgia-quadtree.$(OBJEXT) \
	src/core/logstalgia-regex.$(OBJEXT) \
	src/core/logstalgia-resource.$(OBJEXT) \
	src/core/logstalgia-sdlapp.$(OBJEXT) \
	src/core/logstalgia-seeklog.$(OBJEXT) \
	src/core/logstalgia-settings.$(OBJEXT) \
	src/core/logstalgia-shader.$(OBJEXT) \
	src/core/logstalgia-shader_common.$(OBJEXT) \
	src/core/logstalgia-stringhash.$(OBJEXT) \
	src/core/logstalgia-texture.$(OBJEXT) \
	src/core/logstalgia-timezone.$(OBJEXT) \
	src/core/logstalgia-vbo.$(OBJEXT) \
	src/core/logstalgia-vectors.$(OBJEXT) \
	src/logstalgia-custom.$(OBJEXT) \
	src/logstalgia-logentry.$(OBJEXT) \
	src/logstalgia-logstalgia.$(OBJEXT) \
	src/logstalgia-main.$(OBJEXT) src/logstalgia-paddle.$(OBJEXT) \
	src/logstalgia-requestball.$(OBJEXT) \
	src/logstalgia-settings.$(OBJEXT) \
	src/logstalgia-slider.$(OBJEXT) \
	src/logstalgia-summarizer.$(OBJEXT) \
	src/logstalgia-textarea.$(OBJEXT)
logstalgia_OBJECTS = $(am_logstalgia_OBJECTS)
logstalgia_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(logstalgia_SOURCES)
DIST_SOURCES = $(logstalgia_SOURCES)
am__dist_fonts_DATA_DIST = data/fonts/README \
	data/fonts/FreeMonoBold.ttf data/fonts/FreeSerif.ttf
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
dist_fontsDATA_INSTALL = $(INSTALL_DATA)
dist_pkgdataDATA_INSTALL = $(INSTALL_DATA)
DATA = $(dist_fonts_DATA) $(dist_pkgdata_DATA)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz $(distdir).tar.bz2
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /home/lieanu/ctf/bctf-final/Logstalgia/build-aux/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/lieanu/ctf/bctf-final/Logstalgia/build-aux/missing --run tar
AUTOCONF = ${SHELL} /home/lieanu/ctf/bctf-final/Logstalgia/build-aux/missing --run autoconf
AUTOHEADER = ${SHELL} /home/lieanu/ctf/bctf-final/Logstalgia/build-aux/missing --run autoheader
AUTOMAKE = ${SHELL} /home/lieanu/ctf/bctf-final/Logstalgia/build-aux/missing --run automake-1.9
AWK = gawk
BOOST_CPPFLAGS = -I/usr/include
BOOST_LDFLAGS = -L/usr/lib64
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -pthread -pthread -I/usr/include/freetype2     -I/usr/include/GL   -D_REENTRANT -I/usr/include/SDL2    -I/usr/include/libpng12   -I/usr/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -pthread -pthread
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"Logstalgia\" -DPACKAGE_TARNAME=\"logstalgia\" -DPACKAGE_VERSION=\"1.0.5\" -DPACKAGE_STRING=\"Logstalgia\ 1.0.5\" -DPACKAGE_BUGREPORT=\"acaudwell@gmail.com\" -DPACKAGE_URL=\"\" -DPACKAGE=\"logstalgia\" -DVERSION=\"1.0.5\" -DHAVE_PTHREAD=1 -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_GL_GL_H=1 -DHAVE_GL_GLU_H=1 -DHAVE_IMG_LOADPNG_RW=1 -DHAVE_IMG_LOADJPG_RW=1 -DHAVE_BOOST=/\*\*/
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FONTDIR_FALSE = 
FONTDIR_TRUE = #
FT2_CFLAGS = -I/usr/include/freetype2  
FT2_LIBS = -lfreetype  
GLEW_CFLAGS = -I/usr/include/GL  
GLEW_LIBS = -lGLEW  
GLU_CFLAGS = -pthread
GLU_LIBS = -lGLU
GL_CFLAGS = -pthread
GL_LIBS = -lGL 
GREP = /bin/grep
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =  -lGL  -lGLU -lfreetype   -lpcre   -lGLEW   -lSDL2_image -lSDL2    -lpng12  
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/lieanu/ctf/bctf-final/Logstalgia/build-aux/missing --run makeinfo
OBJEXT = o
PACKAGE = logstalgia
PACKAGE_BUGREPORT = acaudwell@gmail.com
PACKAGE_NAME = Logstalgia
PACKAGE_STRING = Logstalgia 1.0.5
PACKAGE_TARNAME = logstalgia
PACKAGE_URL = 
PACKAGE_VERSION = 1.0.5
PATH_SEPARATOR = :
PCRE_CFLAGS =  
PCRE_LIBS = -lpcre  
PKG_CONFIG = /usr/bin/pkg-config
PNG_CFLAGS = -I/usr/include/libpng12  
PNG_LIBS = -lpng12  
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
SDL2_CFLAGS = -D_REENTRANT -I/usr/include/SDL2  
SDL2_LIBS = -lSDL2_image -lSDL2  
SDL_CFLAGS = 
SDL_LIBS = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 1.0.5
XMKMF = 
ac_ct_CC = gcc
ac_ct_CXX = g++
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
ax_pthread_config = 
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/lieanu/ctf/bctf-final/Logstalgia/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sdlappfontdir = 
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
ACLOCAL_AMFLAGS = -I m4
logstalgia_CXXFLAGS = -std=gnu++0x -Wall -Wno-sign-compare -Wno-reorder -Wno-unused-but-set-variable -Wno-unused-variable
logstalgia_SOURCES = \
	src/ncsa.cpp \
	src/ball.cpp \
	src/core/conffile.cpp \
	src/core/display.cpp \
	src/core/frustum.cpp \
	src/core/fxfont.cpp \
	src/core/logger.cpp \
	src/core/ppm.cpp \
	src/core/png_writer.cpp \
	src/core/plane.cpp \
	src/core/quadtree.cpp \
	src/core/regex.cpp \
	src/core/resource.cpp \
	src/core/sdlapp.cpp \
	src/core/seeklog.cpp \
	src/core/settings.cpp \
	src/core/shader.cpp \
	src/core/shader_common.cpp \
	src/core/stringhash.cpp \
	src/core/texture.cpp \
	src/core/timezone.cpp \
	src/core/vbo.cpp \
	src/core/vectors.cpp \
	src/custom.cpp \
	src/logentry.cpp \
	src/logstalgia.cpp \
	src/main.cpp \
	src/paddle.cpp \
	src/requestball.cpp \
	src/settings.cpp \
	src/slider.cpp \
	src/summarizer.cpp \
	src/textarea.cpp

AM_CPPFLAGS = -DSDLAPP_RESOURCE_DIR=\"$(pkgdatadir)\" $(am__append_1)
dist_pkgdata_DATA = data/ball.tga data/example.log data/glow.tga
fontsdir = $(pkgdatadir)/fonts
dist_fonts_DATA = data/fonts/README data/fonts/FreeMonoBold.ttf data/fonts/FreeSerif.ttf
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign '; \
	      cd $(srcdir) && $(AUTOMAKE) --foreign  \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
src/$(am__dirstamp):
	@$(mkdir_p) src
	@: > src/$(am__dirstamp)
src/$(DEPDIR)/$(am__dirstamp):
	@$(mkdir_p) src/$(DEPDIR)
	@: > src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-ncsa.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-ball.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/core/$(am__dirstamp):
	@$(mkdir_p) src/core
	@: > src/core/$(am__dirstamp)
src/core/$(DEPDIR)/$(am__dirstamp):
	@$(mkdir_p) src/core/$(DEPDIR)
	@: > src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-conffile.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-display.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-frustum.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-fxfont.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-logger.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-ppm.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-png_writer.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-plane.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-quadtree.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-regex.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-resource.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-sdlapp.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-seeklog.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-settings.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-shader.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-shader_common.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-stringhash.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-texture.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-timezone.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-vbo.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/core/logstalgia-vectors.$(OBJEXT): src/core/$(am__dirstamp) \
	src/core/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-custom.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-logentry.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-logstalgia.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-main.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-paddle.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-requestball.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-settings.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-slider.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-summarizer.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
src/logstalgia-textarea.$(OBJEXT): src/$(am__dirstamp) \
	src/$(DEPDIR)/$(am__dirstamp)
logstalgia$(EXEEXT): $(logstalgia_OBJECTS) $(logstalgia_DEPENDENCIES) 
	@rm -f logstalgia$(EXEEXT)
	$(CXXLINK) $(logstalgia_LDFLAGS) $(logstalgia_OBJECTS) $(logstalgia_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f src/core/logstalgia-conffile.$(OBJEXT)
	-rm -f src/core/logstalgia-display.$(OBJEXT)
	-rm -f src/core/logstalgia-frustum.$(OBJEXT)
	-rm -f src/core/logstalgia-fxfont.$(OBJEXT)
	-rm -f src/core/logstalgia-logger.$(OBJEXT)
	-rm -f src/core/logstalgia-plane.$(OBJEXT)
	-rm -f src/core/logstalgia-png_writer.$(OBJEXT)
	-rm -f src/core/logstalgia-ppm.$(OBJEXT)
	-rm -f src/core/logstalgia-quadtree.$(OBJEXT)
	-rm -f src/core/logstalgia-regex.$(OBJEXT)
	-rm -f src/core/logstalgia-resource.$(OBJEXT)
	-rm -f src/core/logstalgia-sdlapp.$(OBJEXT)
	-rm -f src/core/logstalgia-seeklog.$(OBJEXT)
	-rm -f src/core/logstalgia-settings.$(OBJEXT)
	-rm -f src/core/logstalgia-shader.$(OBJEXT)
	-rm -f src/core/logstalgia-shader_common.$(OBJEXT)
	-rm -f src/core/logstalgia-stringhash.$(OBJEXT)
	-rm -f src/core/logstalgia-texture.$(OBJEXT)
	-rm -f src/core/logstalgia-timezone.$(OBJEXT)
	-rm -f src/core/logstalgia-vbo.$(OBJEXT)
	-rm -f src/core/logstalgia-vectors.$(OBJEXT)
	-rm -f src/logstalgia-ball.$(OBJEXT)
	-rm -f src/logstalgia-custom.$(OBJEXT)
	-rm -f src/logstalgia-logentry.$(OBJEXT)
	-rm -f src/logstalgia-logstalgia.$(OBJEXT)
	-rm -f src/logstalgia-main.$(OBJEXT)
	-rm -f src/logstalgia-ncsa.$(OBJEXT)
	-rm -f src/logstalgia-paddle.$(OBJEXT)
	-rm -f src/logstalgia-requestball.$(OBJEXT)
	-rm -f src/logstalgia-settings.$(OBJEXT)
	-rm -f src/logstalgia-slider.$(OBJEXT)
	-rm -f src/logstalgia-summarizer.$(OBJEXT)
	-rm -f src/logstalgia-textarea.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include src/$(DEPDIR)/logstalgia-ball.Po
include src/$(DEPDIR)/logstalgia-custom.Po
include src/$(DEPDIR)/logstalgia-logentry.Po
include src/$(DEPDIR)/logstalgia-logstalgia.Po
include src/$(DEPDIR)/logstalgia-main.Po
include src/$(DEPDIR)/logstalgia-ncsa.Po
include src/$(DEPDIR)/logstalgia-paddle.Po
include src/$(DEPDIR)/logstalgia-requestball.Po
include src/$(DEPDIR)/logstalgia-settings.Po
include src/$(DEPDIR)/logstalgia-slider.Po
include src/$(DEPDIR)/logstalgia-summarizer.Po
include src/$(DEPDIR)/logstalgia-textarea.Po
include src/core/$(DEPDIR)/logstalgia-conffile.Po
include src/core/$(DEPDIR)/logstalgia-display.Po
include src/core/$(DEPDIR)/logstalgia-frustum.Po
include src/core/$(DEPDIR)/logstalgia-fxfont.Po
include src/core/$(DEPDIR)/logstalgia-logger.Po
include src/core/$(DEPDIR)/logstalgia-plane.Po
include src/core/$(DEPDIR)/logstalgia-png_writer.Po
include src/core/$(DEPDIR)/logstalgia-ppm.Po
include src/core/$(DEPDIR)/logstalgia-quadtree.Po
include src/core/$(DEPDIR)/logstalgia-regex.Po
include src/core/$(DEPDIR)/logstalgia-resource.Po
include src/core/$(DEPDIR)/logstalgia-sdlapp.Po
include src/core/$(DEPDIR)/logstalgia-seeklog.Po
include src/core/$(DEPDIR)/logstalgia-settings.Po
include src/core/$(DEPDIR)/logstalgia-shader.Po
include src/core/$(DEPDIR)/logstalgia-shader_common.Po
include src/core/$(DEPDIR)/logstalgia-stringhash.Po
include src/core/$(DEPDIR)/logstalgia-texture.Po
include src/core/$(DEPDIR)/logstalgia-timezone.Po
include src/core/$(DEPDIR)/logstalgia-vbo.Po
include src/core/$(DEPDIR)/logstalgia-vectors.Po

.cpp.o:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`; \
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$$depbase.Tpo" -c -o $@ $<; \
	then mv -f "$$depbase.Tpo" "$$depbase.Po"; else rm -f "$$depbase.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`; \
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$$depbase.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$$depbase.Tpo" "$$depbase.Po"; else rm -f "$$depbase.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

src/logstalgia-ncsa.o: src/ncsa.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-ncsa.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-ncsa.Tpo" -c -o src/logstalgia-ncsa.o `test -f 'src/ncsa.cpp' || echo '$(srcdir)/'`src/ncsa.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-ncsa.Tpo" "src/$(DEPDIR)/logstalgia-ncsa.Po"; else rm -f "src/$(DEPDIR)/logstalgia-ncsa.Tpo"; exit 1; fi
#	source='src/ncsa.cpp' object='src/logstalgia-ncsa.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-ncsa.o `test -f 'src/ncsa.cpp' || echo '$(srcdir)/'`src/ncsa.cpp

src/logstalgia-ncsa.obj: src/ncsa.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-ncsa.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-ncsa.Tpo" -c -o src/logstalgia-ncsa.obj `if test -f 'src/ncsa.cpp'; then $(CYGPATH_W) 'src/ncsa.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ncsa.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-ncsa.Tpo" "src/$(DEPDIR)/logstalgia-ncsa.Po"; else rm -f "src/$(DEPDIR)/logstalgia-ncsa.Tpo"; exit 1; fi
#	source='src/ncsa.cpp' object='src/logstalgia-ncsa.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-ncsa.obj `if test -f 'src/ncsa.cpp'; then $(CYGPATH_W) 'src/ncsa.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ncsa.cpp'; fi`

src/logstalgia-ball.o: src/ball.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-ball.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-ball.Tpo" -c -o src/logstalgia-ball.o `test -f 'src/ball.cpp' || echo '$(srcdir)/'`src/ball.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-ball.Tpo" "src/$(DEPDIR)/logstalgia-ball.Po"; else rm -f "src/$(DEPDIR)/logstalgia-ball.Tpo"; exit 1; fi
#	source='src/ball.cpp' object='src/logstalgia-ball.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-ball.o `test -f 'src/ball.cpp' || echo '$(srcdir)/'`src/ball.cpp

src/logstalgia-ball.obj: src/ball.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-ball.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-ball.Tpo" -c -o src/logstalgia-ball.obj `if test -f 'src/ball.cpp'; then $(CYGPATH_W) 'src/ball.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ball.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-ball.Tpo" "src/$(DEPDIR)/logstalgia-ball.Po"; else rm -f "src/$(DEPDIR)/logstalgia-ball.Tpo"; exit 1; fi
#	source='src/ball.cpp' object='src/logstalgia-ball.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-ball.obj `if test -f 'src/ball.cpp'; then $(CYGPATH_W) 'src/ball.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ball.cpp'; fi`

src/core/logstalgia-conffile.o: src/core/conffile.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-conffile.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-conffile.Tpo" -c -o src/core/logstalgia-conffile.o `test -f 'src/core/conffile.cpp' || echo '$(srcdir)/'`src/core/conffile.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-conffile.Tpo" "src/core/$(DEPDIR)/logstalgia-conffile.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-conffile.Tpo"; exit 1; fi
#	source='src/core/conffile.cpp' object='src/core/logstalgia-conffile.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-conffile.o `test -f 'src/core/conffile.cpp' || echo '$(srcdir)/'`src/core/conffile.cpp

src/core/logstalgia-conffile.obj: src/core/conffile.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-conffile.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-conffile.Tpo" -c -o src/core/logstalgia-conffile.obj `if test -f 'src/core/conffile.cpp'; then $(CYGPATH_W) 'src/core/conffile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/conffile.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-conffile.Tpo" "src/core/$(DEPDIR)/logstalgia-conffile.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-conffile.Tpo"; exit 1; fi
#	source='src/core/conffile.cpp' object='src/core/logstalgia-conffile.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-conffile.obj `if test -f 'src/core/conffile.cpp'; then $(CYGPATH_W) 'src/core/conffile.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/conffile.cpp'; fi`

src/core/logstalgia-display.o: src/core/display.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-display.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-display.Tpo" -c -o src/core/logstalgia-display.o `test -f 'src/core/display.cpp' || echo '$(srcdir)/'`src/core/display.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-display.Tpo" "src/core/$(DEPDIR)/logstalgia-display.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-display.Tpo"; exit 1; fi
#	source='src/core/display.cpp' object='src/core/logstalgia-display.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-display.o `test -f 'src/core/display.cpp' || echo '$(srcdir)/'`src/core/display.cpp

src/core/logstalgia-display.obj: src/core/display.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-display.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-display.Tpo" -c -o src/core/logstalgia-display.obj `if test -f 'src/core/display.cpp'; then $(CYGPATH_W) 'src/core/display.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/display.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-display.Tpo" "src/core/$(DEPDIR)/logstalgia-display.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-display.Tpo"; exit 1; fi
#	source='src/core/display.cpp' object='src/core/logstalgia-display.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-display.obj `if test -f 'src/core/display.cpp'; then $(CYGPATH_W) 'src/core/display.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/display.cpp'; fi`

src/core/logstalgia-frustum.o: src/core/frustum.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-frustum.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-frustum.Tpo" -c -o src/core/logstalgia-frustum.o `test -f 'src/core/frustum.cpp' || echo '$(srcdir)/'`src/core/frustum.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-frustum.Tpo" "src/core/$(DEPDIR)/logstalgia-frustum.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-frustum.Tpo"; exit 1; fi
#	source='src/core/frustum.cpp' object='src/core/logstalgia-frustum.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-frustum.o `test -f 'src/core/frustum.cpp' || echo '$(srcdir)/'`src/core/frustum.cpp

src/core/logstalgia-frustum.obj: src/core/frustum.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-frustum.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-frustum.Tpo" -c -o src/core/logstalgia-frustum.obj `if test -f 'src/core/frustum.cpp'; then $(CYGPATH_W) 'src/core/frustum.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/frustum.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-frustum.Tpo" "src/core/$(DEPDIR)/logstalgia-frustum.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-frustum.Tpo"; exit 1; fi
#	source='src/core/frustum.cpp' object='src/core/logstalgia-frustum.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-frustum.obj `if test -f 'src/core/frustum.cpp'; then $(CYGPATH_W) 'src/core/frustum.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/frustum.cpp'; fi`

src/core/logstalgia-fxfont.o: src/core/fxfont.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-fxfont.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-fxfont.Tpo" -c -o src/core/logstalgia-fxfont.o `test -f 'src/core/fxfont.cpp' || echo '$(srcdir)/'`src/core/fxfont.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-fxfont.Tpo" "src/core/$(DEPDIR)/logstalgia-fxfont.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-fxfont.Tpo"; exit 1; fi
#	source='src/core/fxfont.cpp' object='src/core/logstalgia-fxfont.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-fxfont.o `test -f 'src/core/fxfont.cpp' || echo '$(srcdir)/'`src/core/fxfont.cpp

src/core/logstalgia-fxfont.obj: src/core/fxfont.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-fxfont.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-fxfont.Tpo" -c -o src/core/logstalgia-fxfont.obj `if test -f 'src/core/fxfont.cpp'; then $(CYGPATH_W) 'src/core/fxfont.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/fxfont.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-fxfont.Tpo" "src/core/$(DEPDIR)/logstalgia-fxfont.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-fxfont.Tpo"; exit 1; fi
#	source='src/core/fxfont.cpp' object='src/core/logstalgia-fxfont.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-fxfont.obj `if test -f 'src/core/fxfont.cpp'; then $(CYGPATH_W) 'src/core/fxfont.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/fxfont.cpp'; fi`

src/core/logstalgia-logger.o: src/core/logger.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-logger.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-logger.Tpo" -c -o src/core/logstalgia-logger.o `test -f 'src/core/logger.cpp' || echo '$(srcdir)/'`src/core/logger.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-logger.Tpo" "src/core/$(DEPDIR)/logstalgia-logger.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-logger.Tpo"; exit 1; fi
#	source='src/core/logger.cpp' object='src/core/logstalgia-logger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-logger.o `test -f 'src/core/logger.cpp' || echo '$(srcdir)/'`src/core/logger.cpp

src/core/logstalgia-logger.obj: src/core/logger.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-logger.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-logger.Tpo" -c -o src/core/logstalgia-logger.obj `if test -f 'src/core/logger.cpp'; then $(CYGPATH_W) 'src/core/logger.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/logger.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-logger.Tpo" "src/core/$(DEPDIR)/logstalgia-logger.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-logger.Tpo"; exit 1; fi
#	source='src/core/logger.cpp' object='src/core/logstalgia-logger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-logger.obj `if test -f 'src/core/logger.cpp'; then $(CYGPATH_W) 'src/core/logger.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/logger.cpp'; fi`

src/core/logstalgia-ppm.o: src/core/ppm.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-ppm.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-ppm.Tpo" -c -o src/core/logstalgia-ppm.o `test -f 'src/core/ppm.cpp' || echo '$(srcdir)/'`src/core/ppm.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-ppm.Tpo" "src/core/$(DEPDIR)/logstalgia-ppm.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-ppm.Tpo"; exit 1; fi
#	source='src/core/ppm.cpp' object='src/core/logstalgia-ppm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-ppm.o `test -f 'src/core/ppm.cpp' || echo '$(srcdir)/'`src/core/ppm.cpp

src/core/logstalgia-ppm.obj: src/core/ppm.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-ppm.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-ppm.Tpo" -c -o src/core/logstalgia-ppm.obj `if test -f 'src/core/ppm.cpp'; then $(CYGPATH_W) 'src/core/ppm.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/ppm.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-ppm.Tpo" "src/core/$(DEPDIR)/logstalgia-ppm.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-ppm.Tpo"; exit 1; fi
#	source='src/core/ppm.cpp' object='src/core/logstalgia-ppm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-ppm.obj `if test -f 'src/core/ppm.cpp'; then $(CYGPATH_W) 'src/core/ppm.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/ppm.cpp'; fi`

src/core/logstalgia-png_writer.o: src/core/png_writer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-png_writer.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-png_writer.Tpo" -c -o src/core/logstalgia-png_writer.o `test -f 'src/core/png_writer.cpp' || echo '$(srcdir)/'`src/core/png_writer.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-png_writer.Tpo" "src/core/$(DEPDIR)/logstalgia-png_writer.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-png_writer.Tpo"; exit 1; fi
#	source='src/core/png_writer.cpp' object='src/core/logstalgia-png_writer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-png_writer.o `test -f 'src/core/png_writer.cpp' || echo '$(srcdir)/'`src/core/png_writer.cpp

src/core/logstalgia-png_writer.obj: src/core/png_writer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-png_writer.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-png_writer.Tpo" -c -o src/core/logstalgia-png_writer.obj `if test -f 'src/core/png_writer.cpp'; then $(CYGPATH_W) 'src/core/png_writer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/png_writer.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-png_writer.Tpo" "src/core/$(DEPDIR)/logstalgia-png_writer.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-png_writer.Tpo"; exit 1; fi
#	source='src/core/png_writer.cpp' object='src/core/logstalgia-png_writer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-png_writer.obj `if test -f 'src/core/png_writer.cpp'; then $(CYGPATH_W) 'src/core/png_writer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/png_writer.cpp'; fi`

src/core/logstalgia-plane.o: src/core/plane.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-plane.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-plane.Tpo" -c -o src/core/logstalgia-plane.o `test -f 'src/core/plane.cpp' || echo '$(srcdir)/'`src/core/plane.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-plane.Tpo" "src/core/$(DEPDIR)/logstalgia-plane.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-plane.Tpo"; exit 1; fi
#	source='src/core/plane.cpp' object='src/core/logstalgia-plane.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-plane.o `test -f 'src/core/plane.cpp' || echo '$(srcdir)/'`src/core/plane.cpp

src/core/logstalgia-plane.obj: src/core/plane.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-plane.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-plane.Tpo" -c -o src/core/logstalgia-plane.obj `if test -f 'src/core/plane.cpp'; then $(CYGPATH_W) 'src/core/plane.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/plane.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-plane.Tpo" "src/core/$(DEPDIR)/logstalgia-plane.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-plane.Tpo"; exit 1; fi
#	source='src/core/plane.cpp' object='src/core/logstalgia-plane.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-plane.obj `if test -f 'src/core/plane.cpp'; then $(CYGPATH_W) 'src/core/plane.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/plane.cpp'; fi`

src/core/logstalgia-quadtree.o: src/core/quadtree.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-quadtree.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-quadtree.Tpo" -c -o src/core/logstalgia-quadtree.o `test -f 'src/core/quadtree.cpp' || echo '$(srcdir)/'`src/core/quadtree.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-quadtree.Tpo" "src/core/$(DEPDIR)/logstalgia-quadtree.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-quadtree.Tpo"; exit 1; fi
#	source='src/core/quadtree.cpp' object='src/core/logstalgia-quadtree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-quadtree.o `test -f 'src/core/quadtree.cpp' || echo '$(srcdir)/'`src/core/quadtree.cpp

src/core/logstalgia-quadtree.obj: src/core/quadtree.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-quadtree.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-quadtree.Tpo" -c -o src/core/logstalgia-quadtree.obj `if test -f 'src/core/quadtree.cpp'; then $(CYGPATH_W) 'src/core/quadtree.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/quadtree.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-quadtree.Tpo" "src/core/$(DEPDIR)/logstalgia-quadtree.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-quadtree.Tpo"; exit 1; fi
#	source='src/core/quadtree.cpp' object='src/core/logstalgia-quadtree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-quadtree.obj `if test -f 'src/core/quadtree.cpp'; then $(CYGPATH_W) 'src/core/quadtree.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/quadtree.cpp'; fi`

src/core/logstalgia-regex.o: src/core/regex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-regex.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-regex.Tpo" -c -o src/core/logstalgia-regex.o `test -f 'src/core/regex.cpp' || echo '$(srcdir)/'`src/core/regex.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-regex.Tpo" "src/core/$(DEPDIR)/logstalgia-regex.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-regex.Tpo"; exit 1; fi
#	source='src/core/regex.cpp' object='src/core/logstalgia-regex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-regex.o `test -f 'src/core/regex.cpp' || echo '$(srcdir)/'`src/core/regex.cpp

src/core/logstalgia-regex.obj: src/core/regex.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-regex.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-regex.Tpo" -c -o src/core/logstalgia-regex.obj `if test -f 'src/core/regex.cpp'; then $(CYGPATH_W) 'src/core/regex.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/regex.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-regex.Tpo" "src/core/$(DEPDIR)/logstalgia-regex.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-regex.Tpo"; exit 1; fi
#	source='src/core/regex.cpp' object='src/core/logstalgia-regex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-regex.obj `if test -f 'src/core/regex.cpp'; then $(CYGPATH_W) 'src/core/regex.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/regex.cpp'; fi`

src/core/logstalgia-resource.o: src/core/resource.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-resource.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-resource.Tpo" -c -o src/core/logstalgia-resource.o `test -f 'src/core/resource.cpp' || echo '$(srcdir)/'`src/core/resource.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-resource.Tpo" "src/core/$(DEPDIR)/logstalgia-resource.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-resource.Tpo"; exit 1; fi
#	source='src/core/resource.cpp' object='src/core/logstalgia-resource.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-resource.o `test -f 'src/core/resource.cpp' || echo '$(srcdir)/'`src/core/resource.cpp

src/core/logstalgia-resource.obj: src/core/resource.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-resource.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-resource.Tpo" -c -o src/core/logstalgia-resource.obj `if test -f 'src/core/resource.cpp'; then $(CYGPATH_W) 'src/core/resource.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/resource.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-resource.Tpo" "src/core/$(DEPDIR)/logstalgia-resource.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-resource.Tpo"; exit 1; fi
#	source='src/core/resource.cpp' object='src/core/logstalgia-resource.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-resource.obj `if test -f 'src/core/resource.cpp'; then $(CYGPATH_W) 'src/core/resource.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/resource.cpp'; fi`

src/core/logstalgia-sdlapp.o: src/core/sdlapp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-sdlapp.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-sdlapp.Tpo" -c -o src/core/logstalgia-sdlapp.o `test -f 'src/core/sdlapp.cpp' || echo '$(srcdir)/'`src/core/sdlapp.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-sdlapp.Tpo" "src/core/$(DEPDIR)/logstalgia-sdlapp.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-sdlapp.Tpo"; exit 1; fi
#	source='src/core/sdlapp.cpp' object='src/core/logstalgia-sdlapp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-sdlapp.o `test -f 'src/core/sdlapp.cpp' || echo '$(srcdir)/'`src/core/sdlapp.cpp

src/core/logstalgia-sdlapp.obj: src/core/sdlapp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-sdlapp.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-sdlapp.Tpo" -c -o src/core/logstalgia-sdlapp.obj `if test -f 'src/core/sdlapp.cpp'; then $(CYGPATH_W) 'src/core/sdlapp.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/sdlapp.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-sdlapp.Tpo" "src/core/$(DEPDIR)/logstalgia-sdlapp.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-sdlapp.Tpo"; exit 1; fi
#	source='src/core/sdlapp.cpp' object='src/core/logstalgia-sdlapp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-sdlapp.obj `if test -f 'src/core/sdlapp.cpp'; then $(CYGPATH_W) 'src/core/sdlapp.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/sdlapp.cpp'; fi`

src/core/logstalgia-seeklog.o: src/core/seeklog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-seeklog.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-seeklog.Tpo" -c -o src/core/logstalgia-seeklog.o `test -f 'src/core/seeklog.cpp' || echo '$(srcdir)/'`src/core/seeklog.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-seeklog.Tpo" "src/core/$(DEPDIR)/logstalgia-seeklog.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-seeklog.Tpo"; exit 1; fi
#	source='src/core/seeklog.cpp' object='src/core/logstalgia-seeklog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-seeklog.o `test -f 'src/core/seeklog.cpp' || echo '$(srcdir)/'`src/core/seeklog.cpp

src/core/logstalgia-seeklog.obj: src/core/seeklog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-seeklog.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-seeklog.Tpo" -c -o src/core/logstalgia-seeklog.obj `if test -f 'src/core/seeklog.cpp'; then $(CYGPATH_W) 'src/core/seeklog.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/seeklog.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-seeklog.Tpo" "src/core/$(DEPDIR)/logstalgia-seeklog.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-seeklog.Tpo"; exit 1; fi
#	source='src/core/seeklog.cpp' object='src/core/logstalgia-seeklog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-seeklog.obj `if test -f 'src/core/seeklog.cpp'; then $(CYGPATH_W) 'src/core/seeklog.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/seeklog.cpp'; fi`

src/core/logstalgia-settings.o: src/core/settings.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-settings.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-settings.Tpo" -c -o src/core/logstalgia-settings.o `test -f 'src/core/settings.cpp' || echo '$(srcdir)/'`src/core/settings.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-settings.Tpo" "src/core/$(DEPDIR)/logstalgia-settings.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-settings.Tpo"; exit 1; fi
#	source='src/core/settings.cpp' object='src/core/logstalgia-settings.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-settings.o `test -f 'src/core/settings.cpp' || echo '$(srcdir)/'`src/core/settings.cpp

src/core/logstalgia-settings.obj: src/core/settings.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-settings.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-settings.Tpo" -c -o src/core/logstalgia-settings.obj `if test -f 'src/core/settings.cpp'; then $(CYGPATH_W) 'src/core/settings.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/settings.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-settings.Tpo" "src/core/$(DEPDIR)/logstalgia-settings.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-settings.Tpo"; exit 1; fi
#	source='src/core/settings.cpp' object='src/core/logstalgia-settings.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-settings.obj `if test -f 'src/core/settings.cpp'; then $(CYGPATH_W) 'src/core/settings.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/settings.cpp'; fi`

src/core/logstalgia-shader.o: src/core/shader.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-shader.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-shader.Tpo" -c -o src/core/logstalgia-shader.o `test -f 'src/core/shader.cpp' || echo '$(srcdir)/'`src/core/shader.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-shader.Tpo" "src/core/$(DEPDIR)/logstalgia-shader.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-shader.Tpo"; exit 1; fi
#	source='src/core/shader.cpp' object='src/core/logstalgia-shader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-shader.o `test -f 'src/core/shader.cpp' || echo '$(srcdir)/'`src/core/shader.cpp

src/core/logstalgia-shader.obj: src/core/shader.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-shader.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-shader.Tpo" -c -o src/core/logstalgia-shader.obj `if test -f 'src/core/shader.cpp'; then $(CYGPATH_W) 'src/core/shader.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/shader.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-shader.Tpo" "src/core/$(DEPDIR)/logstalgia-shader.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-shader.Tpo"; exit 1; fi
#	source='src/core/shader.cpp' object='src/core/logstalgia-shader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-shader.obj `if test -f 'src/core/shader.cpp'; then $(CYGPATH_W) 'src/core/shader.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/shader.cpp'; fi`

src/core/logstalgia-shader_common.o: src/core/shader_common.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-shader_common.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-shader_common.Tpo" -c -o src/core/logstalgia-shader_common.o `test -f 'src/core/shader_common.cpp' || echo '$(srcdir)/'`src/core/shader_common.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-shader_common.Tpo" "src/core/$(DEPDIR)/logstalgia-shader_common.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-shader_common.Tpo"; exit 1; fi
#	source='src/core/shader_common.cpp' object='src/core/logstalgia-shader_common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-shader_common.o `test -f 'src/core/shader_common.cpp' || echo '$(srcdir)/'`src/core/shader_common.cpp

src/core/logstalgia-shader_common.obj: src/core/shader_common.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-shader_common.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-shader_common.Tpo" -c -o src/core/logstalgia-shader_common.obj `if test -f 'src/core/shader_common.cpp'; then $(CYGPATH_W) 'src/core/shader_common.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/shader_common.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-shader_common.Tpo" "src/core/$(DEPDIR)/logstalgia-shader_common.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-shader_common.Tpo"; exit 1; fi
#	source='src/core/shader_common.cpp' object='src/core/logstalgia-shader_common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-shader_common.obj `if test -f 'src/core/shader_common.cpp'; then $(CYGPATH_W) 'src/core/shader_common.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/shader_common.cpp'; fi`

src/core/logstalgia-stringhash.o: src/core/stringhash.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-stringhash.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-stringhash.Tpo" -c -o src/core/logstalgia-stringhash.o `test -f 'src/core/stringhash.cpp' || echo '$(srcdir)/'`src/core/stringhash.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-stringhash.Tpo" "src/core/$(DEPDIR)/logstalgia-stringhash.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-stringhash.Tpo"; exit 1; fi
#	source='src/core/stringhash.cpp' object='src/core/logstalgia-stringhash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-stringhash.o `test -f 'src/core/stringhash.cpp' || echo '$(srcdir)/'`src/core/stringhash.cpp

src/core/logstalgia-stringhash.obj: src/core/stringhash.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-stringhash.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-stringhash.Tpo" -c -o src/core/logstalgia-stringhash.obj `if test -f 'src/core/stringhash.cpp'; then $(CYGPATH_W) 'src/core/stringhash.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/stringhash.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-stringhash.Tpo" "src/core/$(DEPDIR)/logstalgia-stringhash.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-stringhash.Tpo"; exit 1; fi
#	source='src/core/stringhash.cpp' object='src/core/logstalgia-stringhash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-stringhash.obj `if test -f 'src/core/stringhash.cpp'; then $(CYGPATH_W) 'src/core/stringhash.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/stringhash.cpp'; fi`

src/core/logstalgia-texture.o: src/core/texture.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-texture.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-texture.Tpo" -c -o src/core/logstalgia-texture.o `test -f 'src/core/texture.cpp' || echo '$(srcdir)/'`src/core/texture.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-texture.Tpo" "src/core/$(DEPDIR)/logstalgia-texture.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-texture.Tpo"; exit 1; fi
#	source='src/core/texture.cpp' object='src/core/logstalgia-texture.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-texture.o `test -f 'src/core/texture.cpp' || echo '$(srcdir)/'`src/core/texture.cpp

src/core/logstalgia-texture.obj: src/core/texture.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-texture.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-texture.Tpo" -c -o src/core/logstalgia-texture.obj `if test -f 'src/core/texture.cpp'; then $(CYGPATH_W) 'src/core/texture.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/texture.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-texture.Tpo" "src/core/$(DEPDIR)/logstalgia-texture.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-texture.Tpo"; exit 1; fi
#	source='src/core/texture.cpp' object='src/core/logstalgia-texture.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-texture.obj `if test -f 'src/core/texture.cpp'; then $(CYGPATH_W) 'src/core/texture.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/texture.cpp'; fi`

src/core/logstalgia-timezone.o: src/core/timezone.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-timezone.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-timezone.Tpo" -c -o src/core/logstalgia-timezone.o `test -f 'src/core/timezone.cpp' || echo '$(srcdir)/'`src/core/timezone.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-timezone.Tpo" "src/core/$(DEPDIR)/logstalgia-timezone.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-timezone.Tpo"; exit 1; fi
#	source='src/core/timezone.cpp' object='src/core/logstalgia-timezone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-timezone.o `test -f 'src/core/timezone.cpp' || echo '$(srcdir)/'`src/core/timezone.cpp

src/core/logstalgia-timezone.obj: src/core/timezone.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-timezone.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-timezone.Tpo" -c -o src/core/logstalgia-timezone.obj `if test -f 'src/core/timezone.cpp'; then $(CYGPATH_W) 'src/core/timezone.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/timezone.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-timezone.Tpo" "src/core/$(DEPDIR)/logstalgia-timezone.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-timezone.Tpo"; exit 1; fi
#	source='src/core/timezone.cpp' object='src/core/logstalgia-timezone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-timezone.obj `if test -f 'src/core/timezone.cpp'; then $(CYGPATH_W) 'src/core/timezone.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/timezone.cpp'; fi`

src/core/logstalgia-vbo.o: src/core/vbo.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-vbo.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-vbo.Tpo" -c -o src/core/logstalgia-vbo.o `test -f 'src/core/vbo.cpp' || echo '$(srcdir)/'`src/core/vbo.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-vbo.Tpo" "src/core/$(DEPDIR)/logstalgia-vbo.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-vbo.Tpo"; exit 1; fi
#	source='src/core/vbo.cpp' object='src/core/logstalgia-vbo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-vbo.o `test -f 'src/core/vbo.cpp' || echo '$(srcdir)/'`src/core/vbo.cpp

src/core/logstalgia-vbo.obj: src/core/vbo.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-vbo.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-vbo.Tpo" -c -o src/core/logstalgia-vbo.obj `if test -f 'src/core/vbo.cpp'; then $(CYGPATH_W) 'src/core/vbo.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/vbo.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-vbo.Tpo" "src/core/$(DEPDIR)/logstalgia-vbo.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-vbo.Tpo"; exit 1; fi
#	source='src/core/vbo.cpp' object='src/core/logstalgia-vbo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-vbo.obj `if test -f 'src/core/vbo.cpp'; then $(CYGPATH_W) 'src/core/vbo.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/vbo.cpp'; fi`

src/core/logstalgia-vectors.o: src/core/vectors.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-vectors.o -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-vectors.Tpo" -c -o src/core/logstalgia-vectors.o `test -f 'src/core/vectors.cpp' || echo '$(srcdir)/'`src/core/vectors.cpp; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-vectors.Tpo" "src/core/$(DEPDIR)/logstalgia-vectors.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-vectors.Tpo"; exit 1; fi
#	source='src/core/vectors.cpp' object='src/core/logstalgia-vectors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-vectors.o `test -f 'src/core/vectors.cpp' || echo '$(srcdir)/'`src/core/vectors.cpp

src/core/logstalgia-vectors.obj: src/core/vectors.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/core/logstalgia-vectors.obj -MD -MP -MF "src/core/$(DEPDIR)/logstalgia-vectors.Tpo" -c -o src/core/logstalgia-vectors.obj `if test -f 'src/core/vectors.cpp'; then $(CYGPATH_W) 'src/core/vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/vectors.cpp'; fi`; \
	then mv -f "src/core/$(DEPDIR)/logstalgia-vectors.Tpo" "src/core/$(DEPDIR)/logstalgia-vectors.Po"; else rm -f "src/core/$(DEPDIR)/logstalgia-vectors.Tpo"; exit 1; fi
#	source='src/core/vectors.cpp' object='src/core/logstalgia-vectors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/core/logstalgia-vectors.obj `if test -f 'src/core/vectors.cpp'; then $(CYGPATH_W) 'src/core/vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/src/core/vectors.cpp'; fi`

src/logstalgia-custom.o: src/custom.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-custom.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-custom.Tpo" -c -o src/logstalgia-custom.o `test -f 'src/custom.cpp' || echo '$(srcdir)/'`src/custom.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-custom.Tpo" "src/$(DEPDIR)/logstalgia-custom.Po"; else rm -f "src/$(DEPDIR)/logstalgia-custom.Tpo"; exit 1; fi
#	source='src/custom.cpp' object='src/logstalgia-custom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-custom.o `test -f 'src/custom.cpp' || echo '$(srcdir)/'`src/custom.cpp

src/logstalgia-custom.obj: src/custom.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-custom.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-custom.Tpo" -c -o src/logstalgia-custom.obj `if test -f 'src/custom.cpp'; then $(CYGPATH_W) 'src/custom.cpp'; else $(CYGPATH_W) '$(srcdir)/src/custom.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-custom.Tpo" "src/$(DEPDIR)/logstalgia-custom.Po"; else rm -f "src/$(DEPDIR)/logstalgia-custom.Tpo"; exit 1; fi
#	source='src/custom.cpp' object='src/logstalgia-custom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-custom.obj `if test -f 'src/custom.cpp'; then $(CYGPATH_W) 'src/custom.cpp'; else $(CYGPATH_W) '$(srcdir)/src/custom.cpp'; fi`

src/logstalgia-logentry.o: src/logentry.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-logentry.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-logentry.Tpo" -c -o src/logstalgia-logentry.o `test -f 'src/logentry.cpp' || echo '$(srcdir)/'`src/logentry.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-logentry.Tpo" "src/$(DEPDIR)/logstalgia-logentry.Po"; else rm -f "src/$(DEPDIR)/logstalgia-logentry.Tpo"; exit 1; fi
#	source='src/logentry.cpp' object='src/logstalgia-logentry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-logentry.o `test -f 'src/logentry.cpp' || echo '$(srcdir)/'`src/logentry.cpp

src/logstalgia-logentry.obj: src/logentry.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-logentry.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-logentry.Tpo" -c -o src/logstalgia-logentry.obj `if test -f 'src/logentry.cpp'; then $(CYGPATH_W) 'src/logentry.cpp'; else $(CYGPATH_W) '$(srcdir)/src/logentry.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-logentry.Tpo" "src/$(DEPDIR)/logstalgia-logentry.Po"; else rm -f "src/$(DEPDIR)/logstalgia-logentry.Tpo"; exit 1; fi
#	source='src/logentry.cpp' object='src/logstalgia-logentry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-logentry.obj `if test -f 'src/logentry.cpp'; then $(CYGPATH_W) 'src/logentry.cpp'; else $(CYGPATH_W) '$(srcdir)/src/logentry.cpp'; fi`

src/logstalgia-logstalgia.o: src/logstalgia.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-logstalgia.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-logstalgia.Tpo" -c -o src/logstalgia-logstalgia.o `test -f 'src/logstalgia.cpp' || echo '$(srcdir)/'`src/logstalgia.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-logstalgia.Tpo" "src/$(DEPDIR)/logstalgia-logstalgia.Po"; else rm -f "src/$(DEPDIR)/logstalgia-logstalgia.Tpo"; exit 1; fi
#	source='src/logstalgia.cpp' object='src/logstalgia-logstalgia.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-logstalgia.o `test -f 'src/logstalgia.cpp' || echo '$(srcdir)/'`src/logstalgia.cpp

src/logstalgia-logstalgia.obj: src/logstalgia.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-logstalgia.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-logstalgia.Tpo" -c -o src/logstalgia-logstalgia.obj `if test -f 'src/logstalgia.cpp'; then $(CYGPATH_W) 'src/logstalgia.cpp'; else $(CYGPATH_W) '$(srcdir)/src/logstalgia.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-logstalgia.Tpo" "src/$(DEPDIR)/logstalgia-logstalgia.Po"; else rm -f "src/$(DEPDIR)/logstalgia-logstalgia.Tpo"; exit 1; fi
#	source='src/logstalgia.cpp' object='src/logstalgia-logstalgia.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-logstalgia.obj `if test -f 'src/logstalgia.cpp'; then $(CYGPATH_W) 'src/logstalgia.cpp'; else $(CYGPATH_W) '$(srcdir)/src/logstalgia.cpp'; fi`

src/logstalgia-main.o: src/main.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-main.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-main.Tpo" -c -o src/logstalgia-main.o `test -f 'src/main.cpp' || echo '$(srcdir)/'`src/main.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-main.Tpo" "src/$(DEPDIR)/logstalgia-main.Po"; else rm -f "src/$(DEPDIR)/logstalgia-main.Tpo"; exit 1; fi
#	source='src/main.cpp' object='src/logstalgia-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-main.o `test -f 'src/main.cpp' || echo '$(srcdir)/'`src/main.cpp

src/logstalgia-main.obj: src/main.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-main.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-main.Tpo" -c -o src/logstalgia-main.obj `if test -f 'src/main.cpp'; then $(CYGPATH_W) 'src/main.cpp'; else $(CYGPATH_W) '$(srcdir)/src/main.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-main.Tpo" "src/$(DEPDIR)/logstalgia-main.Po"; else rm -f "src/$(DEPDIR)/logstalgia-main.Tpo"; exit 1; fi
#	source='src/main.cpp' object='src/logstalgia-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-main.obj `if test -f 'src/main.cpp'; then $(CYGPATH_W) 'src/main.cpp'; else $(CYGPATH_W) '$(srcdir)/src/main.cpp'; fi`

src/logstalgia-paddle.o: src/paddle.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-paddle.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-paddle.Tpo" -c -o src/logstalgia-paddle.o `test -f 'src/paddle.cpp' || echo '$(srcdir)/'`src/paddle.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-paddle.Tpo" "src/$(DEPDIR)/logstalgia-paddle.Po"; else rm -f "src/$(DEPDIR)/logstalgia-paddle.Tpo"; exit 1; fi
#	source='src/paddle.cpp' object='src/logstalgia-paddle.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-paddle.o `test -f 'src/paddle.cpp' || echo '$(srcdir)/'`src/paddle.cpp

src/logstalgia-paddle.obj: src/paddle.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-paddle.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-paddle.Tpo" -c -o src/logstalgia-paddle.obj `if test -f 'src/paddle.cpp'; then $(CYGPATH_W) 'src/paddle.cpp'; else $(CYGPATH_W) '$(srcdir)/src/paddle.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-paddle.Tpo" "src/$(DEPDIR)/logstalgia-paddle.Po"; else rm -f "src/$(DEPDIR)/logstalgia-paddle.Tpo"; exit 1; fi
#	source='src/paddle.cpp' object='src/logstalgia-paddle.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-paddle.obj `if test -f 'src/paddle.cpp'; then $(CYGPATH_W) 'src/paddle.cpp'; else $(CYGPATH_W) '$(srcdir)/src/paddle.cpp'; fi`

src/logstalgia-requestball.o: src/requestball.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-requestball.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-requestball.Tpo" -c -o src/logstalgia-requestball.o `test -f 'src/requestball.cpp' || echo '$(srcdir)/'`src/requestball.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-requestball.Tpo" "src/$(DEPDIR)/logstalgia-requestball.Po"; else rm -f "src/$(DEPDIR)/logstalgia-requestball.Tpo"; exit 1; fi
#	source='src/requestball.cpp' object='src/logstalgia-requestball.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-requestball.o `test -f 'src/requestball.cpp' || echo '$(srcdir)/'`src/requestball.cpp

src/logstalgia-requestball.obj: src/requestball.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-requestball.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-requestball.Tpo" -c -o src/logstalgia-requestball.obj `if test -f 'src/requestball.cpp'; then $(CYGPATH_W) 'src/requestball.cpp'; else $(CYGPATH_W) '$(srcdir)/src/requestball.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-requestball.Tpo" "src/$(DEPDIR)/logstalgia-requestball.Po"; else rm -f "src/$(DEPDIR)/logstalgia-requestball.Tpo"; exit 1; fi
#	source='src/requestball.cpp' object='src/logstalgia-requestball.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-requestball.obj `if test -f 'src/requestball.cpp'; then $(CYGPATH_W) 'src/requestball.cpp'; else $(CYGPATH_W) '$(srcdir)/src/requestball.cpp'; fi`

src/logstalgia-settings.o: src/settings.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-settings.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-settings.Tpo" -c -o src/logstalgia-settings.o `test -f 'src/settings.cpp' || echo '$(srcdir)/'`src/settings.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-settings.Tpo" "src/$(DEPDIR)/logstalgia-settings.Po"; else rm -f "src/$(DEPDIR)/logstalgia-settings.Tpo"; exit 1; fi
#	source='src/settings.cpp' object='src/logstalgia-settings.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-settings.o `test -f 'src/settings.cpp' || echo '$(srcdir)/'`src/settings.cpp

src/logstalgia-settings.obj: src/settings.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-settings.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-settings.Tpo" -c -o src/logstalgia-settings.obj `if test -f 'src/settings.cpp'; then $(CYGPATH_W) 'src/settings.cpp'; else $(CYGPATH_W) '$(srcdir)/src/settings.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-settings.Tpo" "src/$(DEPDIR)/logstalgia-settings.Po"; else rm -f "src/$(DEPDIR)/logstalgia-settings.Tpo"; exit 1; fi
#	source='src/settings.cpp' object='src/logstalgia-settings.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-settings.obj `if test -f 'src/settings.cpp'; then $(CYGPATH_W) 'src/settings.cpp'; else $(CYGPATH_W) '$(srcdir)/src/settings.cpp'; fi`

src/logstalgia-slider.o: src/slider.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-slider.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-slider.Tpo" -c -o src/logstalgia-slider.o `test -f 'src/slider.cpp' || echo '$(srcdir)/'`src/slider.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-slider.Tpo" "src/$(DEPDIR)/logstalgia-slider.Po"; else rm -f "src/$(DEPDIR)/logstalgia-slider.Tpo"; exit 1; fi
#	source='src/slider.cpp' object='src/logstalgia-slider.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-slider.o `test -f 'src/slider.cpp' || echo '$(srcdir)/'`src/slider.cpp

src/logstalgia-slider.obj: src/slider.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-slider.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-slider.Tpo" -c -o src/logstalgia-slider.obj `if test -f 'src/slider.cpp'; then $(CYGPATH_W) 'src/slider.cpp'; else $(CYGPATH_W) '$(srcdir)/src/slider.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-slider.Tpo" "src/$(DEPDIR)/logstalgia-slider.Po"; else rm -f "src/$(DEPDIR)/logstalgia-slider.Tpo"; exit 1; fi
#	source='src/slider.cpp' object='src/logstalgia-slider.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-slider.obj `if test -f 'src/slider.cpp'; then $(CYGPATH_W) 'src/slider.cpp'; else $(CYGPATH_W) '$(srcdir)/src/slider.cpp'; fi`

src/logstalgia-summarizer.o: src/summarizer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-summarizer.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-summarizer.Tpo" -c -o src/logstalgia-summarizer.o `test -f 'src/summarizer.cpp' || echo '$(srcdir)/'`src/summarizer.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-summarizer.Tpo" "src/$(DEPDIR)/logstalgia-summarizer.Po"; else rm -f "src/$(DEPDIR)/logstalgia-summarizer.Tpo"; exit 1; fi
#	source='src/summarizer.cpp' object='src/logstalgia-summarizer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-summarizer.o `test -f 'src/summarizer.cpp' || echo '$(srcdir)/'`src/summarizer.cpp

src/logstalgia-summarizer.obj: src/summarizer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-summarizer.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-summarizer.Tpo" -c -o src/logstalgia-summarizer.obj `if test -f 'src/summarizer.cpp'; then $(CYGPATH_W) 'src/summarizer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/summarizer.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-summarizer.Tpo" "src/$(DEPDIR)/logstalgia-summarizer.Po"; else rm -f "src/$(DEPDIR)/logstalgia-summarizer.Tpo"; exit 1; fi
#	source='src/summarizer.cpp' object='src/logstalgia-summarizer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-summarizer.obj `if test -f 'src/summarizer.cpp'; then $(CYGPATH_W) 'src/summarizer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/summarizer.cpp'; fi`

src/logstalgia-textarea.o: src/textarea.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-textarea.o -MD -MP -MF "src/$(DEPDIR)/logstalgia-textarea.Tpo" -c -o src/logstalgia-textarea.o `test -f 'src/textarea.cpp' || echo '$(srcdir)/'`src/textarea.cpp; \
	then mv -f "src/$(DEPDIR)/logstalgia-textarea.Tpo" "src/$(DEPDIR)/logstalgia-textarea.Po"; else rm -f "src/$(DEPDIR)/logstalgia-textarea.Tpo"; exit 1; fi
#	source='src/textarea.cpp' object='src/logstalgia-textarea.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-textarea.o `test -f 'src/textarea.cpp' || echo '$(srcdir)/'`src/textarea.cpp

src/logstalgia-textarea.obj: src/textarea.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -MT src/logstalgia-textarea.obj -MD -MP -MF "src/$(DEPDIR)/logstalgia-textarea.Tpo" -c -o src/logstalgia-textarea.obj `if test -f 'src/textarea.cpp'; then $(CYGPATH_W) 'src/textarea.cpp'; else $(CYGPATH_W) '$(srcdir)/src/textarea.cpp'; fi`; \
	then mv -f "src/$(DEPDIR)/logstalgia-textarea.Tpo" "src/$(DEPDIR)/logstalgia-textarea.Po"; else rm -f "src/$(DEPDIR)/logstalgia-textarea.Tpo"; exit 1; fi
#	source='src/textarea.cpp' object='src/logstalgia-textarea.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(logstalgia_CXXFLAGS) $(CXXFLAGS) -c -o src/logstalgia-textarea.obj `if test -f 'src/textarea.cpp'; then $(CYGPATH_W) 'src/textarea.cpp'; else $(CYGPATH_W) '$(srcdir)/src/textarea.cpp'; fi`
uninstall-info-am:
install-dist_fontsDATA: $(dist_fonts_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(fontsdir)" || $(mkdir_p) "$(DESTDIR)$(fontsdir)"
	@list='$(dist_fonts_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(dist_fontsDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(fontsdir)/$$f'"; \
	  $(dist_fontsDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(fontsdir)/$$f"; \
	done

uninstall-dist_fontsDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(dist_fonts_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(fontsdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(fontsdir)/$$f"; \
	done
install-dist_pkgdataDATA: $(dist_pkgdata_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(pkgdatadir)" || $(mkdir_p) "$(DESTDIR)$(pkgdatadir)"
	@list='$(dist_pkgdata_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(dist_pkgdataDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(pkgdatadir)/$$f'"; \
	  $(dist_pkgdataDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(pkgdatadir)/$$f"; \
	done

uninstall-dist_pkgdataDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(dist_pkgdata_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(pkgdatadir)/$$f'"; \
	  rm -f "$(DESTDIR)$(pkgdatadir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	mkdir $(distdir)
	$(mkdir_p) $(distdir)/build-aux $(distdir)/data $(distdir)/data/fonts $(distdir)/m4
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	-find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)
dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod u+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(DATA)
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(fontsdir)" "$(DESTDIR)$(pkgdatadir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-rm -f src/$(DEPDIR)/$(am__dirstamp)
	-rm -f src/$(am__dirstamp)
	-rm -f src/core/$(DEPDIR)/$(am__dirstamp)
	-rm -f src/core/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf src/$(DEPDIR) src/core/$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-dist_fontsDATA install-dist_pkgdataDATA
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-data-hook

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf src/$(DEPDIR) src/core/$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-dist_fontsDATA \
	uninstall-dist_pkgdataDATA uninstall-info-am
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) uninstall-hook

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic ctags dist dist-all dist-bzip2 \
	dist-gzip dist-shar dist-tarZ dist-zip distcheck distclean \
	distclean-compile distclean-generic distclean-tags \
	distcleancheck distdir distuninstallcheck dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-data-hook \
	install-dist_fontsDATA install-dist_pkgdataDATA install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-dist_fontsDATA uninstall-dist_pkgdataDATA \
	uninstall-hook uninstall-info-am


install-data-hook:
	mkdir -p -m 755 ${DESTDIR}/$(mandir)/man1
	$(SED) 's|SDLAPP_RESOURCE_DIR|$(pkgdatadir)|g' data/logstalgia.1 | gzip -f9 > $(DESTDIR)$(mandir)/man1/logstalgia.1.gz

uninstall-hook:
	-rm -f $(DESTDIR)$(mandir)/man1/logstalgia.1.gz
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
