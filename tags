!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/lieanu\/ctf\/bctf-final\/Logstalgia\/build-aux\/missing --run aclocal-1.9$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMDEP_FALSE	Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_TRUE	Makefile	/^AMDEP_TRUE = $/;"	m
AMTAR	Makefile	/^AMTAR = ${SHELL} \/home\/lieanu\/ctf\/bctf-final\/Logstalgia\/build-aux\/missing --run tar$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = -DSDLAPP_RESOURCE_DIR=\\"$(pkgdatadir)\\" $(am__append_1)$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/lieanu\/ctf\/bctf-final\/Logstalgia\/build-aux\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/lieanu\/ctf\/bctf-final\/Logstalgia\/build-aux\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/lieanu\/ctf\/bctf-final\/Logstalgia\/build-aux\/missing --run automake-1.9$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
AbstractShader	src/core/shader_common.cpp	/^AbstractShader::AbstractShader() {$/;"	f	class:AbstractShader
AbstractShader	src/core/shader_common.cpp	/^AbstractShader::AbstractShader(const std::string& prefix)$/;"	f	class:AbstractShader
AbstractShader	src/core/shader_common.h	/^class AbstractShader : public Resource {$/;"	c
AbstractShaderPass	src/core/shader_common.cpp	/^AbstractShaderPass::AbstractShaderPass(AbstractShader* parent, int shader_object_type, const std::string& shader_object_desc)$/;"	f	class:AbstractShaderPass
AbstractShaderPass	src/core/shader_common.h	/^class AbstractShaderPass {$/;"	c
AccessLog	src/logentry.cpp	/^AccessLog::AccessLog() {$/;"	f	class:AccessLog
AccessLog	src/logentry.h	/^class AccessLog {$/;"	c
BALL_H	src/ball.h	19;"	d
BOOST_CPPFLAGS	Makefile	/^BOOST_CPPFLAGS = -I\/usr\/include$/;"	m
BOOST_LDFLAGS	Makefile	/^BOOST_LDFLAGS = -L\/usr\/lib64$/;"	m
BOUNDS_H	src/core/bounds.h	29;"	d
BaseLog	src/core/seeklog.h	/^class BaseLog {$/;"	c
BoolShaderUniform	src/core/shader_common.cpp	/^BoolShaderUniform::BoolShaderUniform(AbstractShader* shader, const std::string& name, bool value) :$/;"	f	class:BoolShaderUniform
BoolShaderUniform	src/core/shader_common.h	/^class BoolShaderUniform : public ShaderUniform {$/;"	c
Bounds2D	src/core/bounds.h	/^    Bounds2D() {$/;"	f	class:Bounds2D
Bounds2D	src/core/bounds.h	/^    Bounds2D(const vec2& min, const vec2& max) {$/;"	f	class:Bounds2D
Bounds2D	src/core/bounds.h	/^class Bounds2D {$/;"	c
Bounds3D	src/core/bounds.h	/^    Bounds3D() {$/;"	f	class:Bounds3D
Bounds3D	src/core/bounds.h	/^    Bounds3D(vec3 min, vec3 max) {$/;"	f	class:Bounds3D
Bounds3D	src/core/bounds.h	/^class Bounds3D {$/;"	c
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CODE_POINT_MAX	src/core/utf8/core.h	/^    const uint32_t CODE_POINT_MAX      = 0x0010ffffu;$/;"	m	namespace:utf8::internal
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONF_FILE_H	src/core/conffile.h	19;"	d
CORE_GL_H	src/core/gl.h	2;"	d
CORE_TIMER_H	src/core/timer.h	2;"	d
CORE_TIMEZONE_H	src/core/timezone.h	2;"	d
CORE_VBO_H	src/core/vbo.h	29;"	d
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =  -pthread -pthread -I\/usr\/include\/freetype2     -I\/usr\/include\/GL   -D_REENTRANT -I\/usr\/include\/SDL2    -I\/usr\/include\/libpng12   -I\/usr\/include$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CUSTOM_ACCESS_LOG	src/custom.h	19;"	d
CXX	Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2 -pthread -pthread$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name, bool value) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name, const std::string& value, int lineno) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name, float value) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name, int value) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name, vec2 value) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name, vec3 value) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.cpp	/^ConfEntry::ConfEntry(const std::string& name, vec4 value) {$/;"	f	class:ConfEntry
ConfEntry	src/core/conffile.h	/^class ConfEntry {$/;"	c
ConfEntryList	src/core/conffile.h	/^typedef std::list<ConfEntry*> ConfEntryList;$/;"	t
ConfFile	src/core/conffile.cpp	/^ConfFile::ConfFile() {$/;"	f	class:ConfFile
ConfFile	src/core/conffile.h	/^class ConfFile {$/;"	c
ConfFileException	src/core/conffile.h	/^    ConfFileException(const std::string& errmsg, const std::string& conffile, int lineno = 0) : errmsg(errmsg), conffile(conffile), lineno(lineno) {}$/;"	f	class:ConfFileException
ConfFileException	src/core/conffile.h	/^class ConfFileException : public std::exception {$/;"	c
ConfSection	src/core/conffile.cpp	/^ConfSection::ConfSection() {$/;"	f	class:ConfSection
ConfSection	src/core/conffile.cpp	/^ConfSection::ConfSection(const std::string& name, int lineno) {$/;"	f	class:ConfSection
ConfSection	src/core/conffile.h	/^class ConfSection {$/;"	c
ConfSectionList	src/core/conffile.h	/^typedef std::list<ConfSection*> ConfSectionList;$/;"	t
CustomAccessLog	src/custom.cpp	/^CustomAccessLog::CustomAccessLog() {$/;"	f	class:CustomAccessLog
CustomAccessLog	src/custom.h	/^class CustomAccessLog : public AccessLog {$/;"	c
DATA	Makefile	/^DATA = $(dist_fonts_DATA) $(dist_pkgdata_DATA)$/;"	m
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir)$/;"	m
DEFS	Makefile	/^DEFS = -DPACKAGE_NAME=\\"Logstalgia\\" -DPACKAGE_TARNAME=\\"logstalgia\\" -DPACKAGE_VERSION=\\"1.0.5\\" -DPACKAGE_STRING=\\"Logstalgia\\ 1.0.5\\" -DPACKAGE_BUGREPORT=\\"acaudwell@gmail.com\\" -DPACKAGE_URL=\\"\\" -DPACKAGE=\\"logstalgia\\" -DVERSION=\\"1.0.5\\" -DHAVE_PTHREAD=1 -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_GL_GL_H=1 -DHAVE_GL_GLU_H=1 -DHAVE_IMG_LOADPNG_RW=1 -DHAVE_IMG_LOADJPG_RW=1 -DHAVE_BOOST=\/\\*\\*\/$/;"	m
DEGREES_TO_RADIANS	src/core/pi.h	33;"	d
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz $(distdir).tar.bz2$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = README $(am__configure_deps) $(am__dist_fonts_DATA_DIST) \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(logstalgia_SOURCES)$/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
FONTDIR_FALSE	Makefile	/^FONTDIR_FALSE = $/;"	m
FONTDIR_TRUE	Makefile	/^FONTDIR_TRUE = #$/;"	m
FRAME_EXPORTER_DUMP	src/core/ppm.h	/^       FRAME_EXPORTER_DUMP,$/;"	e	enum:__anon1
FRAME_EXPORTER_EXIT	src/core/ppm.h	/^       FRAME_EXPORTER_EXIT,$/;"	e	enum:__anon1
FRAME_EXPORTER_STOPPED	src/core/ppm.h	/^       FRAME_EXPORTER_STOPPED };$/;"	e	enum:__anon1
FRAME_EXPORTER_WAIT	src/core/ppm.h	/^enum { FRAME_EXPORTER_WAIT,$/;"	e	enum:__anon1
FRUSTUM_H	src/core/frustum.h	29;"	d
FT2_CFLAGS	Makefile	/^FT2_CFLAGS = -I\/usr\/include\/freetype2  $/;"	m
FT2_LIBS	Makefile	/^FT2_LIBS = -lfreetype  $/;"	m
FTUnicodeStringItr	src/core/ftgl/FTUnicode.h	/^    FTUnicodeStringItr(const T* string) : curPos(string), nextPos(string)$/;"	f	class:FTUnicodeStringItr
FTUnicodeStringItr	src/core/ftgl/FTUnicode.h	/^class FTUnicodeStringItr$/;"	c
FXFont	src/core/fxfont.cpp	/^FXFont::FXFont() {$/;"	f	class:FXFont
FXFont	src/core/fxfont.cpp	/^FXFont::FXFont(FXGlyphSet* glyphset) {$/;"	f	class:FXFont
FXFont	src/core/fxfont.h	/^class FXFont {$/;"	c
FXFontException	src/core/fxfont.h	/^    FXFontException(const std::string & font_file) : ResourceException(font_file) {}$/;"	f	class:FXFontException
FXFontException	src/core/fxfont.h	/^class FXFontException : public ResourceException {$/;"	c
FXFontManager	src/core/fxfont.cpp	/^FXFontManager::FXFontManager() {$/;"	f	class:FXFontManager
FXFontManager	src/core/fxfont.h	/^class FXFontManager {$/;"	c
FXGlyph	src/core/fxfont.cpp	/^FXGlyph::FXGlyph(FXGlyphSet* set, unsigned int chr) {$/;"	f	class:FXGlyph
FXGlyph	src/core/fxfont.h	/^class FXGlyph {$/;"	c
FXGlyphPage	src/core/fxfont.cpp	/^FXGlyphPage::FXGlyphPage(int page_width, int page_height) {$/;"	f	class:FXGlyphPage
FXGlyphPage	src/core/fxfont.h	/^class FXGlyphPage {$/;"	c
FXGlyphSet	src/core/fxfont.cpp	/^FXGlyphSet::FXGlyphSet(FT_Library freetype, const std::string& fontfile, int size, int dpi) {$/;"	f	class:FXGlyphSet
FXGlyphSet	src/core/fxfont.h	/^class FXGlyphSet {$/;"	c
FX_FONT_H	src/core/fxfont.h	55;"	d
FloatShaderUniform	src/core/shader_common.cpp	/^FloatShaderUniform::FloatShaderUniform(AbstractShader* shader, const std::string& name, float value) :$/;"	f	class:FloatShaderUniform
FloatShaderUniform	src/core/shader_common.h	/^class FloatShaderUniform : public ShaderUniform {$/;"	c
FrameExporter	src/core/ppm.cpp	/^FrameExporter::FrameExporter() {$/;"	f	class:FrameExporter
FrameExporter	src/core/ppm.h	/^class FrameExporter {$/;"	c
Frustum	src/core/frustum.cpp	/^Frustum::Frustum() {$/;"	f	class:Frustum
Frustum	src/core/frustum.cpp	/^Frustum::Frustum(const vec3& source, const vec3& target, const vec3& up, float fov, float near_distance, float far_distance) {$/;"	f	class:Frustum
Frustum	src/core/frustum.h	/^class Frustum {$/;"	c
GLEW_CFLAGS	Makefile	/^GLEW_CFLAGS = -I\/usr\/include\/GL  $/;"	m
GLEW_LIBS	Makefile	/^GLEW_LIBS = -lGLEW  $/;"	m
GLM_FORCE_RADIANS	src/core/vectors.h	31;"	d
GLSL_SHADER_H	src/core/shader.h	29;"	d
GLTimer	src/core/timer.cpp	/^GLTimer::GLTimer() {$/;"	f	class:GLTimer
GLTimer	src/core/timer.cpp	/^GLTimer::GLTimer(const std::string& name) : name(name) {$/;"	f	class:GLTimer
GLTimer	src/core/timer.h	/^class GLTimer {$/;"	c
GLU_CFLAGS	Makefile	/^GLU_CFLAGS = -pthread$/;"	m
GLU_LIBS	Makefile	/^GLU_LIBS = -lGLU$/;"	m
GL_CFLAGS	Makefile	/^GL_CFLAGS = -pthread$/;"	m
GL_GLEXT_PROTOTYPES	src/core/shader.cc	32;"	d	file:
GL_LIBS	Makefile	/^GL_LIBS = -lGL $/;"	m
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
INCOMPLETE_SEQUENCE	src/core/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
INVALID_CODE_POINT	src/core/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
INVALID_LEAD	src/core/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
IntShaderUniform	src/core/shader_common.cpp	/^IntShaderUniform::IntShaderUniform(AbstractShader* shader, const std::string& name, int value) :$/;"	f	class:IntShaderUniform
IntShaderUniform	src/core/shader_common.h	/^class IntShaderUniform : public ShaderUniform {$/;"	c
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LEAD_OFFSET	src/core/utf8/core.h	/^    const uint16_t LEAD_OFFSET         = LEAD_SURROGATE_MIN - (0x10000 >> 10);$/;"	m	namespace:utf8::internal
LEAD_SURROGATE_MAX	src/core/utf8/core.h	/^    const uint16_t LEAD_SURROGATE_MAX  = 0xdbffu;$/;"	m	namespace:utf8::internal
LEAD_SURROGATE_MIN	src/core/utf8/core.h	/^    const uint16_t LEAD_SURROGATE_MIN  = 0xd800u;$/;"	m	namespace:utf8::internal
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS =  -lGL  -lGLU -lfreetype   -lpcre   -lGLEW   -lSDL2_image -lSDL2    -lpng12  $/;"	m
LOGENTRY_H	src/logentry.h	19;"	d
LOGGER_H	src/core/logger.h	29;"	d
LOGSTALGIA_H	src/logstalgia.h	19;"	d
LOGSTALGIA_SETTINGS_H	src/settings.h	19;"	d
LOGSTALGIA_VERSION	src/settings.h	21;"	d
LOG_LEVEL_CONSOLE	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LOG_LEVEL_DEBUG	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LOG_LEVEL_ERROR	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LOG_LEVEL_INFO	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LOG_LEVEL_OFF	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LOG_LEVEL_PEDANTIC	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LOG_LEVEL_SCRIPT	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LOG_LEVEL_WARN	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	e	enum:logger_level
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
Line	src/ball.cpp	/^Line::Line(vec2 start, vec2 end) {$/;"	f	class:Line
Line	src/ball.h	/^class Line {$/;"	c
LogEntry	src/logentry.cpp	/^LogEntry::LogEntry() {$/;"	f	class:LogEntry
LogEntry	src/logentry.h	/^class LogEntry {$/;"	c
Logger	src/core/logger.cpp	/^Logger::Logger(int level, FILE* stream, int hist_capacity) {$/;"	f	class:Logger
Logger	src/core/logger.h	/^class Logger {$/;"	c
LoggerMessage	src/core/logger.cpp	/^LoggerMessage::LoggerMessage(int level, const std::string& message)$/;"	f	class:LoggerMessage
LoggerMessage	src/core/logger.h	/^class LoggerMessage {$/;"	c
Logstalgia	src/logstalgia.cpp	/^Logstalgia::Logstalgia(const std::string& logfile) : SDLApp() {$/;"	f	class:Logstalgia
Logstalgia	src/logstalgia.h	/^class Logstalgia : public SDLApp {$/;"	c
LogstalgiaSettings	src/settings.cpp	/^LogstalgiaSettings::LogstalgiaSettings() {$/;"	f	class:LogstalgiaSettings
LogstalgiaSettings	src/settings.h	/^class LogstalgiaSettings : public SDLAppSettings {$/;"	c
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/lieanu\/ctf\/bctf-final\/Logstalgia\/build-aux\/missing --run makeinfo$/;"	m
Mat3ShaderUniform	src/core/shader_common.cpp	/^Mat3ShaderUniform::Mat3ShaderUniform(AbstractShader* shader, const std::string& name, const mat3& value) :$/;"	f	class:Mat3ShaderUniform
Mat3ShaderUniform	src/core/shader_common.h	/^class Mat3ShaderUniform : public ShaderUniform {$/;"	c
Mat4ShaderUniform	src/core/shader_common.cpp	/^Mat4ShaderUniform::Mat4ShaderUniform(AbstractShader* shader, const std::string& name, const mat4& value) :$/;"	f	class:Mat4ShaderUniform
Mat4ShaderUniform	src/core/shader_common.h	/^class Mat4ShaderUniform : public ShaderUniform {$/;"	c
MouseCursor	src/core/mousecursor.cpp	/^MouseCursor::MouseCursor() {$/;"	f	class:MouseCursor
MouseCursor	src/core/mousecursor.h	/^class MouseCursor {$/;"	c
NCSALog	src/ncsa.cpp	/^NCSALog::NCSALog() {$/;"	f	class:NCSALog
NCSALog	src/ncsa.h	/^class NCSALog : public AccessLog {$/;"	c
NCSA_ACCESS_LOG	src/ncsa.h	19;"	d
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOT_ENOUGH_ROOM	src/core/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
NO_SDL_GLEXT	src/core/gl.h	6;"	d
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OVERLONG_SEQUENCE	src/core/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
PACKAGE	Makefile	/^PACKAGE = logstalgia$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = acaudwell@gmail.com$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = Logstalgia$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = Logstalgia 1.0.5$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = logstalgia$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.0.5$/;"	m
PADDLE_H	src/paddle.h	19;"	d
PADDLE_NONE	src/settings.h	25;"	d
PADDLE_PID	src/settings.h	27;"	d
PADDLE_SINGLE	src/settings.h	26;"	d
PADDLE_VHOST	src/settings.h	28;"	d
PARSE_AND_LOG	src/core/logger.cpp	44;"	d	file:
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PCRE_CFLAGS	Makefile	/^PCRE_CFLAGS =  $/;"	m
PCRE_LIBS	Makefile	/^PCRE_LIBS = -lpcre  $/;"	m
PI	src/core/pi.h	31;"	d
PI_H	src/core/pi.h	29;"	d
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PLANE_H	src/core/plane.h	29;"	d
PNGExporter	src/core/png_writer.cpp	/^PNGExporter::PNGExporter(const std::string& filename) {$/;"	f	class:PNGExporter
PNGExporter	src/core/png_writer.h	/^class PNGExporter {$/;"	c
PNGExporterException	src/core/png_writer.h	/^    PNGExporterException(const std::string& filename) : filename(filename) {};$/;"	f	class:PNGExporterException
PNGExporterException	src/core/png_writer.h	/^class PNGExporterException : public std::exception {$/;"	c
PNGWriter	src/core/png_writer.cpp	/^PNGWriter::PNGWriter(int components)$/;"	f	class:PNGWriter
PNGWriter	src/core/png_writer.h	/^class PNGWriter {$/;"	c
PNG_CFLAGS	Makefile	/^PNG_CFLAGS = -I\/usr\/include\/libpng12  $/;"	m
PNG_EXPORTER_EXIT	src/core/png_writer.h	/^enum png_exporter_state { PNG_EXPORTER_WAIT, PNG_EXPORTER_WRITE, PNG_EXPORTER_EXIT, PNG_EXPORTER_STOPPED };$/;"	e	enum:png_exporter_state
PNG_EXPORTER_STOPPED	src/core/png_writer.h	/^enum png_exporter_state { PNG_EXPORTER_WAIT, PNG_EXPORTER_WRITE, PNG_EXPORTER_EXIT, PNG_EXPORTER_STOPPED };$/;"	e	enum:png_exporter_state
PNG_EXPORTER_WAIT	src/core/png_writer.h	/^enum png_exporter_state { PNG_EXPORTER_WAIT, PNG_EXPORTER_WRITE, PNG_EXPORTER_EXIT, PNG_EXPORTER_STOPPED };$/;"	e	enum:png_exporter_state
PNG_EXPORTER_WRITE	src/core/png_writer.h	/^enum png_exporter_state { PNG_EXPORTER_WAIT, PNG_EXPORTER_WRITE, PNG_EXPORTER_EXIT, PNG_EXPORTER_STOPPED };$/;"	e	enum:png_exporter_state
PNG_LIBS	Makefile	/^PNG_LIBS = -lpng12  $/;"	m
PNG_SKIP_SETJMP_CHECK	src/core/png_writer.cpp	33;"	d	file:
PNG_WRITER_H	src/core/png_writer.h	29;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POS_SLIDER_H	src/slider.h	2;"	d
PPMExporter	src/core/ppm.cpp	/^PPMExporter::PPMExporter(std::string outputfile) {$/;"	f	class:PPMExporter
PPMExporter	src/core/ppm.h	/^class PPMExporter : public FrameExporter {$/;"	c
PPMExporterException	src/core/ppm.h	/^    PPMExporterException(std::string& filename) : filename(filename) {}$/;"	f	class:PPMExporterException
PPMExporterException	src/core/ppm.h	/^class PPMExporterException : public std::exception {$/;"	c
PPM_FRAME_EXPORTER_H	src/core/ppm.h	19;"	d
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRINT_GL_ERRORS	src/core/gl.h	11;"	d
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS = $/;"	m
Paddle	src/paddle.cpp	/^Paddle::Paddle(vec2 pos, vec4 colour, std::string token, FXFont font) {$/;"	f	class:Paddle
Paddle	src/paddle.h	/^class Paddle {$/;"	c
Plane	src/core/plane.cpp	/^Plane::Plane() {$/;"	f	class:Plane
Plane	src/core/plane.cpp	/^Plane::Plane(const vec3 & v1, const vec3 & v2, const vec3 & v3) {$/;"	f	class:Plane
Plane	src/core/plane.h	/^class Plane {$/;"	c
PositionSlider	src/slider.cpp	/^PositionSlider::PositionSlider(float percent) {$/;"	f	class:PositionSlider
PositionSlider	src/slider.h	/^class PositionSlider {$/;"	c
ProjectedBall	src/ball.cpp	/^ProjectedBall::ProjectedBall() {$/;"	f	class:ProjectedBall
ProjectedBall	src/ball.cpp	/^ProjectedBall::ProjectedBall(const vec2& pos, const vec2& vel, const vec3& colour, int dest_x, float size) {$/;"	f	class:ProjectedBall
ProjectedBall	src/ball.h	/^class ProjectedBall {$/;"	c
QUADTREE_H	src/core/quadtree.h	29;"	d
QuadItem	src/core/quadtree.h	/^class QuadItem {$/;"	c
QuadNode	src/core/quadtree.cpp	/^QuadNode::QuadNode(QuadTree* tree, QuadNode* parent, Bounds2D bounds, int parent_depth) {$/;"	f	class:QuadNode
QuadNode	src/core/quadtree.h	/^class QuadNode {$/;"	c
QuadTree	src/core/quadtree.cpp	/^QuadTree::QuadTree(Bounds2D bounds, int max_node_depth, int max_node_items) {$/;"	f	class:QuadTree
QuadTree	src/core/quadtree.h	/^class QuadTree {$/;"	c
RADIANS_TO_DEGREES	src/core/pi.h	32;"	d
REGEX_H	src/core/regex.h	29;"	d
REGEX_MAX_MATCHES	src/core/regex.h	31;"	d
REQUESTBALL_H	src/requestball.h	19;"	d
RESOURCEMANAGER_H	src/core/resource.h	29;"	d
Regex	src/core/regex.cpp	/^Regex::Regex(std::string regex, bool test) {$/;"	f	class:Regex
Regex	src/core/regex.h	/^class Regex {$/;"	c
RegexCompilationException	src/core/regex.h	/^    RegexCompilationException(std::string& regex) : regex(regex) {}$/;"	f	class:RegexCompilationException
RegexCompilationException	src/core/regex.h	/^class RegexCompilationException : public std::exception {$/;"	c
RequestBall	src/requestball.cpp	/^RequestBall::RequestBall(LogEntry* le, FXFont* font, TextureResource* tex, const vec3& colour, const vec2& pos, const vec2& dest) {$/;"	f	class:RequestBall
RequestBall	src/requestball.h	/^class RequestBall : public ProjectedBall {$/;"	c
Resource	src/core/resource.h	/^    Resource() { refs =0; };$/;"	f	class:Resource
Resource	src/core/resource.h	/^    Resource(const std::string& resource_name) : resource_name(resource_name), refs(0) {};$/;"	f	class:Resource
Resource	src/core/resource.h	/^class Resource {$/;"	c
ResourceException	src/core/resource.h	/^    ResourceException(const std::string& resource) : resource(resource) {}$/;"	f	class:ResourceException
ResourceException	src/core/resource.h	/^class ResourceException : public std::exception {$/;"	c
ResourceManager	src/core/resource.cpp	/^ResourceManager::ResourceManager() {$/;"	f	class:ResourceManager
ResourceManager	src/core/resource.h	/^class ResourceManager {$/;"	c
SDL2_CFLAGS	Makefile	/^SDL2_CFLAGS = -D_REENTRANT -I\/usr\/include\/SDL2  $/;"	m
SDL2_LIBS	Makefile	/^SDL2_LIBS = -lSDL2_image -lSDL2  $/;"	m
SDLAPP_DISPLAY_H	src/core/display.h	30;"	d
SDLAPP_H	src/core/sdlapp.h	29;"	d
SDLAPP_MOUSECURSOR_H	src/core/mousecursor.h	29;"	d
SDLAPP_SETTINGS_H	src/core/settings.h	19;"	d
SDLApp	src/core/sdlapp.cpp	/^SDLApp::SDLApp() {$/;"	f	class:SDLApp
SDLApp	src/core/sdlapp.h	/^class SDLApp {$/;"	c
SDLAppAddSlash	src/core/sdlapp.cpp	/^std::string SDLAppAddSlash(std::string path) {$/;"	f
SDLAppDirExists	src/core/sdlapp.cpp	/^bool SDLAppDirExists(std::string dir) {$/;"	f
SDLAppDisplay	src/core/display.cpp	/^SDLAppDisplay::SDLAppDisplay() {$/;"	f	class:SDLAppDisplay
SDLAppDisplay	src/core/display.h	/^class SDLAppDisplay {$/;"	c
SDLAppException	src/core/sdlapp.h	/^    SDLAppException(const char* str, ...) : showhelp(false) {$/;"	f	class:SDLAppException
SDLAppException	src/core/sdlapp.h	/^    SDLAppException(std::string message) : showhelp(false), message(message) {}$/;"	f	class:SDLAppException
SDLAppException	src/core/sdlapp.h	/^class SDLAppException : public std::exception {$/;"	c
SDLAppInfo	src/core/sdlapp.cpp	/^void SDLAppInfo(std::string msg) {$/;"	f
SDLAppInit	src/core/sdlapp.cpp	/^void SDLAppInit(std::string apptitle, std::string execname) {$/;"	f
SDLAppParseArgs	src/core/sdlapp.cpp	/^void SDLAppParseArgs(int argc, char *argv[], int* xres, int* yres, bool* fullscreen, std::vector<std::string>* otherargs) {$/;"	f
SDLAppQuit	src/core/sdlapp.cpp	/^void SDLAppQuit(std::string error) {$/;"	f
SDLAppSettings	src/core/settings.cpp	/^SDLAppSettings::SDLAppSettings() {$/;"	f	class:SDLAppSettings
SDLAppSettings	src/core/settings.h	/^class SDLAppSettings {$/;"	c
SDLInitException	src/core/display.h	/^    SDLInitException(const std::string& error) : error(error) {}$/;"	f	class:SDLInitException
SDLInitException	src/core/display.h	/^class SDLInitException : public std::exception {$/;"	c
SDLWindowFlags	src/core/display.cpp	/^Uint32 SDLAppDisplay::SDLWindowFlags(bool fullscreen) {$/;"	f	class:SDLAppDisplay
SDL_CFLAGS	Makefile	/^SDL_CFLAGS = $/;"	m
SDL_LIBS	Makefile	/^SDL_LIBS = $/;"	m
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SEEK_LOG_H	src/core/seeklog.h	29;"	d
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHADER_COMMON_H	src/core/shader_common.h	2;"	d
SHADER_UNIFORM_BOOL	src/core/shader_common.h	/^       SHADER_UNIFORM_BOOL,$/;"	e	enum:__anon4
SHADER_UNIFORM_FLOAT	src/core/shader_common.h	/^enum { SHADER_UNIFORM_FLOAT,$/;"	e	enum:__anon4
SHADER_UNIFORM_INT	src/core/shader_common.h	/^       SHADER_UNIFORM_INT,$/;"	e	enum:__anon4
SHADER_UNIFORM_MAT3	src/core/shader_common.h	/^       SHADER_UNIFORM_MAT3,$/;"	e	enum:__anon4
SHADER_UNIFORM_MAT4	src/core/shader_common.h	/^       SHADER_UNIFORM_MAT4,$/;"	e	enum:__anon4
SHADER_UNIFORM_SAMPLER_1D	src/core/shader_common.h	/^       SHADER_UNIFORM_SAMPLER_1D,$/;"	e	enum:__anon4
SHADER_UNIFORM_SAMPLER_2D	src/core/shader_common.h	/^       SHADER_UNIFORM_SAMPLER_2D,$/;"	e	enum:__anon4
SHADER_UNIFORM_VEC2	src/core/shader_common.h	/^       SHADER_UNIFORM_VEC2,$/;"	e	enum:__anon4
SHADER_UNIFORM_VEC2_ARRAY	src/core/shader_common.h	/^       SHADER_UNIFORM_VEC2_ARRAY,$/;"	e	enum:__anon4
SHADER_UNIFORM_VEC3	src/core/shader_common.h	/^       SHADER_UNIFORM_VEC3,$/;"	e	enum:__anon4
SHADER_UNIFORM_VEC3_ARRAY	src/core/shader_common.h	/^       SHADER_UNIFORM_VEC3_ARRAY,$/;"	e	enum:__anon4
SHADER_UNIFORM_VEC4	src/core/shader_common.h	/^       SHADER_UNIFORM_VEC4,$/;"	e	enum:__anon4
SHADER_UNIFORM_VEC4_ARRAY	src/core/shader_common.h	/^       SHADER_UNIFORM_VEC4_ARRAY$/;"	e	enum:__anon4
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	Makefile	/^SOURCES = $(logstalgia_SOURCES)$/;"	m
STRINGHASH_H	src/core/stringhash.h	29;"	d
STRIP	Makefile	/^STRIP = $/;"	m
SUMMARIZER_H	src/summarizer.h	19;"	d
SURROGATE_OFFSET	src/core/utf8/core.h	/^    const uint32_t SURROGATE_OFFSET    = 0x10000u - (LEAD_SURROGATE_MIN << 10) - TRAIL_SURROGATE_MIN;$/;"	m	namespace:utf8::internal
Sampler1DShaderUniform	src/core/shader_common.cpp	/^Sampler1DShaderUniform::Sampler1DShaderUniform(AbstractShader* shader, const std::string& name, int value) :$/;"	f	class:Sampler1DShaderUniform
Sampler1DShaderUniform	src/core/shader_common.h	/^class Sampler1DShaderUniform : public ShaderUniform {$/;"	c
Sampler2DShaderUniform	src/core/shader_common.cpp	/^Sampler2DShaderUniform::Sampler2DShaderUniform(AbstractShader* shader, const std::string& name, int value) :$/;"	f	class:Sampler2DShaderUniform
Sampler2DShaderUniform	src/core/shader_common.h	/^class Sampler2DShaderUniform : public ShaderUniform {$/;"	c
SeekLog	src/core/seeklog.cpp	/^SeekLog::SeekLog(std::string logfile) {$/;"	f	class:SeekLog
SeekLog	src/core/seeklog.h	/^class SeekLog : public BaseLog {$/;"	c
SeekLogException	src/core/seeklog.h	/^    SeekLogException(std::string& filename) : filename(filename) {}$/;"	f	class:SeekLogException
SeekLogException	src/core/seeklog.h	/^class SeekLogException : public std::exception {$/;"	c
Shader	src/core/shader.cc	/^Shader::Shader() : AbstractShader() {$/;"	f	class:Shader
Shader	src/core/shader.cc	/^Shader::Shader(const std::string& prefix) : AbstractShader(prefix) {$/;"	f	class:Shader
Shader	src/core/shader.hh	/^class Shader : public AbstractShader {$/;"	c
ShaderException	src/core/shader_common.cpp	/^ShaderException::ShaderException(const std::string& message)$/;"	f	class:ShaderException
ShaderException	src/core/shader_common.cpp	/^ShaderException::ShaderException(const std::string& message, const std::string& source)$/;"	f	class:ShaderException
ShaderException	src/core/shader_common.h	/^class ShaderException : public std::exception {$/;"	c
ShaderManager	src/core/shader.cc	/^ShaderManager::ShaderManager() {$/;"	f	class:ShaderManager
ShaderManager	src/core/shader.hh	/^class ShaderManager : public ResourceManager {$/;"	c
ShaderPart	src/core/shader_common.cpp	/^ShaderPart::ShaderPart() {$/;"	f	class:ShaderPart
ShaderPart	src/core/shader_common.h	/^class ShaderPart {$/;"	c
ShaderPass	src/core/shader.cc	/^ShaderPass::ShaderPass(Shader* parent, int shader_object_type, const std::string& shader_object_desc) :$/;"	f	class:ShaderPass
ShaderPass	src/core/shader.hh	/^class ShaderPass : public AbstractShaderPass {$/;"	c
ShaderUniform	src/core/shader_common.cpp	/^ShaderUniform::ShaderUniform(AbstractShader* shader, const std::string& name, int uniform_type, const std::string& type_name)$/;"	f	class:ShaderUniform
ShaderUniform	src/core/shader_common.h	/^class ShaderUniform {$/;"	c
StreamLog	src/core/seeklog.cpp	/^StreamLog::StreamLog() {$/;"	f	class:StreamLog
StreamLog	src/core/seeklog.h	/^class StreamLog : public BaseLog {$/;"	c
SummItem	src/summarizer.cpp	/^SummItem::SummItem(SummUnit unit, float target_x, vec3* icol, FXFont font, bool showcount) {$/;"	f	class:SummItem
SummItem	src/summarizer.h	/^class SummItem {$/;"	c
SummNode	src/summarizer.cpp	/^SummNode::SummNode() {$/;"	f	class:SummNode
SummNode	src/summarizer.cpp	/^SummNode::SummNode(const std::string& str, size_t offset, SummNode* parent) {$/;"	f	class:SummNode
SummNode	src/summarizer.h	/^class SummNode {$/;"	c
SummUnit	src/summarizer.cpp	/^SummUnit::SummUnit() {$/;"	f	class:SummUnit
SummUnit	src/summarizer.cpp	/^SummUnit::SummUnit(SummNode* source, bool truncated, bool exceptions) {$/;"	f	class:SummUnit
SummUnit	src/summarizer.h	/^class SummUnit {$/;"	c
Summarizer	src/summarizer.cpp	/^Summarizer::Summarizer(FXFont font, int screen_percent, float refresh_delay, std::string matchstr, std::string title)$/;"	f	class:Summarizer
Summarizer	src/summarizer.h	/^class Summarizer {$/;"	c
TEXTAREA_H	src/textarea.h	18;"	d
TEXTURE_H	src/core/texture.h	29;"	d
TGAExporter	src/core/tga.cpp	/^TGAExporter::TGAExporter(const std::string& filename) {$/;"	f	class:TGAExporter
TGAExporter	src/core/tga.h	/^class TGAExporter {$/;"	c
TGAExporterException	src/core/tga.h	/^    TGAExporterException(const std::string& filename) : filename(filename) {};$/;"	f	class:TGAExporterException
TGAExporterException	src/core/tga.h	/^class TGAExporterException : public std::exception {$/;"	c
TGAWriter	src/core/tga.cpp	/^TGAWriter::TGAWriter(int components)$/;"	f	class:TGAWriter
TGAWriter	src/core/tga.h	/^class TGAWriter {$/;"	c
TGA_EXPORTER_EXIT	src/core/tga.h	/^enum tga_exporter_state { TGA_EXPORTER_WAIT, TGA_EXPORTER_WRITE, TGA_EXPORTER_EXIT, TGA_EXPORTER_STOPPED };$/;"	e	enum:tga_exporter_state
TGA_EXPORTER_STOPPED	src/core/tga.h	/^enum tga_exporter_state { TGA_EXPORTER_WAIT, TGA_EXPORTER_WRITE, TGA_EXPORTER_EXIT, TGA_EXPORTER_STOPPED };$/;"	e	enum:tga_exporter_state
TGA_EXPORTER_WAIT	src/core/tga.h	/^enum tga_exporter_state { TGA_EXPORTER_WAIT, TGA_EXPORTER_WRITE, TGA_EXPORTER_EXIT, TGA_EXPORTER_STOPPED };$/;"	e	enum:tga_exporter_state
TGA_EXPORTER_WRITE	src/core/tga.h	/^enum tga_exporter_state { TGA_EXPORTER_WAIT, TGA_EXPORTER_WRITE, TGA_EXPORTER_EXIT, TGA_EXPORTER_STOPPED };$/;"	e	enum:tga_exporter_state
TGA_WRITER_H	src/core/tga.h	29;"	d
TRAIL_SURROGATE_MAX	src/core/utf8/core.h	/^    const uint16_t TRAIL_SURROGATE_MAX = 0xdfffu;$/;"	m	namespace:utf8::internal
TRAIL_SURROGATE_MIN	src/core/utf8/core.h	/^    const uint16_t TRAIL_SURROGATE_MIN = 0xdc00u;$/;"	m	namespace:utf8::internal
TextArea	src/textarea.cpp	/^TextArea::TextArea() {$/;"	f	class:TextArea
TextArea	src/textarea.cpp	/^TextArea::TextArea(FXFont font) {$/;"	f	class:TextArea
TextArea	src/textarea.cpp	/^TextArea::TextArea(std::vector<std::string>& content, FXFont font, vec3 colour) {$/;"	f	class:TextArea
TextArea	src/textarea.h	/^class TextArea {$/;"	c
TextureException	src/core/texture.h	/^    TextureException(std::string& texture_file) : ResourceException(texture_file) {}$/;"	f	class:TextureException
TextureException	src/core/texture.h	/^class TextureException : public ResourceException {$/;"	c
TextureManager	src/core/texture.cpp	/^TextureManager::TextureManager() : ResourceManager() {$/;"	f	class:TextureManager
TextureManager	src/core/texture.h	/^class TextureManager : public ResourceManager {$/;"	c
TextureResource	src/core/texture.cpp	/^TextureResource::TextureResource() {$/;"	f	class:TextureResource
TextureResource	src/core/texture.cpp	/^TextureResource::TextureResource(const std::string& filename, bool mipmaps, GLint wrap, bool external) : Resource(filename) {$/;"	f	class:TextureResource
TextureResource	src/core/texture.cpp	/^TextureResource::TextureResource(int width, int height, bool mipmaps, GLint wrap, GLenum format, GLubyte* data) {$/;"	f	class:TextureResource
TextureResource	src/core/texture.h	/^class TextureResource : public Resource {$/;"	c
UI	src/core/ui/ui.cpp	/^UI::UI() : selectedElement(0) {$/;"	f	class:UI
UI	src/core/ui/ui.h	/^class UI {$/;"	c
UIAction	src/core/ui/action.h	/^    UIAction() {};$/;"	f	class:UIAction
UIAction	src/core/ui/action.h	/^class UIAction {$/;"	c
UIBoolCheckbox	src/core/ui/checkbox.cpp	/^UIBoolCheckbox::UIBoolCheckbox(bool *value, UIAction* action)$/;"	f	class:UIBoolCheckbox
UIBoolCheckbox	src/core/ui/checkbox.h	/^class UIBoolCheckbox : public UICheckbox {$/;"	c
UIButton	src/core/ui/button.cpp	/^UIButton::UIButton(const std::string& name, UIAction* action)$/;"	f	class:UIButton
UIButton	src/core/ui/button.h	/^class UIButton : public UISolidLayout {$/;"	c
UICheckbox	src/core/ui/checkbox.cpp	/^UICheckbox::UICheckbox(UIAction* action)$/;"	f	class:UICheckbox
UICheckbox	src/core/ui/checkbox.h	/^class UICheckbox : public UIElement {$/;"	c
UIColour	src/core/ui/colour.cpp	/^UIColour::UIColour(vec3* colour) : colour(colour), UIElement() {$/;"	f	class:UIColour
UIColour	src/core/ui/colour.h	/^class UIColour : public UIElement {$/;"	c
UIColourLabel	src/core/ui/label.cpp	/^UIColourLabel::UIColourLabel(UIColourSlider* slider, bool editable) : UIFloatLabel((float*)0, editable) {$/;"	f	class:UIColourLabel
UIColourLabel	src/core/ui/label.h	/^class UIColourLabel : public UIFloatLabel {$/;"	c
UIColourSlider	src/core/ui/colour.cpp	/^UIColourSlider::UIColourSlider() : UISlider("ui\/colour_slider.png", 128.0f) {$/;"	f	class:UIColourSlider
UIColourSlider	src/core/ui/colour.h	/^class UIColourSlider : public UISlider {$/;"	c
UIConsole	src/core/ui/console.cpp	/^UIConsole::UIConsole(const vec2& console_rect)$/;"	f	class:UIConsole
UIConsole	src/core/ui/console.h	/^class UIConsole : public UIGroup {$/;"	c
UIConsoleCommand	src/core/ui/console.cpp	/^UIConsoleCommand::UIConsoleCommand(const std::string& name)$/;"	f	class:UIConsoleCommand
UIConsoleCommand	src/core/ui/console.h	/^class UIConsoleCommand {$/;"	c
UIConsoleEntry	src/core/ui/console.cpp	/^UIConsoleEntry::UIConsoleEntry(UIConsole* console)$/;"	f	class:UIConsoleEntry
UIConsoleEntry	src/core/ui/console.h	/^class UIConsoleEntry : public UILabel {$/;"	c
UIConsolePrompt	src/core/ui/console.cpp	/^UIConsolePrompt::UIConsolePrompt(UIConsole* console)$/;"	f	class:UIConsolePrompt
UIConsolePrompt	src/core/ui/console.h	/^class UIConsolePrompt : public UILabel {$/;"	c
UIDirInputLabel	src/core/ui/file_selector.cpp	/^UIDirInputLabel::UIDirInputLabel(UIFileSelector* selector, const std::string& dirname)$/;"	f	class:UIDirInputLabel
UIDirInputLabel	src/core/ui/file_selector.h	/^class UIDirInputLabel : public UILabel {$/;"	c
UIElement	src/core/ui/element.h	/^    UIElement() : padding(0.0f, 0.0f), margin(0.0f, 0.0f, 0.0f, 0.0f), ui(0), disabled(false), selected(false), editable(false), hidden(false), fill_horizontal(false), fill_vertical(false), scrollable(false), selectable(true), zindex(0), parent(0) {};$/;"	f	class:UIElement
UIElement	src/core/ui/element.h	/^class UIElement {$/;"	c
UIElementAction	src/core/ui/action.h	/^    UIElementAction(UIElement* element) : element(element) {};$/;"	f	class:UIElementAction
UIElementAction	src/core/ui/action.h	/^class UIElementAction : public UIAction {$/;"	c
UIFileInputLabel	src/core/ui/file_selector.cpp	/^UIFileInputLabel::UIFileInputLabel(UIFileSelector* selector, const std::string& filename)$/;"	f	class:UIFileInputLabel
UIFileInputLabel	src/core/ui/file_selector.h	/^class UIFileInputLabel : public UILabel {$/;"	c
UIFileSelector	src/core/ui/file_selector.cpp	/^UIFileSelector::UIFileSelector(const std::string& title, const std::string& dir, UIFileSelectorAction* action)$/;"	f	class:UIFileSelector
UIFileSelector	src/core/ui/file_selector.h	/^class UIFileSelector : public UIGroup {$/;"	c
UIFileSelectorAction	src/core/ui/file_selector.h	/^    UIFileSelectorAction() {};$/;"	f	class:UIFileSelectorAction
UIFileSelectorAction	src/core/ui/file_selector.h	/^class UIFileSelectorAction {$/;"	c
UIFileSelectorLabel	src/core/ui/file_selector.cpp	/^UIFileSelectorLabel::UIFileSelectorLabel(UIFileSelector* selector, const std::string& label, const std::string& path)$/;"	f	class:UIFileSelectorLabel
UIFileSelectorLabel	src/core/ui/file_selector.cpp	/^UIFileSelectorLabel::UIFileSelectorLabel(UIFileSelector* selector, const std::string& path)$/;"	f	class:UIFileSelectorLabel
UIFileSelectorLabel	src/core/ui/file_selector.h	/^class UIFileSelectorLabel : public UILabel {$/;"	c
UIFloatCheckbox	src/core/ui/checkbox.cpp	/^UIFloatCheckbox::UIFloatCheckbox(float *value, UIAction* action)$/;"	f	class:UIFloatCheckbox
UIFloatCheckbox	src/core/ui/checkbox.h	/^class UIFloatCheckbox : public UICheckbox {$/;"	c
UIFloatLabel	src/core/ui/label.cpp	/^UIFloatLabel::UIFloatLabel(UIFloatSlider* slider, bool editable, UIAction* action) : value(slider->value),  UILabel("", editable, -1.0f, action) {$/;"	f	class:UIFloatLabel
UIFloatLabel	src/core/ui/label.cpp	/^UIFloatLabel::UIFloatLabel(float* value, bool editable, UIAction* action) : value(value), UILabel("", editable, -1.0f, action) {$/;"	f	class:UIFloatLabel
UIFloatLabel	src/core/ui/label.h	/^class UIFloatLabel : public UILabel {$/;"	c
UIFloatSlider	src/core/ui/slider.cpp	/^UIFloatSlider::UIFloatSlider(float* value, float min, float max, UIAction* action) :$/;"	f	class:UIFloatSlider
UIFloatSlider	src/core/ui/slider.h	/^class UIFloatSlider : public UISlider {$/;"	c
UIGroup	src/core/ui/group.cpp	/^UIGroup::UIGroup(const std::string& groupname, bool minimized, bool resizable)$/;"	f	class:UIGroup
UIGroup	src/core/ui/group.h	/^class UIGroup : public UILayout {$/;"	c
UIGroupBar	src/core/ui/group.cpp	/^UIGroupBar::UIGroupBar(const std::string& text) : UISolidLayout(true) {$/;"	f	class:UIGroupBar
UIGroupBar	src/core/ui/group.h	/^class UIGroupBar : public UISolidLayout {$/;"	c
UIHueSlider	src/core/ui/colour.cpp	/^UIHueSlider::UIHueSlider() {$/;"	f	class:UIHueSlider
UIHueSlider	src/core/ui/colour.h	/^class UIHueSlider : public UIColourSlider {$/;"	c
UIImage	src/core/ui/image.cpp	/^UIImage::UIImage(const std::string& image_path)$/;"	f	class:UIImage
UIImage	src/core/ui/image.cpp	/^UIImage::UIImage(const std::string& image_path, const vec2& rect, const vec4& coords)$/;"	f	class:UIImage
UIImage	src/core/ui/image.h	/^class UIImage : public UIElement {$/;"	c
UIIntLabel	src/core/ui/label.cpp	/^UIIntLabel::UIIntLabel(int* value, bool editable, UIAction* action) : value(value), UILabel("", editable, -1.0f, action) {$/;"	f	class:UIIntLabel
UIIntLabel	src/core/ui/label.h	/^class UIIntLabel : public UILabel {$/;"	c
UIIntSelectAction	src/core/ui/select.cpp	/^UIIntSelectAction::UIIntSelectAction(int* field, int value, UIAction* action) : field(field), value(value), action(action) {$/;"	f	class:UIIntSelectAction
UIIntSelectAction	src/core/ui/select.h	/^class UIIntSelectAction : public UIAction {$/;"	c
UIIntSlider	src/core/ui/slider.cpp	/^UIIntSlider::UIIntSlider(int* value, int min, int max, UIAction* action) :$/;"	f	class:UIIntSlider
UIIntSlider	src/core/ui/slider.h	/^class UIIntSlider : public UISlider {$/;"	c
UILabel	src/core/ui/label.cpp	/^UILabel::UILabel(const std::string& text, bool editable, float width, UIAction* action, std::string* value) : text(text), value(value), width(width), action(action), UIElement() {$/;"	f	class:UILabel
UILabel	src/core/ui/label.h	/^class UILabel : public UIElement {$/;"	c
UILabelBoolCheckbox	src/core/ui/checkbox.cpp	/^UILabelBoolCheckbox::UILabelBoolCheckbox(const std::string& label, bool* value, UIAction* action) : UILabelledElement(label) {$/;"	f	class:UILabelBoolCheckbox
UILabelBoolCheckbox	src/core/ui/checkbox.h	/^class UILabelBoolCheckbox : public UILabelledElement {$/;"	c
UILabelBoolCheckboxSet	src/core/ui/checkbox.cpp	/^UILabelBoolCheckboxSet::UILabelBoolCheckboxSet(const std::string& label, bool* value1, bool* value2, bool* value3, UIAction* action) : UILabelledElement(label) {$/;"	f	class:UILabelBoolCheckboxSet
UILabelBoolCheckboxSet	src/core/ui/checkbox.h	/^class UILabelBoolCheckboxSet : public UILabelledElement {$/;"	c
UILabelColour	src/core/ui/colour.cpp	/^UILabelColour::UILabelColour(const std::string& label) : UILabelledElement(label) {$/;"	f	class:UILabelColour
UILabelColour	src/core/ui/colour.cpp	/^UILabelColour::UILabelColour(const std::string& label, vec3* a, vec3* b, vec3* c) : UILabelledElement(label) {$/;"	f	class:UILabelColour
UILabelColour	src/core/ui/colour.cpp	/^UILabelColour::UILabelColour(const std::string& label, vec3* a, vec3* b, vec3* c, vec3* d, vec3* e, vec3* f) : UILabelledElement(label) {$/;"	f	class:UILabelColour
UILabelColour	src/core/ui/colour.cpp	/^UILabelColour::UILabelColour(const std::string& label, vec3* value) : UILabelledElement(label) {$/;"	f	class:UILabelColour
UILabelColour	src/core/ui/colour.h	/^class UILabelColour : public UILabelledElement {$/;"	c
UILabelFloatCheckboxSet	src/core/ui/checkbox.cpp	/^UILabelFloatCheckboxSet::UILabelFloatCheckboxSet(const std::string& label, float* value1, float* value2, float* value3, UIAction* action) : UILabelledElement(label) {$/;"	f	class:UILabelFloatCheckboxSet
UILabelFloatCheckboxSet	src/core/ui/checkbox.h	/^class UILabelFloatCheckboxSet : public UILabelledElement {$/;"	c
UILabelFloatSlider	src/core/ui/slider.cpp	/^UILabelFloatSlider::UILabelFloatSlider(const std::string& label, float* value, float min, float max, UIAction* action) : UILabelledElement(label) {$/;"	f	class:UILabelFloatSlider
UILabelFloatSlider	src/core/ui/slider.h	/^class UILabelFloatSlider : public UILabelledElement {$/;"	c
UILabelIntSlider	src/core/ui/slider.cpp	/^UILabelIntSlider::UILabelIntSlider(const std::string& label, int* value, int min, int max, UIAction* action) : UILabelledElement(label) {$/;"	f	class:UILabelIntSlider
UILabelIntSlider	src/core/ui/slider.h	/^class UILabelIntSlider : public UILabelledElement {$/;"	c
UILabelString	src/core/ui/label.cpp	/^UILabelString::UILabelString(const std::string& label, std::string* value, bool editable, UIAction* action) : UILabelledElement(label) {$/;"	f	class:UILabelString
UILabelString	src/core/ui/label.h	/^class UILabelString : public UILabelledElement {$/;"	c
UILabelVec3	src/core/ui/label.cpp	/^UILabelVec3::UILabelVec3(const std::string& label, vec3* value, bool editable, UIAction* action) : value(value), UILabelledElement(label) {$/;"	f	class:UILabelVec3
UILabelVec3	src/core/ui/label.h	/^class UILabelVec3 : public UILabelledElement {$/;"	c
UILabelledElement	src/core/ui/layout.cpp	/^UILabelledElement::UILabelledElement(const std::string text, UIElement* e, float width) : UILayout(true) {$/;"	f	class:UILabelledElement
UILabelledElement	src/core/ui/layout.h	/^class UILabelledElement : public UILayout {$/;"	c
UILayout	src/core/ui/layout.cpp	/^UILayout::UILayout(bool horizontal) : horizontal(horizontal), UIElement() {$/;"	f	class:UILayout
UILayout	src/core/ui/layout.h	/^class UILayout : public UIElement {$/;"	c
UILightnessSlider	src/core/ui/colour.cpp	/^UILightnessSlider::UILightnessSlider() {$/;"	f	class:UILightnessSlider
UILightnessSlider	src/core/ui/colour.h	/^class UILightnessSlider : public UIColourSlider {$/;"	c
UIOptionLabel	src/core/ui/select.cpp	/^UIOptionLabel::UIOptionLabel(UISelect* select, const std::string& text, UIAction* action)$/;"	f	class:UIOptionLabel
UIOptionLabel	src/core/ui/select.cpp	/^UIOptionLabel::UIOptionLabel(UISelect* select, const std::string& text, const std::string& value, UIAction* action)$/;"	f	class:UIOptionLabel
UIOptionLabel	src/core/ui/select.h	/^class UIOptionLabel : public UILabel {$/;"	c
UIResizableLayout	src/core/ui/layout.cpp	/^UIResizableLayout::UIResizableLayout(bool horizontal) : UILayout(horizontal) {$/;"	f	class:UIResizableLayout
UIResizableLayout	src/core/ui/layout.h	/^class UIResizableLayout : public UILayout {$/;"	c
UIResizeButton	src/core/ui/layout.cpp	/^UIResizeButton::UIResizeButton() {$/;"	f	class:UIResizeButton
UIResizeButton	src/core/ui/layout.h	/^class UIResizeButton : public UIElement {$/;"	c
UISatSlider	src/core/ui/colour.cpp	/^UISatSlider::UISatSlider() {$/;"	f	class:UISatSlider
UISatSlider	src/core/ui/colour.h	/^class UISatSlider : public UIColourSlider {$/;"	c
UIScrollBar	src/core/ui/scroll_bar.cpp	/^UIScrollBar::UIScrollBar(UIScrollLayout* parent, bool horizontal) : horizontal(horizontal) {$/;"	f	class:UIScrollBar
UIScrollBar	src/core/ui/scroll_bar.h	/^class UIScrollBar: public UIElement {$/;"	c
UIScrollLayout	src/core/ui/scroll_layout.cpp	/^UIScrollLayout::UIScrollLayout(const vec2& scroll_rect, bool horizontal) : scroll_rect(scroll_rect), UILayout(horizontal) {$/;"	f	class:UIScrollLayout
UIScrollLayout	src/core/ui/scroll_layout.h	/^class UIScrollLayout : public UILayout {$/;"	c
UISelect	src/core/ui/select.cpp	/^UISelect::UISelect() : UISolidLayout(true) {$/;"	f	class:UISelect
UISelect	src/core/ui/select.h	/^class UISelect : public UISolidLayout {$/;"	c
UISlider	src/core/ui/slider.cpp	/^UISlider::UISlider(const std::string& slider_texture, float width, UIAction* action) : slider_width(width), action(action), UIElement() {$/;"	f	class:UISlider
UISlider	src/core/ui/slider.h	/^class UISlider : public UIElement {$/;"	c
UISolidLayout	src/core/ui/solid_layout.cpp	/^UISolidLayout::UISolidLayout(bool horizontal) : UILayout(horizontal) {$/;"	f	class:UISolidLayout
UISolidLayout	src/core/ui/solid_layout.h	/^class UISolidLayout : public UILayout {$/;"	c
UISubGroup	src/core/ui/subgroup.cpp	/^UISubGroup::UISubGroup(const std::string& groupname, bool minimized)$/;"	f	class:UISubGroup
UISubGroup	src/core/ui/subgroup.h	/^class UISubGroup : public UILayout {$/;"	c
UISubGroupBar	src/core/ui/subgroup.cpp	/^UISubGroupBar::UISubGroupBar(const std::string& text) : UILayout(true) {$/;"	f	class:UISubGroupBar
UISubGroupBar	src/core/ui/subgroup.h	/^class UISubGroupBar : public UILayout {$/;"	c
UI_ACTION_H	src/core/ui/action.h	2;"	d
UI_BUTTON	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_BUTTON_H	src/core/ui/button.h	2;"	d
UI_CHECKBOX	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_CHECKBOX_H	src/core/ui/checkbox.h	2;"	d
UI_COLOUR	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_COLOUR_H	src/core/ui/colour.h	2;"	d
UI_CONSOLE_H	src/core/ui/console.h	2;"	d
UI_ELEMENT	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_ELEMENT_H	src/core/ui/element.h	2;"	d
UI_FILE_SELECTOR_H	src/core/ui/file_selector.h	2;"	d
UI_GROUP	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_GROUP_h	src/core/ui/group.h	2;"	d
UI_H	src/core/ui/ui.h	2;"	d
UI_IMAGE	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_IMAGE_H	src/core/ui/image.h	2;"	d
UI_INVALID	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_LABEL	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_LABEL_H	src/core/ui/label.h	2;"	d
UI_LAYOUT	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_LAYOUT_ALIGN_BOTTOM_LEFT	src/core/ui/layout.h	/^    UI_LAYOUT_ALIGN_BOTTOM_LEFT,$/;"	e	enum:__anon2
UI_LAYOUT_ALIGN_BOTTOM_RIGHT	src/core/ui/layout.h	/^    UI_LAYOUT_ALIGN_BOTTOM_RIGHT$/;"	e	enum:__anon2
UI_LAYOUT_ALIGN_NONE	src/core/ui/layout.h	/^    UI_LAYOUT_ALIGN_NONE,$/;"	e	enum:__anon2
UI_LAYOUT_ALIGN_TOP_LEFT	src/core/ui/layout.h	/^    UI_LAYOUT_ALIGN_TOP_LEFT,$/;"	e	enum:__anon2
UI_LAYOUT_ALIGN_TOP_RIGHT	src/core/ui/layout.h	/^    UI_LAYOUT_ALIGN_TOP_RIGHT,$/;"	e	enum:__anon2
UI_LAYOUT_H	src/core/ui/layout.h	2;"	d
UI_SCROLL_BAR	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_SCROLL_BAR_H	src/core/ui/scroll_bar.h	2;"	d
UI_SCROLL_LAYOUT_H	src/core/ui/scroll_layout.h	2;"	d
UI_SELECT	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_SELECT_H	src/core/ui/select.h	2;"	d
UI_SLIDER	src/core/ui/element.h	/^enum { UI_INVALID, UI_ELEMENT, UI_LABEL, UI_BUTTON, UI_IMAGE, UI_LAYOUT, UI_GROUP, UI_COLOUR, UI_SELECT, UI_SLIDER, UI_SCROLL_BAR, UI_CHECKBOX };$/;"	e	enum:__anon3
UI_SLIDER_H	src/core/ui/slider.h	2;"	d
UI_SOLID_LAYOUT_H	src/core/ui/solid_layout.h	2;"	d
UI_SUBGROUP_h	src/core/ui/subgroup.h	2;"	d
UTF8_FOR_CPP_2675DCD0_9480_4c0c_B92A_CC14C027B731	src/core/utf8/utf8.h	29;"	d
UTF8_FOR_CPP_CHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731	src/core/utf8/checked.h	29;"	d
UTF8_FOR_CPP_CORE_H_2675DCD0_9480_4c0c_B92A_CC14C027B731	src/core/utf8/core.h	29;"	d
UTF8_FOR_CPP_UNCHECKED_H_2675DCD0_9480_4c0c_B92A_CC14C027B731	src/core/utf8/unchecked.h	29;"	d
UTF8_OK	src/core/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	e	enum:utf8::internal::utf_error
VBO	src/core/vbo.h	/^    VBO(GLenum buffer_type = GL_ARRAY_BUFFER) : buffer_type(buffer_type) {$/;"	f	class:VBO
VBO	src/core/vbo.h	/^class VBO {$/;"	c
VECTORS_H	src/core/vectors.h	29;"	d
VERSION	Makefile	/^VERSION = 1.0.5$/;"	m
Vec2ArrayShaderUniform	src/core/shader_common.cpp	/^Vec2ArrayShaderUniform::Vec2ArrayShaderUniform(AbstractShader* shader, const std::string& name, size_t length, const vec2* value) :$/;"	f	class:Vec2ArrayShaderUniform
Vec2ArrayShaderUniform	src/core/shader_common.h	/^class Vec2ArrayShaderUniform : public ShaderUniform {$/;"	c
Vec2ShaderUniform	src/core/shader_common.cpp	/^Vec2ShaderUniform::Vec2ShaderUniform(AbstractShader* shader, const std::string& name, const vec2& value) :$/;"	f	class:Vec2ShaderUniform
Vec2ShaderUniform	src/core/shader_common.h	/^class Vec2ShaderUniform : public ShaderUniform {$/;"	c
Vec3ArrayShaderUniform	src/core/shader_common.cpp	/^Vec3ArrayShaderUniform::Vec3ArrayShaderUniform(AbstractShader* shader, const std::string& name, size_t length, const vec3* value) :$/;"	f	class:Vec3ArrayShaderUniform
Vec3ArrayShaderUniform	src/core/shader_common.h	/^class Vec3ArrayShaderUniform : public ShaderUniform {$/;"	c
Vec3ShaderUniform	src/core/shader_common.cpp	/^Vec3ShaderUniform::Vec3ShaderUniform(AbstractShader* shader, const std::string& name, const vec3& value) :$/;"	f	class:Vec3ShaderUniform
Vec3ShaderUniform	src/core/shader_common.h	/^class Vec3ShaderUniform : public ShaderUniform {$/;"	c
Vec4ArrayShaderUniform	src/core/shader_common.cpp	/^Vec4ArrayShaderUniform::Vec4ArrayShaderUniform(AbstractShader* shader, const std::string& name, size_t length, const vec4* value) :$/;"	f	class:Vec4ArrayShaderUniform
Vec4ArrayShaderUniform	src/core/shader_common.h	/^class Vec4ArrayShaderUniform : public ShaderUniform {$/;"	c
Vec4ShaderUniform	src/core/shader_common.cpp	/^Vec4ShaderUniform::Vec4ShaderUniform(AbstractShader* shader, const std::string& name, const vec4& value) :$/;"	f	class:Vec4ShaderUniform
Vec4ShaderUniform	src/core/shader_common.h	/^class Vec4ShaderUniform : public ShaderUniform {$/;"	c
VisitFunctor	src/core/quadtree.h	/^class VisitFunctor{$/;"	c
XMKMF	Makefile	/^XMKMF = $/;"	m
XrmInitialize	configure	/^XrmInitialize ()$/;"	f
_WIN32_WINNT	src/core/sdlapp.h	34;"	d
_WIN32_WINNT	src/core/sdlapp.h	37;"	d
__FTUnicode__	src/core/ftgl/FTUnicode.h	34;"	d
_item_sorter	src/summarizer.cpp	/^bool _item_sorter(const SummItem& a, const SummItem& b) {   $/;"	f
_listing_sort	src/core/ui/file_selector.cpp	/^bool _listing_sort (const boost::filesystem::path& a,const boost::filesystem::path& b) {$/;"	f
_unit_sorter	src/summarizer.cpp	/^bool _unit_sorter(const SummUnit& a, const SummUnit& b) {$/;"	f
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_check_func	configure	/^ac_fn_cxx_check_func ()$/;"	f
ac_fn_cxx_check_header_compile	configure	/^ac_fn_cxx_check_header_compile ()$/;"	f
ac_fn_cxx_check_header_mongrel	configure	/^ac_fn_cxx_check_header_mongrel ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
acceptingTextInput	src/core/ui/ui.cpp	/^bool UI::acceptingTextInput() {$/;"	f	class:UI
accesslog	src/logstalgia.h	/^    AccessLog* accesslog;$/;"	m	class:Logstalgia
action	src/core/ui/button.h	/^    UIAction* action;$/;"	m	class:UIButton
action	src/core/ui/checkbox.h	/^    UIAction* action;$/;"	m	class:UICheckbox
action	src/core/ui/file_selector.h	/^    UIFileSelectorAction* action;$/;"	m	class:UIFileSelector
action	src/core/ui/label.h	/^    UIAction* action;$/;"	m	class:UILabel
action	src/core/ui/select.h	/^    UIAction* action;$/;"	m	class:UIIntSelectAction
action	src/core/ui/select.h	/^    UIAction* action;$/;"	m	class:UIOptionLabel
action	src/core/ui/slider.h	/^    UIAction* action;$/;"	m	class:UISlider
active	src/core/ui/colour.h	/^    bool active;$/;"	m	class:UIColour
add	src/core/vbo.cpp	/^void quadbuf::add(GLuint textureid, const quadbuf_vertex& v1, const quadbuf_vertex& v2, const quadbuf_vertex& v3, const quadbuf_vertex& v4) {$/;"	f	class:quadbuf
add	src/core/vbo.cpp	/^void quadbuf::add(GLuint textureid, const vec2& pos, const vec2& dims, const vec4& colour) {$/;"	f	class:quadbuf
add	src/core/vbo.cpp	/^void quadbuf::add(GLuint textureid, const vec2& pos, const vec2& dims, const vec4& colour, const vec4& texcoord) {$/;"	f	class:quadbuf
addArrayUniform	src/core/shader_common.cpp	/^ShaderUniform* AbstractShaderPass::addArrayUniform(const std::string& name, const std::string& type, size_t length) {$/;"	f	class:AbstractShaderPass
addBall	src/logstalgia.cpp	/^void Logstalgia::addBall(LogEntry* le, float start_offset) {$/;"	f	class:Logstalgia
addElement	src/core/ui/layout.cpp	/^void UILayout::addElement(UIElement* e) {$/;"	f	class:UILayout
addElement	src/core/ui/ui.cpp	/^void UI::addElement(UIElement* e) {$/;"	f	class:UI
addEntry	src/core/conffile.cpp	/^void ConfSection::addEntry(ConfEntry* entry) {$/;"	f	class:ConfSection
addEntry	src/core/conffile.cpp	/^void ConfSection::addEntry(const std::string& name, const std::string& value, int lineno) {$/;"	f	class:ConfSection
addFilter	src/core/ui/file_selector.cpp	/^void UIFileSelector::addFilter(const std::string& name, const std::string& extension, bool select) {$/;"	f	class:UIFileSelector
addGlyph	src/core/fxfont.cpp	/^bool FXGlyphPage::addGlyph(FXGlyph* glyph) {$/;"	f	class:FXGlyphPage
addGroup	src/logstalgia.cpp	/^void Logstalgia::addGroup(const std::string& group_by, const std::string& grouptitle, const std::string& groupregex, int percent, vec3 colour) {$/;"	f	class:Logstalgia
addGroup	src/logstalgia.cpp	/^void Logstalgia::addGroup(const std::string& groupstr) {$/;"	f	class:Logstalgia
addItem	src/core/quadtree.cpp	/^void QuadNode::addItem(QuadItem* item) {$/;"	f	class:QuadNode
addItem	src/core/quadtree.cpp	/^void QuadTree::addItem(QuadItem* item) {$/;"	f	class:QuadTree
addOption	src/core/ui/select.cpp	/^UIOptionLabel* UISelect::addOption(const std::string& name, UIAction* action, bool select_option) {$/;"	f	class:UISelect
addOption	src/core/ui/select.cpp	/^UIOptionLabel* UISelect::addOption(const std::string& name, const std::string& value, bool select_option) {$/;"	f	class:UISelect
addResource	src/core/texture.cpp	/^void TextureManager::addResource(TextureResource* r) {$/;"	f	class:TextureManager
addSection	src/core/conffile.cpp	/^ConfSection* ConfFile::addSection(const std::string& section) {$/;"	f	class:ConfFile
addSection	src/core/conffile.cpp	/^void ConfFile::addSection(ConfSection* section) {$/;"	f	class:ConfFile
addString	src/summarizer.cpp	/^void Summarizer::addString(const std::string& str) {$/;"	f	class:Summarizer
addStrings	src/logstalgia.cpp	/^void Logstalgia::addStrings(LogEntry* le) {$/;"	f	class:Logstalgia
addSubstitute	src/core/shader_common.cpp	/^void AbstractShader::addSubstitute(const std::string& name, const char *value, ...) {$/;"	f	class:AbstractShader
addSubstitute	src/core/shader_common.cpp	/^void AbstractShader::addSubstitute(const std::string& name, const std::string& value) {$/;"	f	class:AbstractShader
addToChild	src/core/quadtree.cpp	/^void QuadNode::addToChild(QuadItem* item) {$/;"	f	class:QuadNode
addUniform	src/core/shader_common.cpp	/^ShaderUniform* AbstractShaderPass::addUniform(const std::string& name, const std::string& type) {$/;"	f	class:AbstractShaderPass
addUniform	src/core/shader_common.cpp	/^void AbstractShader::addUniform(ShaderUniform* uniform) {$/;"	f	class:AbstractShader
addWord	src/summarizer.cpp	/^bool SummNode::addWord(const std::string& str, size_t offset) {$/;"	f	class:SummNode
addref	src/core/resource.h	/^    void addref()  { refs++; };$/;"	f	class:Resource
advance	src/core/fxfont.h	/^    vec2 advance;$/;"	m	class:FXGlyph
advance	src/core/utf8/checked.h	/^    void advance (octet_iterator& it, distance_type n, octet_iterator end)$/;"	f	namespace:utf8
advance	src/core/utf8/unchecked.h	/^        void advance (octet_iterator& it, distance_type n)$/;"	f	namespace:utf8::unchecked
alignRight	src/core/fxfont.cpp	/^void FXFont::alignRight(bool align_right) {$/;"	f	class:FXFont
alignTop	src/core/fxfont.cpp	/^void FXFont::alignTop(bool align_top) {$/;"	f	class:FXFont
align_right	src/core/fxfont.h	/^    bool align_right, align_top;$/;"	m	class:FXFont
align_top	src/core/fxfont.h	/^    bool align_right, align_top;$/;"	m	class:FXFont
alignment	src/core/ui/layout.h	/^    int alignment;$/;"	m	class:UILayout
allowMoreItems	src/core/quadtree.cpp	/^bool QuadNode::allowMoreItems() {$/;"	f	class:QuadNode
alpha	src/slider.h	/^    float alpha;$/;"	m	class:PositionSlider
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ax_boost_base.m4 \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dist_fonts_DATA_DIST	Makefile	/^am__dist_fonts_DATA_DIST = data\/fonts\/README \\$/;"	m
am__fastdepCC_FALSE	Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_TRUE	Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCXX_FALSE	Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_TRUE	Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(fontsdir)" \\$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = `echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__untar	Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_logstalgia_OBJECTS	Makefile	/^am_logstalgia_OBJECTS = src\/logstalgia-ncsa.$(OBJEXT) \\$/;"	m
appFinished	src/core/sdlapp.h	/^    bool appFinished;$/;"	m	class:SDLApp
app_version	dev/bin/build_tar.pl	/^sub app_version {$/;"	s
append	src/core/utf8/checked.h	/^    octet_iterator append(uint32_t cp, octet_iterator result)$/;"	f	namespace:utf8
append	src/core/utf8/unchecked.h	/^        octet_iterator append(uint32_t cp, octet_iterator result)$/;"	f	namespace:utf8::unchecked
applyDefines	src/core/shader_common.cpp	/^void ShaderPart::applyDefines(std::string& source) {$/;"	f	class:ShaderPart
applySubstitution	src/core/shader_common.cpp	/^void ShaderPart::applySubstitution(std::string& source, const std::string& name, const std::string& value) {$/;"	f	class:ShaderPart
applySubstitutions	src/core/shader_common.cpp	/^void AbstractShader::applySubstitutions(std::string& source) {$/;"	f	class:AbstractShader
applySubstitutions	src/core/shader_common.cpp	/^void ShaderPart::applySubstitutions(std::string& source) {$/;"	f	class:ShaderPart
applyUniform	src/core/shader.cc	/^void Shader::applyUniform(ShaderUniform* u) {$/;"	f	class:Shader
applyUniforms	src/core/shader_common.cpp	/^void AbstractShader::applyUniforms() {$/;"	f	class:AbstractShader
area	src/core/bounds.h	/^    float area() const {$/;"	f	class:Bounds2D
area	src/core/bounds.h	/^    float area() {$/;"	f	class:Bounds3D
arg_aliases	src/core/settings.h	/^    std::map<std::string, std::string> arg_aliases;$/;"	m	class:SDLAppSettings
arg_types	src/core/settings.h	/^    std::map<std::string, std::string> arg_types;$/;"	m	class:SDLAppSettings
arrivalTime	src/ball.cpp	/^float ProjectedBall::arrivalTime() {$/;"	f	class:ProjectedBall
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
atEnd	src/core/ui/scroll_bar.cpp	/^bool UIScrollBar::atEnd() {$/;"	f	class:UIScrollBar
atStart	src/core/ui/scroll_bar.cpp	/^bool UIScrollBar::atStart() {$/;"	f	class:UIScrollBar
attachTo	src/core/shader.cc	/^void ShaderPass::attachTo(unsigned int program) {$/;"	f	class:ShaderPass
attribute	src/core/ui/colour.h	/^    float* attribute;$/;"	m	class:UIColourSlider
autocomplete	src/core/ui/file_selector.cpp	/^std::string UIFileSelector::autocomplete(const std::string& input, bool dirs_only) {$/;"	f	class:UIFileSelector
ax_pthread_config	Makefile	/^ax_pthread_config = $/;"	m
background	src/core/ui/slider.h	/^    bool background;$/;"	m	class:UISlider
background	src/logstalgia.h	/^    vec3 background;$/;"	m	class:Logstalgia
background_colour	src/core/ui/ui.h	/^    vec4 background_colour;$/;"	m	class:UI
background_colour	src/settings.h	/^    vec3 background_colour;$/;"	m	class:LogstalgiaSettings
backspace	src/core/ui/label.cpp	/^void UILabel::backspace() {$/;"	f	class:UILabel
baked	src/core/shader_common.h	/^    bool baked;$/;"	m	class:ShaderUniform
balls	src/logstalgia.h	/^    std::list<RequestBall*> balls;$/;"	m	class:Logstalgia
balltex	src/logstalgia.h	/^    TextureResource* balltex;$/;"	m	class:Logstalgia
bar	src/core/ui/group.h	/^    UIGroupBar* bar;$/;"	m	class:UIGroup
bar	src/core/ui/subgroup.h	/^    UISubGroupBar* bar;$/;"	m	class:UISubGroup
bar_min	src/core/ui/scroll_bar.h	/^    float bar_min;$/;"	m	class:UIScrollBar
bar_offset	src/core/ui/scroll_bar.h	/^    float bar_offset;$/;"	m	class:UIScrollBar
bar_percent	src/core/ui/scroll_bar.h	/^    float bar_percent;$/;"	m	class:UIScrollBar
bar_rect	src/core/ui/scroll_bar.h	/^    vec2 bar_rect;$/;"	m	class:UIScrollBar
bar_step	src/core/ui/scroll_bar.h	/^    float bar_step;$/;"	m	class:UIScrollBar
bar_visual_offset	src/core/ui/scroll_bar.h	/^    float bar_visual_offset;$/;"	m	class:UIScrollBar
bar_width	src/core/ui/scroll_bar.h	/^    float bar_width;$/;"	m	class:UIScrollBar
bartex	src/core/ui/scroll_bar.h	/^    std::vector<TextureResource*> bartex;$/;"	m	class:UIScrollBar
base	src/core/utf8/checked.h	/^      octet_iterator base () const { return it; }$/;"	f	class:utf8::iterator
base	src/core/utf8/unchecked.h	/^            octet_iterator base () const { return it; }$/;"	f	class:utf8::unchecked::iterator
bgcolour	src/core/ui/label.h	/^    vec4 bgcolour;$/;"	m	class:UILabel
bgcolour	src/core/ui/layout.h	/^    vec4 bgcolour;$/;"	m	class:UILayout
bgtex	src/core/ui/solid_layout.h	/^    std::vector<TextureResource*> bgtex;$/;"	m	class:UISolidLayout
binPROGRAMS_INSTALL	Makefile	/^binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)$/;"	m
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = logstalgia$(EXEEXT)$/;"	m
bind	src/core/shader.cc	/^void Shader::bind() {$/;"	f	class:Shader
bind	src/core/texture.cpp	/^void TextureResource::bind() {$/;"	f	class:TextureResource
bind	src/core/vbo.h	/^    void bind() {$/;"	f	class:VBO
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bom	src/core/utf8/core.h	/^    const uint8_t bom[] = {0xef, 0xbb, 0xbf};$/;"	m	namespace:utf8
bothPressed	src/core/mousecursor.cpp	/^bool MouseCursor::bothPressed() const {$/;"	f	class:MouseCursor
bottom_gap	src/summarizer.h	/^    float top_gap, bottom_gap;$/;"	m	class:Summarizer
bounce	src/ball.cpp	/^void ProjectedBall::bounce() {$/;"	f	class:ProjectedBall
bounds	src/core/quadtree.h	/^    Bounds2D bounds;$/;"	m	class:QuadNode
bounds	src/core/quadtree.h	/^    Bounds2D bounds;$/;"	m	class:QuadTree
bounds	src/slider.h	/^    Bounds2D bounds;$/;"	m	class:PositionSlider
buf	src/core/vbo.h	/^    VBO buf;$/;"	m	class:quadbuf
buffer	src/core/vbo.h	/^    void buffer(int item_count, int item_size, int item_capacity, GLvoid* data, GLenum usage) {$/;"	f	class:VBO
buffer1	src/core/png_writer.h	/^    std::vector<char> buffer1;$/;"	m	class:PNGExporter
buffer1	src/core/tga.h	/^    std::vector<char> buffer1;$/;"	m	class:TGAExporter
buffer2	src/core/png_writer.h	/^    std::vector<char> buffer2;$/;"	m	class:PNGExporter
buffer2	src/core/tga.h	/^    std::vector<char> buffer2;$/;"	m	class:TGAExporter
buffer_shared_ptr	src/core/png_writer.h	/^    std::vector<char>* buffer_shared_ptr;$/;"	m	class:PNGExporter
buffer_shared_ptr	src/core/tga.h	/^    std::vector<char>* buffer_shared_ptr;$/;"	m	class:TGAExporter
buffer_type	src/core/vbo.h	/^    GLenum buffer_type;$/;"	m	class:VBO
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
buildSummary	src/summarizer.cpp	/^void SummUnit::buildSummary() {$/;"	f	class:SummUnit
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
buttonPressed	src/core/mousecursor.cpp	/^bool MouseCursor::buttonPressed() const {$/;"	f	class:MouseCursor
button_anim	src/core/ui/button.h	/^    float button_anim;$/;"	m	class:UIButton
c	src/summarizer.h	/^    char c;$/;"	m	class:SummNode
calcPosY	src/summarizer.cpp	/^float Summarizer::calcPosY(int i) const {$/;"	f	class:Summarizer
capacity	src/core/vbo.cpp	/^size_t quadbuf::capacity() {$/;"	f	class:quadbuf
capacity	src/core/vbo.h	/^    int capacity;$/;"	m	class:VBO
caption	src/slider.h	/^    std::string caption;$/;"	m	class:PositionSlider
capture	src/core/png_writer.cpp	/^void PNGExporter::capture() {$/;"	f	class:PNGExporter
capture	src/core/png_writer.cpp	/^void PNGWriter::capture(std::vector<char>& buffer) {$/;"	f	class:PNGWriter
capture	src/core/tga.cpp	/^void TGAExporter::capture() {$/;"	f	class:TGAExporter
capture	src/core/tga.cpp	/^void TGAWriter::capture(std::vector<char>& buffer) {$/;"	f	class:TGAWriter
capwidth	src/slider.h	/^    float capwidth;$/;"	m	class:PositionSlider
centre	src/core/bounds.h	/^    vec2 centre() const {$/;"	f	class:Bounds2D
centre	src/core/bounds.h	/^    vec3 centre() {$/;"	f	class:Bounds3D
centre	src/core/ui/layout.h	/^    bool centre;$/;"	m	class:UILayout
changeDir	src/core/ui/file_selector.cpp	/^bool UIFileSelector::changeDir(const std::string& dir) {$/;"	f	class:UIFileSelector
changed	src/summarizer.h	/^    bool changed;$/;"	m	class:Summarizer
check	src/core/timer.cpp	/^bool GLTimer::check() {$/;"	f	class:GLTimer
checkError	src/core/shader.cc	/^void ShaderPass::checkError() {$/;"	f	class:ShaderPass
checkProgramError	src/core/shader.cc	/^void Shader::checkProgramError() {$/;"	f	class:Shader
checktex	src/core/ui/checkbox.h	/^    TextureResource* checktex;$/;"	m	class:UICheckbox
children	src/core/quadtree.h	/^    std::vector<QuadNode*> children;$/;"	m	class:QuadNode
children	src/summarizer.h	/^    std::vector<SummNode*> children;$/;"	m	class:SummNode
chr	src/core/fxfont.h	/^    unsigned int chr;$/;"	m	class:FXGlyph
clear	src/core/conffile.cpp	/^void ConfFile::clear() {$/;"	f	class:ConfFile
clear	src/core/conffile.cpp	/^void ConfSection::clear() {$/;"	f	class:ConfSection
clear	src/core/display.cpp	/^void SDLAppDisplay::clear() {$/;"	f	class:SDLAppDisplay
clear	src/core/shader_common.cpp	/^void AbstractShader::clear() {$/;"	f	class:AbstractShader
clear	src/core/ui/layout.cpp	/^void UILayout::clear() {$/;"	f	class:UILayout
clear	src/core/ui/ui.cpp	/^void UI::clear() {$/;"	f	class:UI
clear_colour	src/core/display.h	/^    vec4 clear_colour;$/;"	m	class:SDLAppDisplay
click	src/core/ui/button.cpp	/^void UIButton::click(const vec2& pos) {$/;"	f	class:UIButton
click	src/core/ui/checkbox.cpp	/^void UIBoolCheckbox::click(const vec2& pos) {$/;"	f	class:UIBoolCheckbox
click	src/core/ui/checkbox.cpp	/^void UIFloatCheckbox::click(const vec2& pos) {$/;"	f	class:UIFloatCheckbox
click	src/core/ui/checkbox.h	/^    virtual void click(const vec2& pos) {};$/;"	f	class:UICheckbox
click	src/core/ui/element.h	/^    virtual void click(const vec2& pos) { if(parent!=0) parent->click(pos); };$/;"	f	class:UIElement
click	src/core/ui/file_selector.cpp	/^void UIFileSelectorLabel::click(const vec2& pos) {$/;"	f	class:UIFileSelectorLabel
click	src/core/ui/group.cpp	/^void UIGroupBar::click(const vec2& pos) {$/;"	f	class:UIGroupBar
click	src/core/ui/select.cpp	/^void UIOptionLabel::click(const vec2& pos) {$/;"	f	class:UIOptionLabel
click	src/core/ui/select.cpp	/^void UISelect::click(const vec2& pos) {$/;"	f	class:UISelect
click	src/core/ui/slider.cpp	/^void UIFloatSlider::click(const vec2& pos) {$/;"	f	class:UIFloatSlider
click	src/core/ui/slider.cpp	/^void UIIntSlider::click(const vec2& pos) {$/;"	f	class:UIIntSlider
click	src/core/ui/subgroup.cpp	/^void UISubGroupBar::click(const vec2& pos) {$/;"	f	class:UISubGroupBar
click	src/core/ui/ui.cpp	/^UIElement* UI::click(const MouseCursor& cursor) {$/;"	f	class:UI
click	src/slider.cpp	/^bool PositionSlider::click(vec2 pos, float* percent_ptr) {$/;"	f	class:PositionSlider
close	src/core/png_writer.cpp	/^void PNGWriter::close() {$/;"	f	class:PNGWriter
close	src/core/tga.cpp	/^void TGAWriter::close() {$/;"	f	class:TGAWriter
close	src/core/ui/console.cpp	/^void UIConsole::close() {$/;"	f	class:UIConsole
close	src/core/ui/file_selector.cpp	/^void UIFileSelector::close() {$/;"	f	class:UIFileSelector
code_point	src/core/utf8/checked.h	/^        uint32_t code_point() const {return cp;}$/;"	f	class:utf8::invalid_code_point
colour	src/ball.h	/^    vec3 colour;$/;"	m	class:ProjectedBall
colour	src/core/fxfont.h	/^    vec4 colour;$/;"	m	class:FXFont
colour	src/core/ui/colour.h	/^    UIColour* colour;$/;"	m	class:UIColourSlider
colour	src/core/ui/colour.h	/^    vec3* colour;$/;"	m	class:UIColour
colour	src/core/ui/image.h	/^    vec4  colour;$/;"	m	class:UIImage
colour	src/core/vbo.h	/^    vec4 colour;$/;"	m	class:quadbuf_vertex
colour	src/paddle.h	/^    vec4 colour;$/;"	m	class:Paddle
colour	src/summarizer.h	/^    vec4 colour;$/;"	m	class:SummItem
colour	src/textarea.h	/^    vec3 colour;$/;"	m	class:TextArea
colourFormat	src/core/texture.cpp	/^GLenum TextureResource::colourFormat(SDL_Surface* surface) {$/;"	f	class:TextureResource
colourHash	src/core/stringhash.cpp	/^vec3 colourHash(const std::string& str) {$/;"	f
commandLineOption	src/core/settings.h	/^    virtual void commandLineOption(const std::string& name, const std::string& value) {}$/;"	f	class:SDLAppSettings
commandLineOption	src/settings.cpp	/^void LogstalgiaSettings::commandLineOption(const std::string& name, const std::string& value) {$/;"	f	class:LogstalgiaSettings
command_history	src/core/ui/console.h	/^    std::vector<std::string> command_history;$/;"	m	class:UIConsolePrompt
commands	src/core/ui/console.h	/^    std::map<std::string, UIConsoleCommand*> commands;$/;"	m	class:UIConsole
comment	src/core/shader_common.h	/^    std::string comment;$/;"	m	class:ShaderUniform
commitBuffer	src/core/fxfont.cpp	/^void FXFontManager::commitBuffer() {$/;"	f	class:FXFontManager
compile	src/core/shader.cc	/^void ShaderPass::compile() {$/;"	f	class:ShaderPass
components	src/core/png_writer.h	/^    size_t components;$/;"	m	class:PNGWriter
components	src/core/tga.h	/^    size_t components;$/;"	m	class:TGAWriter
cond	src/core/png_writer.h	/^    SDL_cond*   cond;$/;"	m	class:PNGExporter
cond	src/core/ppm.h	/^    SDL_cond* cond;$/;"	m	class:FrameExporter
cond	src/core/tga.h	/^    SDL_cond*   cond;$/;"	m	class:TGAExporter
conf	src/core/conffile.h	/^    ConfFile* conf;$/;"	m	class:ConfSection
conf_sections	src/core/settings.h	/^    std::map<std::string, std::string> conf_sections;$/;"	m	class:SDLAppSettings
conffile	src/core/conffile.h	/^    std::string conffile;$/;"	m	class:ConfFile
conffile	src/core/conffile.h	/^    std::string conffile;$/;"	m	class:ConfFileException
confirm	src/core/ui/file_selector.cpp	/^void UIFileSelector::confirm() {$/;"	f	class:UIFileSelector
console	src/core/ui/console.h	/^    UIConsole* console;$/;"	m	class:UIConsoleEntry
console	src/core/ui/console.h	/^    UIConsole* console;$/;"	m	class:UIConsolePrompt
consoleLog	src/core/logger.cpp	/^void consoleLog(const char *str, ...) {$/;"	f
console_window	src/core/sdlapp.cpp	/^HWND SDLApp::console_window   = 0;$/;"	m	class:SDLApp	file:
console_window	src/core/sdlapp.h	/^    static HWND console_window;$/;"	m	class:SDLApp
contains	src/core/bounds.h	/^    bool contains(const vec2& point) const {$/;"	f	class:Bounds2D
contains	src/core/bounds.h	/^    bool contains(vec3& point) {$/;"	f	class:Bounds3D
contains	src/core/frustum.cpp	/^bool Frustum::contains(const vec3& p) const {$/;"	f	class:Frustum
content	src/textarea.h	/^    std::vector<std::string> content;$/;"	m	class:TextArea
coords	src/core/ui/image.h	/^    vec4  coords;$/;"	m	class:UIImage
copyValue	src/core/shader_common.cpp	/^void Vec2ArrayShaderUniform::copyValue(const std::vector<vec2>& value) {$/;"	f	class:Vec2ArrayShaderUniform
copyValue	src/core/shader_common.cpp	/^void Vec2ArrayShaderUniform::copyValue(const vec2* value) {$/;"	f	class:Vec2ArrayShaderUniform
copyValue	src/core/shader_common.cpp	/^void Vec3ArrayShaderUniform::copyValue(const std::vector<vec3>& value) {$/;"	f	class:Vec3ArrayShaderUniform
copyValue	src/core/shader_common.cpp	/^void Vec3ArrayShaderUniform::copyValue(const vec3* value) {$/;"	f	class:Vec3ArrayShaderUniform
copyValue	src/core/shader_common.cpp	/^void Vec4ArrayShaderUniform::copyValue(const std::vector<vec4>& value) {$/;"	f	class:Vec4ArrayShaderUniform
copyValue	src/core/shader_common.cpp	/^void Vec4ArrayShaderUniform::copyValue(const vec4* value) {$/;"	f	class:Vec4ArrayShaderUniform
corner	src/core/fxfont.h	/^    vec2 corner;$/;"	m	class:FXGlyph
corner	src/textarea.h	/^    vec2 corner;$/;"	m	class:TextArea
countSection	src/core/conffile.cpp	/^int ConfFile::countSection(const std::string& section) {$/;"	f	class:ConfFile
cp	src/core/utf8/checked.h	/^        uint32_t cp;$/;"	m	class:utf8::invalid_code_point
cpu_time	src/core/timer.h	/^    Uint32   cpu_time;    $/;"	m	class:GLTimer
create	src/core/texture.cpp	/^TextureResource* TextureManager::create(GLenum target) {$/;"	f	class:TextureManager
create	src/core/texture.cpp	/^TextureResource* TextureManager::create(int width, int height, bool mipmaps, GLint wrap, GLenum format, GLubyte* data) {$/;"	f	class:TextureManager
createTexture	src/core/texture.cpp	/^void TextureResource::createTexture() {$/;"	f	class:TextureResource
curChar	src/core/ftgl/FTUnicode.h	/^    unsigned int curChar;$/;"	m	class:FTUnicodeStringItr
curPos	src/core/ftgl/FTUnicode.h	/^    const T* curPos;$/;"	m	class:FTUnicodeStringItr
currentColour	src/core/display.cpp	/^vec4 SDLAppDisplay::currentColour() {$/;"	f	class:SDLAppDisplay
current_dir	src/core/ui/file_selector.h	/^    std::string current_dir;$/;"	m	class:UIFileSelector
current_filter	src/core/ui/file_selector.h	/^    UIOptionLabel* current_filter;$/;"	m	class:UIFileSelector
current_percent	src/core/seeklog.h	/^    float current_percent;$/;"	m	class:SeekLog
currtime	src/logstalgia.h	/^    time_t currtime;$/;"	m	class:Logstalgia
cursor_anim	src/core/ui/label.h	/^    float cursor_anim;$/;"	m	class:UILabel
cursor_pos	src/core/ui/ui.h	/^    vec2 cursor_pos;$/;"	m	class:UI
cursor_x	src/core/fxfont.h	/^    int cursor_x, cursor_y;$/;"	m	class:FXGlyphPage
cursor_y	src/core/fxfont.h	/^    int cursor_x, cursor_y;$/;"	m	class:FXGlyphPage
cursortex	src/core/mousecursor.h	/^    TextureResource* cursortex;$/;"	m	class:MouseCursor
d	src/core/plane.h	/^    float d;$/;"	m	class:Plane
data	src/core/texture.h	/^    GLubyte* data;$/;"	m	class:TextureResource
data	src/core/vbo.h	/^    quadbuf_vertex* data;$/;"	m	class:quadbuf
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dateAtPosition	src/logstalgia.cpp	/^std::string Logstalgia::dateAtPosition(float percent) {$/;"	f	class:Logstalgia
dc_install_base	Makefile	/^	dc_install_base=`$(am__cd) $(distdir)\/_inst && pwd | sed -e 's,^[^:\\\\\/]:[\\\\\/],\/,'` \\$/;"	m
debug	src/summarizer.cpp	/^void SummNode::debug(int indent) {$/;"	f	class:SummNode
debugLog	src/core/logger.cpp	/^void debugLog(const char *str, ...) {$/;"	f
default_colour	src/paddle.h	/^    vec4 default_colour;$/;"	m	class:Paddle
default_logger	src/core/logger.cpp	/^Logger* Logger::default_logger = new Logger(LOG_LEVEL_ERROR, stderr, 0);$/;"	m	class:Logger	file:
default_logger	src/core/logger.h	/^    static Logger* default_logger;$/;"	m	class:Logger
default_section_name	src/core/settings.h	/^    std::string default_section_name;$/;"	m	class:SDLAppSettings
define	src/core/shader_common.cpp	/^void ShaderPart::define(const std::string& name) {$/;"	f	class:ShaderPart
define	src/core/shader_common.cpp	/^void ShaderPart::define(const std::string& name, const char *value, ...) {$/;"	f	class:ShaderPart
define	src/core/shader_common.cpp	/^void ShaderPart::define(const std::string& name, const std::string& value) {$/;"	f	class:ShaderPart
defines	src/core/shader_common.h	/^    std::map<std::string,std::string> defines;$/;"	m	class:ShaderPart
departing	src/summarizer.h	/^    bool departing;$/;"	m	class:SummItem
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depth	src/core/bounds.h	/^    float depth() {$/;"	f	class:Bounds3D
depth	src/core/quadtree.h	/^    int depth;$/;"	m	class:QuadNode
deref	src/core/resource.h	/^    void deref()   { refs--; };$/;"	f	class:Resource
deselect	src/core/ui/ui.cpp	/^void UI::deselect() {$/;"	f	class:UI
desktop_height	src/core/display.h	/^    int desktop_width, desktop_height;$/;"	m	class:SDLAppDisplay
desktop_width	src/core/display.h	/^    int desktop_width, desktop_height;$/;"	m	class:SDLAppDisplay
dest	src/requestball.h	/^    vec2 dest;$/;"	m	class:RequestBall
dest	src/summarizer.h	/^    vec2 dest;$/;"	m	class:SummItem
dest_elapsed	src/paddle.h	/^    float dest_elapsed;$/;"	m	class:Paddle
dest_eta	src/paddle.h	/^    float dest_eta;$/;"	m	class:Paddle
dest_x	src/ball.h	/^    float dest_x;$/;"	m	class:ProjectedBall
dest_y	src/paddle.h	/^    int   dest_y;$/;"	m	class:Paddle
destroy	src/core/fxfont.cpp	/^void FXFontManager::destroy() {$/;"	f	class:FXFontManager
destroy	src/summarizer.h	/^    bool destroy;$/;"	m	class:SummItem
dims	src/core/fxfont.h	/^    vec2 dims;$/;"	m	class:FXGlyph
dir_path	src/core/ui/file_selector.h	/^    UILabel* dir_path;$/;"	m	class:UIFileSelector
directory	src/core/ui/file_selector.h	/^    bool directory;$/;"	m	class:UIFileSelectorLabel
disable_auto_skip	src/settings.h	/^    bool disable_auto_skip;$/;"	m	class:LogstalgiaSettings
disable_glow	src/settings.h	/^    bool disable_glow;$/;"	m	class:LogstalgiaSettings
disable_progress	src/settings.h	/^    bool disable_progress;$/;"	m	class:LogstalgiaSettings
disabled	src/core/ui/element.h	/^    bool  disabled;$/;"	m	class:UIElement
display	src/core/display.cpp	/^SDLAppDisplay display;$/;"	v
display_height	src/core/settings.h	/^    int display_height;$/;"	m	class:SDLAppSettings
display_text	src/core/ui/label.h	/^    std::string display_text;$/;"	m	class:UILabel
display_width	src/core/settings.h	/^    int display_width;$/;"	m	class:SDLAppSettings
displaydate	src/logstalgia.h	/^    std::string displaydate;$/;"	m	class:Logstalgia
displaystr	src/summarizer.h	/^    std::string displaystr;$/;"	m	class:SummItem
displaytime	src/logstalgia.h	/^    std::string displaytime;$/;"	m	class:Logstalgia
dist_fontsDATA_INSTALL	Makefile	/^dist_fontsDATA_INSTALL = $(INSTALL_DATA)$/;"	m
dist_fonts_DATA	Makefile	/^dist_fonts_DATA = data\/fonts\/README data\/fonts\/FreeMonoBold.ttf data\/fonts\/FreeSerif.ttf$/;"	m
dist_pkgdataDATA_INSTALL	Makefile	/^dist_pkgdataDATA_INSTALL = $(INSTALL_DATA)$/;"	m
dist_pkgdata_DATA	Makefile	/^dist_pkgdata_DATA = data\/ball.tga data\/example.log data\/glow.tga$/;"	m
distance	src/core/plane.cpp	/^float Plane::distance(const vec3 & p) const {$/;"	f	class:Plane
distance	src/core/utf8/checked.h	/^    distance (octet_iterator first, octet_iterator last)$/;"	f	namespace:utf8
distance	src/core/utf8/unchecked.h	/^        distance (octet_iterator first, octet_iterator last)$/;"	f	namespace:utf8::unchecked
distance_travelled	src/ball.h	/^    float distance_travelled;$/;"	m	class:ProjectedBall
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
doit	dev/bin/build_win32.pl	/^sub doit {$/;"	s
done	dev/bin/build_win32.pl	/^ done:$/;"	l
dontBounce	src/ball.cpp	/^void ProjectedBall::dontBounce() {$/;"	f	class:ProjectedBall
dosify	dev/bin/build_win32.pl	/^sub dosify {$/;"	s
doubleClick	src/core/ui/element.h	/^    virtual void doubleClick(const vec2& pos) { click(pos); };$/;"	f	class:UIElement
doubleClick	src/core/ui/file_selector.cpp	/^void UIFileSelectorLabel::doubleClick(const vec2& pos) {$/;"	f	class:UIFileSelectorLabel
double_click_interval	src/core/ui/ui.h	/^    float double_click_interval;$/;"	m	class:UI
double_click_timer	src/core/ui/ui.h	/^    float double_click_timer;$/;"	m	class:UI
dpi	src/core/fxfont.h	/^    int dpi;$/;"	m	class:FXGlyphSet
drag	src/core/ui/colour.cpp	/^void UIColourSlider::drag(const vec2& pos) {$/;"	f	class:UIColourSlider
drag	src/core/ui/element.h	/^    virtual void drag(const vec2& pos) {};$/;"	f	class:UIElement
drag	src/core/ui/layout.cpp	/^void UIResizeButton::drag(const vec2& pos) {$/;"	f	class:UIResizeButton
drag	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::drag(const vec2& pos) {$/;"	f	class:UIScrollBar
drag	src/core/ui/slider.cpp	/^void UIFloatSlider::drag(const vec2& pos) {$/;"	f	class:UIFloatSlider
drag	src/core/ui/slider.cpp	/^void UIIntSlider::drag(const vec2& pos) {$/;"	f	class:UIIntSlider
drag	src/core/ui/ui.cpp	/^UIElement* UI::drag(const MouseCursor& cursor) {$/;"	f	class:UI
drag_start	src/core/ui/scroll_bar.h	/^    vec2 drag_start;$/;"	m	class:UIScrollBar
dragging	src/core/ui/scroll_bar.h	/^    bool dragging;$/;"	m	class:UIScrollBar
dragging	src/core/ui/slider.h	/^    bool dragging;$/;"	m	class:UISlider
draw	src/core/bounds.h	/^    void draw() const{$/;"	f	class:Bounds2D
draw	src/core/bounds.h	/^    void draw() {$/;"	f	class:Bounds3D
draw	src/core/fxfont.cpp	/^void FXFont::draw(float x, float y, const std::string& text) const {$/;"	f	class:FXFont
draw	src/core/fxfont.cpp	/^void FXGlyph::draw(const vec2& pos) const {$/;"	f	class:FXGlyph
draw	src/core/fxfont.cpp	/^void FXGlyphSet::draw(const std::string& text) {$/;"	f	class:FXGlyphSet
draw	src/core/mousecursor.cpp	/^void MouseCursor::draw() const {$/;"	f	class:MouseCursor
draw	src/core/quadtree.cpp	/^int QuadNode::draw(Frustum& frustum) {$/;"	f	class:QuadNode
draw	src/core/sdlapp.h	/^    virtual void draw(float t, float dt) {};$/;"	f	class:SDLApp
draw	src/core/ui/element.cpp	/^void UIElement::draw() {$/;"	f	class:UIElement
draw	src/core/ui/layout.cpp	/^void UILayout::draw() {$/;"	f	class:UILayout
draw	src/core/ui/layout.cpp	/^void UIResizableLayout::draw() {$/;"	f	class:UIResizableLayout
draw	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::draw() {$/;"	f	class:UIScrollLayout
draw	src/core/ui/select.cpp	/^void UISelect::draw() {$/;"	f	class:UISelect
draw	src/core/ui/ui.cpp	/^void UI::draw() {$/;"	f	class:UI
draw	src/core/vbo.cpp	/^void quadbuf::draw() {$/;"	f	class:quadbuf
draw	src/logstalgia.cpp	/^void Logstalgia::draw(float t, float dt) {$/;"	f	class:Logstalgia
draw	src/paddle.cpp	/^void Paddle::draw() {$/;"	f	class:Paddle
draw	src/requestball.cpp	/^void RequestBall::draw() const {$/;"	f	class:RequestBall
draw	src/slider.cpp	/^void PositionSlider::draw(float dt) {$/;"	f	class:PositionSlider
draw	src/summarizer.cpp	/^void SummItem::draw(float alpha) {$/;"	f	class:SummItem
draw	src/summarizer.cpp	/^void Summarizer::draw(float dt, float alpha) {$/;"	f	class:Summarizer
draw	src/textarea.cpp	/^void TextArea::draw() {$/;"	f	class:TextArea
drawBackground	src/core/ui/label.cpp	/^void UILabel::drawBackground() {$/;"	f	class:UILabel
drawBackground	src/core/ui/layout.cpp	/^void UILayout::drawBackground() {$/;"	f	class:UILayout
drawBackground	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::drawBackground() {$/;"	f	class:UIScrollLayout
drawBackground	src/core/ui/solid_layout.cpp	/^void UISolidLayout::drawBackground() {$/;"	f	class:UISolidLayout
drawBuffer	src/core/fxfont.cpp	/^void FXFontManager::drawBuffer() {$/;"	f	class:FXFontManager
drawContent	src/core/ui/checkbox.cpp	/^void UICheckbox::drawContent() {$/;"	f	class:UICheckbox
drawContent	src/core/ui/colour.cpp	/^void UIColour::drawContent() {$/;"	f	class:UIColour
drawContent	src/core/ui/colour.cpp	/^void UIHueSlider::drawContent() {$/;"	f	class:UIHueSlider
drawContent	src/core/ui/colour.cpp	/^void UILightnessSlider::drawContent() {$/;"	f	class:UILightnessSlider
drawContent	src/core/ui/colour.cpp	/^void UISatSlider::drawContent() {$/;"	f	class:UISatSlider
drawContent	src/core/ui/console.cpp	/^void UIConsolePrompt::drawContent() {$/;"	f	class:UIConsolePrompt
drawContent	src/core/ui/element.h	/^    virtual void drawContent() {};$/;"	f	class:UIElement
drawContent	src/core/ui/image.cpp	/^void UIImage::drawContent() {$/;"	f	class:UIImage
drawContent	src/core/ui/label.cpp	/^void UILabel::drawContent() {$/;"	f	class:UILabel
drawContent	src/core/ui/layout.cpp	/^void UIResizeButton::drawContent() {$/;"	f	class:UIResizeButton
drawContent	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::drawContent() {$/;"	f	class:UIScrollBar
drawContent	src/core/ui/slider.cpp	/^void UIFloatSlider::drawContent() {$/;"	f	class:UIFloatSlider
drawContent	src/core/ui/slider.cpp	/^void UIIntSlider::drawContent() {$/;"	f	class:UIIntSlider
drawGlow	src/requestball.cpp	/^void RequestBall::drawGlow() const {$/;"	f	class:RequestBall
drawGlyphes	src/core/fxfont.cpp	/^void FXFont::drawGlyphes() {$/;"	f	class:FXFont
drawGradient	src/core/ui/colour.cpp	/^void UIColourSlider::drawGradient(const vec2& rect, const vec4& colour1, const vec4& colour2) {$/;"	f	class:UIColourSlider
drawGroups	src/logstalgia.cpp	/^void Logstalgia::drawGroups(float dt, float alpha) {$/;"	f	class:Logstalgia
drawNodesInFrustum	src/core/quadtree.cpp	/^int QuadTree::drawNodesInFrustum(Frustum& frustum) {$/;"	f	class:QuadTree
drawOutline	src/core/ui/element.cpp	/^void UIElement::drawOutline() {$/;"	f	class:UIElement
drawOutline	src/core/ui/element.cpp	/^void UIElement::drawOutline(const vec2& rect) {$/;"	f	class:UIElement
drawOutline	src/core/ui/layout.cpp	/^void UILayout::drawOutline() {$/;"	f	class:UILayout
drawOutline	src/core/ui/ui.cpp	/^void UI::drawOutline() {$/;"	f	class:UI
drawPages	src/core/fxfont.cpp	/^void FXGlyphSet::drawPages() {$/;"	f	class:FXGlyphSet
drawQuad	src/core/ui/element.cpp	/^void UIElement::drawQuad(const vec2& pos, const vec2& rect, const vec4& texcoord) {$/;"	f	class:UIElement
drawQuad	src/core/ui/element.cpp	/^void UIElement::drawQuad(const vec2& rect, const vec4& texcoord) {$/;"	f	class:UIElement
drawQuadItem	src/core/quadtree.h	/^    virtual void drawQuadItem() {};$/;"	f	class:QuadItem
drawResponseCode	src/requestball.cpp	/^void RequestBall::drawResponseCode() const {$/;"	f	class:RequestBall
drawShadow	src/paddle.cpp	/^void Paddle::drawShadow() {$/;"	f	class:Paddle
drawSlider	src/core/ui/slider.cpp	/^void UISlider::drawSlider(float position) {$/;"	f	class:UISlider
drawSlider	src/slider.cpp	/^void PositionSlider::drawSlider(float pos_x) const {$/;"	f	class:PositionSlider
drawText	src/core/ui/ui.cpp	/^void UI::drawText(float x, float y, const char *str, ...) {$/;"	f	class:UI
drawText	src/core/ui/ui.cpp	/^void UI::drawText(float x, float y, const std::string& text) {$/;"	f	class:UI
drawToVBO	src/core/fxfont.cpp	/^void FXGlyph::drawToVBO(quadbuf& buffer, const vec2& pos, const vec4& colour) const {$/;"	f	class:FXGlyph
drawToVBO	src/core/fxfont.cpp	/^void FXGlyphSet::drawToVBO(vec2& cursor, const std::string& text, const vec4& colour) {$/;"	f	class:FXGlyphSet
drawToken	src/paddle.cpp	/^void Paddle::drawToken() {$/;"	f	class:Paddle
drawbg	src/core/ui/layout.h	/^    bool drawbg;$/;"	m	class:UILayout
dropShadow	src/core/fxfont.cpp	/^void FXFont::dropShadow(bool shadow) {$/;"	f	class:FXFont
dropShadow	src/core/fxfont.h	/^    bool dropShadow() const { return shadow; };$/;"	f	class:FXFont
dump	src/core/ppm.cpp	/^void FrameExporter::dump() {$/;"	f	class:FrameExporter
dumpImpl	src/core/ppm.cpp	/^void PPMExporter::dumpImpl() {$/;"	f	class:PPMExporter
dumpImpl	src/core/ppm.h	/^    virtual void dumpImpl() {};$/;"	f	class:FrameExporter
dumpThr	src/core/ppm.cpp	/^void FrameExporter::dumpThr() {$/;"	f	class:FrameExporter
dumper_thread	src/core/ppm.cpp	/^static int dumper_thread(void *arg) {$/;"	f	file:
dumper_thread_state	src/core/ppm.h	/^    int dumper_thread_state;$/;"	m	class:FrameExporter
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dynamic_compile	src/core/shader_common.h	/^    bool dynamic_compile;$/;"	m	class:AbstractShader
edit_bgcolour	src/core/ui/label.h	/^    vec4 edit_bgcolour;$/;"	m	class:UILabel
editable	src/core/ui/element.h	/^    bool  editable;$/;"	m	class:UIElement
elapsed	src/summarizer.h	/^    float elapsed;$/;"	m	class:SummItem
elapsed_time	src/logstalgia.h	/^    double elapsed_time;$/;"	m	class:Logstalgia
element	src/core/ui/action.h	/^    UIElement* element;$/;"	m	class:UIElementAction
element_names	src/core/ui/element.cpp	/^std::map<int,std::string> element_names = boost::assign::map_list_of$/;"	v
elements	src/core/ui/layout.h	/^    std::vector<UIElement*> elements;$/;"	m	class:UILayout
elements	src/core/ui/ui.h	/^    std::vector<UIElement*> elements;$/;"	m	class:UI
elementsAt	src/core/ui/element.cpp	/^void UIElement::elementsAt(const vec2& pos, std::list<UIElement*>& elements_found) {$/;"	f	class:UIElement
elementsAt	src/core/ui/label.cpp	/^void UILabel::elementsAt(const vec2& pos, std::list<UIElement*>& elements_found) {$/;"	f	class:UILabel
elementsAt	src/core/ui/layout.cpp	/^void UILayout::elementsAt(const vec2& pos, std::list<UIElement*>& elements_found) {$/;"	f	class:UILayout
elementsAt	src/core/ui/layout.cpp	/^void UIResizableLayout::elementsAt(const vec2& pos, std::list<UIElement*>& elements_found) {$/;"	f	class:UIResizableLayout
elementsAt	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::elementsAt(const vec2& pos, std::list<UIElement*>& elements_found) {$/;"	f	class:UIScrollBar
elementsAt	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::elementsAt(const vec2& pos, std::list<UIElement*>& elements_found) {$/;"	f	class:UIScrollLayout
elementsAt	src/core/ui/select.cpp	/^void UISelect::elementsAt(const vec2& pos, std::list<UIElement*>& elements_found) {$/;"	f	class:UISelect
elementsAt	src/core/ui/ui.cpp	/^void UI::elementsAt(const vec2& pos, std::list<UIElement*>& found_elements) {$/;"	f	class:UI
elementsByType	src/core/ui/element.cpp	/^bool UIElement::elementsByType(std::list<UIElement*>& found, int type) {$/;"	f	class:UIElement
elementsByType	src/core/ui/layout.cpp	/^bool UILayout::elementsByType(std::list<UIElement*>& found, int type) {$/;"	f	class:UILayout
elementsByType	src/core/ui/ui.cpp	/^bool UI::elementsByType(std::list<UIElement*>& found, int type) {$/;"	f	class:UI
empty	src/core/quadtree.cpp	/^bool QuadNode::empty() {$/;"	f	class:QuadNode
enableAlpha	src/core/display.cpp	/^void SDLAppDisplay::enableAlpha(bool enable) {$/;"	f	class:SDLAppDisplay
enableResize	src/core/display.cpp	/^void SDLAppDisplay::enableResize(bool resizable) {$/;"	f	class:SDLAppDisplay
enableVsync	src/core/display.cpp	/^void SDLAppDisplay::enableVsync(bool vsync) {$/;"	f	class:SDLAppDisplay
enable_alpha	src/core/display.h	/^    bool enable_alpha;$/;"	m	class:SDLAppDisplay
end	src/ball.h	/^    vec2 end;$/;"	m	class:Line
end_reached	src/logstalgia.h	/^    bool end_reached;$/;"	m	class:Logstalgia
entryException	src/core/conffile.cpp	/^void ConfFile::entryException(ConfEntry* entry, std::string reason) {$/;"	f	class:ConfFile
entrymap	src/core/conffile.h	/^    std::map<std::string, ConfEntryList*> entrymap;$/;"	m	class:ConfSection
errmsg	src/core/conffile.h	/^    std::string errmsg;$/;"	m	class:ConfFileException
erroffset	src/core/regex.h	/^    int erroffset;$/;"	m	class:Regex
error	src/core/display.h	/^    std::string error;$/;"	m	class:SDLInitException
error	src/core/regex.h	/^    const char *error;$/;"	m	class:Regex
errorContext	src/core/shader_common.cpp	/^bool AbstractShaderPass::errorContext(const char* log_message, std::string& context) {$/;"	f	class:AbstractShaderPass
errorLog	src/core/logger.cpp	/^void errorLog(const char *str, ...) {$/;"	f
eta	src/summarizer.h	/^    float eta;$/;"	m	class:SummItem
exception	src/summarizer.h	/^    std::vector<bool> exception;$/;"	m	class:SummNode
exceptions	src/summarizer.h	/^    bool exceptions;$/;"	m	class:SummUnit
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
execute	src/core/ui/console.cpp	/^bool UIConsoleCommand::execute(const std::string& args) {$/;"	f	class:UIConsoleCommand
execute	src/core/ui/console.h	/^    virtual bool execute() { return false; };$/;"	f	class:UIConsoleCommand
executeCommand	src/core/ui/console.cpp	/^bool UIConsole::executeCommand(const std::string& command_string) {$/;"	f	class:UIConsole
existing_console	src/core/sdlapp.cpp	/^bool SDLApp::existing_console = false;$/;"	m	class:SDLApp	file:
existing_console	src/core/sdlapp.h	/^    static bool existing_console;$/;"	m	class:SDLApp
expand	src/summarizer.cpp	/^void SummNode::expand(std::string prefix, std::vector<std::string>& vec, bool exceptions) {$/;"	f	class:SummNode
expandRect	src/core/ui/element.h	/^    virtual void expandRect(const vec2& expand) {};$/;"	f	class:UIElement
expandRect	src/core/ui/label.cpp	/^void UILabel::expandRect(const vec2& expand) {$/;"	f	class:UILabel
expandRect	src/core/ui/layout.cpp	/^void UILayout::expandRect(const vec2& expand) {$/;"	f	class:UILayout
expanded	src/core/ui/label.h	/^    float expanded;$/;"	m	class:UILabel
expanded	src/summarizer.h	/^    std::vector<std::string> expanded;$/;"	m	class:SummUnit
expanded_rect	src/core/ui/layout.h	/^    vec2 expanded_rect;$/;"	m	class:UILayout
expander	src/core/ui/subgroup.h	/^    UIImage* expander;$/;"	m	class:UISubGroupBar
exportDisplaySettings	src/core/settings.cpp	/^void SDLAppSettings::exportDisplaySettings(ConfFile& conf) {$/;"	f	class:SDLAppSettings
extensions	src/core/shader_common.h	/^    std::map<std::string,std::string> extensions;$/;"	m	class:AbstractShaderPass
fade_time	src/slider.h	/^    float fade_time;$/;"	m	class:PositionSlider
far_bottom_left	src/core/frustum.h	/^    vec3 far_bottom_left,  far_bottom_right;$/;"	m	class:Frustum
far_bottom_right	src/core/frustum.h	/^    vec3 far_bottom_left,  far_bottom_right;$/;"	m	class:Frustum
far_distance	src/core/frustum.h	/^    float near_distance, far_distance;$/;"	m	class:Frustum
far_half_height	src/core/frustum.h	/^    float far_half_height;$/;"	m	class:Frustum
far_half_width	src/core/frustum.h	/^    float far_half_width;$/;"	m	class:Frustum
far_top_left	src/core/frustum.h	/^    vec3 far_top_left,     far_top_right;$/;"	m	class:Frustum
far_top_right	src/core/frustum.h	/^    vec3 far_top_left,     far_top_right;$/;"	m	class:Frustum
fcntl_fail	src/core/seeklog.h	/^    bool fcntl_fail;$/;"	m	class:StreamLog
ffp	src/settings.h	/^    bool ffp;$/;"	m	class:LogstalgiaSettings
field	src/core/ui/select.h	/^    int* field;$/;"	m	class:UIIntSelectAction
file_path	src/core/ui/file_selector.h	/^    UILabel* file_path;$/;"	m	class:UIFileSelector
file_size	src/core/seeklog.h	/^    long file_size;$/;"	m	class:SeekLog
filename	src/core/png_writer.h	/^    std::string filename;$/;"	m	class:PNGExporter
filename	src/core/png_writer.h	/^    std::string filename;$/;"	m	class:PNGExporterException
filename	src/core/ppm.h	/^    std::string filename;$/;"	m	class:PPMExporter
filename	src/core/ppm.h	/^    std::string filename;$/;"	m	class:PPMExporterException
filename	src/core/seeklog.h	/^    std::string filename;$/;"	m	class:SeekLogException
filename	src/core/shader_common.h	/^    std::string filename;$/;"	m	class:ShaderPart
filename	src/core/texture.h	/^    std::string filename;$/;"	m	class:TextureResource
filename	src/core/tga.h	/^    std::string filename;$/;"	m	class:TGAExporter
filename	src/core/tga.h	/^    std::string filename;$/;"	m	class:TGAExporterException
fillHorizontal	src/core/ui/element.h	/^    bool fillHorizontal() const { return fill_horizontal; }$/;"	f	class:UIElement
fillVertical	src/core/ui/element.h	/^    bool fillVertical()   const { return fill_vertical; }$/;"	f	class:UIElement
fill_horizontal	src/core/ui/element.h	/^    bool   fill_horizontal;$/;"	m	class:UIElement
fill_vertical	src/core/ui/element.h	/^    bool   fill_vertical;$/;"	m	class:UIElement
filterURLHostname	src/logstalgia.cpp	/^std::string Logstalgia::filterURLHostname(const std::string& hostname) {$/;"	f	class:Logstalgia
filter_select	src/core/ui/file_selector.h	/^    UISelect* filter_select;$/;"	m	class:UIFileSelector
findNearest	src/logstalgia.cpp	/^RequestBall* Logstalgia::findNearest(Paddle* paddle, const std::string& paddle_token) {$/;"	f	class:Logstalgia
find_invalid	src/core/utf8/core.h	/^    octet_iterator find_invalid(octet_iterator start, octet_iterator end)$/;"	f	namespace:utf8
finish	src/ball.cpp	/^vec2 ProjectedBall::finish() {$/;"	f	class:ProjectedBall
first	src/core/bounds.h	/^    bool first;$/;"	m	class:Bounds2D
first	src/core/bounds.h	/^    bool first;$/;"	m	class:Bounds3D
fixed_tick_rate	src/logstalgia.h	/^    float fixed_tick_rate;$/;"	m	class:Logstalgia
flabel	src/core/ui/slider.h	/^    UIFloatLabel*  flabel;$/;"	m	class:UILabelFloatSlider
flipSides	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::flipSides(bool flip_sides) {$/;"	f	class:UIScrollBar
flip_sides	src/core/ui/scroll_bar.h	/^    bool  flip_sides;$/;"	m	class:UIScrollBar
font	src/core/ui/ui.h	/^    FXFont font;$/;"	m	class:UI
font	src/paddle.h	/^    FXFont font;$/;"	m	class:Paddle
font	src/requestball.h	/^    FXFont* font;$/;"	m	class:RequestBall
font	src/slider.h	/^    FXFont font;$/;"	m	class:PositionSlider
font	src/summarizer.h	/^    FXFont font;$/;"	m	class:SummItem
font	src/summarizer.h	/^    FXFont font;$/;"	m	class:Summarizer
font	src/textarea.h	/^    FXFont font;$/;"	m	class:TextArea
fontBall	src/logstalgia.h	/^    FXFont fontBall;$/;"	m	class:Logstalgia
fontLarge	src/logstalgia.h	/^    FXFont fontLarge;$/;"	m	class:Logstalgia
fontMedium	src/logstalgia.h	/^    FXFont fontMedium;$/;"	m	class:Logstalgia
fontSizeMap	src/core/fxfont.h	/^typedef std::map<int,FXGlyphSet*> fontSizeMap;$/;"	t
fontSmall	src/logstalgia.h	/^    FXFont fontSmall;$/;"	m	class:Logstalgia
font_alpha	src/logstalgia.h	/^    float font_alpha;$/;"	m	class:Logstalgia
font_dir	src/core/fxfont.h	/^    std::string font_dir;$/;"	m	class:FXFontManager
font_gap	src/summarizer.h	/^    int font_gap;$/;"	m	class:Summarizer
font_size	src/settings.h	/^    int font_size;$/;"	m	class:LogstalgiaSettings
font_vbo	src/core/fxfont.h	/^    quadbuf font_vbo;$/;"	m	class:FXFontManager
fontfile	src/core/fxfont.h	/^    std::string fontfile;$/;"	m	class:FXFont
fontfile	src/core/fxfont.h	/^    std::string fontfile;$/;"	m	class:FXGlyphSet
fontmanager	src/core/fxfont.cpp	/^FXFontManager fontmanager;$/;"	v
fonts	src/core/fxfont.h	/^    std::map<std::string, fontSizeMap*> fonts;$/;"	m	class:FXFontManager
fontsdir	Makefile	/^fontsdir = $(pkgdatadir)\/fonts$/;"	m
format	src/core/texture.h	/^    GLenum format;$/;"	m	class:TextureResource
format_node	src/summarizer.cpp	/^std::string format_node(std::string str, int refs) {$/;"	f
fov	src/core/frustum.h	/^    float fov;$/;"	m	class:Frustum
fps	src/core/sdlapp.h	/^    float fps;$/;"	m	class:SDLApp
fps_updater	src/core/sdlapp.h	/^    int fps_updater;$/;"	m	class:SDLApp
fragment_shader	src/core/shader_common.h	/^    AbstractShaderPass* fragment_shader;$/;"	m	class:AbstractShader
frameExporter	src/logstalgia.h	/^    FrameExporter* frameExporter;$/;"	m	class:Logstalgia
frame_count	src/core/sdlapp.h	/^    int frame_count;$/;"	m	class:SDLApp
framecount	src/logstalgia.h	/^    int framecount;$/;"	m	class:Logstalgia
frameless	src/core/display.h	/^    bool frameless;$/;"	m	class:SDLAppDisplay
frameskip	src/logstalgia.h	/^    int frameskip;$/;"	m	class:Logstalgia
freetype	src/core/fxfont.h	/^    FT_Library freetype;$/;"	m	class:FXGlyphSet
ftface	src/core/fxfont.h	/^    FT_Face ftface;$/;"	m	class:FXGlyphSet
fullscreen	src/core/display.h	/^    bool fullscreen;$/;"	m	class:SDLAppDisplay
fullscreen	src/core/settings.h	/^    bool fullscreen;$/;"	m	class:SDLAppSettings
gSDLAppConfDir	src/core/sdlapp.cpp	/^std::string gSDLAppConfDir;$/;"	v
gSDLAppExec	src/core/sdlapp.cpp	/^std::string gSDLAppExec  = "sdlapp";$/;"	v
gSDLAppPathSeparator	src/core/sdlapp.cpp	/^std::string gSDLAppPathSeparator = "\/";$/;"	v
gSDLAppPathSeparator	src/core/sdlapp.cpp	/^std::string gSDLAppPathSeparator = "\\\\";$/;"	v
gSDLAppResourceDir	src/core/sdlapp.cpp	/^std::string gSDLAppResourceDir;$/;"	v
gSDLAppShaderDir	src/core/shader_common.cpp	/^std::string gSDLAppShaderDir;$/;"	v
gSDLAppTitle	src/core/sdlapp.cpp	/^std::string gSDLAppTitle = "SDL App";$/;"	v
gSeekLogMaxBufferSize	src/core/seeklog.cpp	/^long gSeekLogMaxBufferSize = 104857600;$/;"	v
gStringHashSeed	src/core/stringhash.cpp	/^int gStringHashSeed = 31;$/;"	v
gSyncLog	src/logstalgia.cpp	/^bool  gSyncLog  = false;$/;"	v
generateLists	src/core/quadtree.cpp	/^void QuadNode::generateLists() {$/;"	f	class:QuadNode
generateLists	src/core/quadtree.cpp	/^void QuadTree::generateLists() {$/;"	f	class:QuadTree
geometry_shader	src/core/shader_common.h	/^    AbstractShaderPass* geometry_shader;$/;"	m	class:AbstractShader
getActiveColour	src/core/ui/ui.cpp	/^UIColour* UI::getActiveColour() {$/;"	f	class:UI
getAdvance	src/core/fxfont.h	/^    const vec2& getAdvance() const { return advance; };$/;"	f	class:FXGlyph
getAlpha	src/core/ui/ui.cpp	/^vec4 UI::getAlpha() {$/;"	f	class:UI
getAscender	src/core/fxfont.cpp	/^float FXFont::getAscender() const {$/;"	f	class:FXFont
getAscender	src/core/fxfont.cpp	/^float FXGlyphSet::getAscender() const {$/;"	f	class:FXGlyphSet
getBackgroundColour	src/core/ui/ui.cpp	/^vec4 UI::getBackgroundColour() {$/;"	f	class:UI
getBestMatchIndex	src/summarizer.cpp	/^int Summarizer::getBestMatchIndex(const std::string& input) const {$/;"	f	class:Summarizer
getBestMatchStr	src/summarizer.cpp	/^const std::string& Summarizer::getBestMatchStr(const std::string& str) const {$/;"	f	class:Summarizer
getBool	src/core/conffile.cpp	/^bool ConfEntry::getBool() {$/;"	f	class:ConfEntry
getBool	src/core/conffile.cpp	/^bool ConfFile::getBool(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getBool	src/core/conffile.cpp	/^bool ConfSection::getBool(const std::string& key) {$/;"	f	class:ConfSection
getBounds	src/slider.cpp	/^const Bounds2D& PositionSlider::getBounds() const {$/;"	f	class:PositionSlider
getBufferFromHere	src/core/ftgl/FTUnicode.h	/^    const T* getBufferFromHere() const { return curPos; }$/;"	f	class:FTUnicodeStringItr
getCPUMillis	src/core/timer.cpp	/^Uint32 GLTimer::getCPUMillis() const {$/;"	f	class:GLTimer
getChildIndex	src/core/quadtree.cpp	/^int QuadNode::getChildIndex(const vec2 & pos) const{$/;"	f	class:QuadNode
getClipboardText	src/core/sdlapp.cpp	/^bool SDLApp::getClipboardText(std::string& text) {$/;"	f	class:SDLApp
getColour	src/summarizer.cpp	/^vec3 Summarizer::getColour() {$/;"	f	class:Summarizer
getCommand	src/core/ui/console.cpp	/^UIConsoleCommand* UIConsole::getCommand(const std::string& name) {$/;"	f	class:UIConsole
getComment	src/core/shader_common.cpp	/^const std::string& ShaderUniform::getComment() const {$/;"	f	class:ShaderUniform
getConfFile	src/core/conffile.cpp	/^ConfFile* ConfSection::getConfFile() {$/;"	f	class:ConfSection
getCorner	src/core/fxfont.h	/^    const vec2& getCorner() const { return corner; };$/;"	f	class:FXGlyph
getCurrentDir	src/core/ui/file_selector.cpp	/^const std::string& UIFileSelector::getCurrentDir() const {$/;"	f	class:UIFileSelector
getDefault	src/core/logger.cpp	/^Logger* Logger::getDefault() {$/;"	f	class:Logger
getDescender	src/core/fxfont.cpp	/^float FXFont::getDescender() const {$/;"	f	class:FXFont
getDescender	src/core/fxfont.cpp	/^float FXGlyphSet::getDescender() const {$/;"	f	class:FXGlyphSet
getDimensions	src/core/fxfont.h	/^    const vec2& getDimensions() const { return dims; };$/;"	f	class:FXGlyph
getDir	src/core/resource.cpp	/^std::string ResourceManager::getDir() {$/;"	f	class:ResourceManager
getElement	src/core/ui/layout.h	/^    UIElement* getElement(int index) { return elements[index]; };$/;"	f	class:UILayout
getElementCount	src/core/ui/layout.h	/^    int getElementCount() { return elements.size(); };$/;"	f	class:UILayout
getElementName	src/core/ui/element.cpp	/^const std::string& UIElement::getElementName() const {$/;"	f	class:UIElement
getElementName	src/core/ui/element.cpp	/^const std::string& UIElement::getElementName(int type) {$/;"	f	class:UIElement
getEntries	src/core/conffile.cpp	/^ConfEntryList* ConfFile::getEntries(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getEntries	src/core/conffile.cpp	/^ConfEntryList* ConfSection::getEntries(const std::string& key) {$/;"	f	class:ConfSection
getEntry	src/core/conffile.cpp	/^ConfEntry* ConfFile::getEntry(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getEntry	src/core/conffile.cpp	/^ConfEntry* ConfSection::getEntry(const std::string& key) {$/;"	f	class:ConfSection
getFTFace	src/core/fxfont.h	/^    FT_Face getFTFace() const { return ftface; }$/;"	f	class:FXGlyphSet
getFilename	src/core/conffile.cpp	/^std::string ConfFile::getFilename() {$/;"	f	class:ConfFile
getFloat	src/core/conffile.cpp	/^float ConfEntry::getFloat() {$/;"	f	class:ConfEntry
getFloat	src/core/conffile.cpp	/^float ConfFile::getFloat(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getFloat	src/core/conffile.cpp	/^float ConfSection::getFloat(const std::string& key) {$/;"	f	class:ConfSection
getFontFile	src/core/fxfont.cpp	/^const std::string& FXFont::getFontFile() const {$/;"	f	class:FXFont
getFontFile	src/core/fxfont.h	/^    const std::string& getFontFile() const { return fontfile; }$/;"	f	class:FXGlyphSet
getFontSize	src/core/fxfont.cpp	/^int FXFont::getFontSize() const {$/;"	f	class:FXFont
getFullscreenResolution	src/core/display.cpp	/^void SDLAppDisplay::getFullscreenResolution(int& width, int& height) {$/;"	f	class:SDLAppDisplay
getGLMillis	src/core/timer.cpp	/^Uint32 GLTimer::getGLMillis() const {$/;"	f	class:GLTimer
getGlyph	src/core/fxfont.cpp	/^FXGlyph* FXGlyphSet::getGlyph(unsigned int chr) {$/;"	f	class:FXGlyphSet
getGroupSummarizer	src/logstalgia.cpp	/^Summarizer* Logstalgia::getGroupSummarizer(LogEntry* le) {$/;"	f	class:Logstalgia
getHeight	src/core/fxfont.h	/^    int getHeight() const { return height; };$/;"	f	class:FXGlyph
getHistory	src/core/logger.cpp	/^const std::deque<LoggerMessage>& Logger::getHistory() const {$/;"	f	class:Logger
getInnerRect	src/core/ui/layout.cpp	/^vec2 UILayout::getInnerRect() {$/;"	f	class:UILayout
getInnerRect	src/core/ui/scroll_layout.cpp	/^vec2 UIScrollLayout::getInnerRect() {$/;"	f	class:UIScrollLayout
getInt	src/core/conffile.cpp	/^int ConfEntry::getInt() {$/;"	f	class:ConfEntry
getInt	src/core/conffile.cpp	/^int ConfFile::getInt(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getInt	src/core/conffile.cpp	/^int ConfSection::getInt(const std::string& key) {$/;"	f	class:ConfSection
getItemsAt	src/core/quadtree.cpp	/^int QuadNode::getItemsAt(std::set<QuadItem*>& itemset, vec2 pos) {$/;"	f	class:QuadNode
getItemsAt	src/core/quadtree.cpp	/^int QuadTree::getItemsAt(std::set<QuadItem*>& itemset, vec2 pos) {$/;"	f	class:QuadTree
getItemsInBounds	src/core/quadtree.cpp	/^int QuadNode::getItemsInBounds(std::set<QuadItem*>& itemset, Bounds2D& bounds) const{$/;"	f	class:QuadNode
getItemsInBounds	src/core/quadtree.cpp	/^int QuadTree::getItemsInBounds(std::set<QuadItem*>& itemset, Bounds2D& bounds) const{$/;"	f	class:QuadTree
getItemsInFrustum	src/core/quadtree.cpp	/^int QuadNode::getItemsInFrustum(std::set<QuadItem*>& itemset, Frustum& frustum) {$/;"	f	class:QuadNode
getItemsInFrustum	src/core/quadtree.cpp	/^int QuadTree::getItemsInFrustum(std::set<QuadItem*>& itemset, Frustum& frustum) {$/;"	f	class:QuadTree
getLabel	src/core/ui/layout.cpp	/^UILabel* UILabelledElement::getLabel() {$/;"	f	class:UILabelledElement
getLayout	src/core/ui/group.h	/^    UILayout* getLayout() { return layout; };$/;"	f	class:UIGroup
getLayout	src/core/ui/layout.cpp	/^UILayout* UILabelledElement::getLayout() {$/;"	f	class:UILabelledElement
getLayout	src/core/ui/subgroup.h	/^    UILayout* getLayout() const { return layout; };$/;"	f	class:UISubGroup
getLeavesInFrustum	src/core/quadtree.cpp	/^void QuadNode::getLeavesInFrustum(std::set<QuadNode*>& nodeset, Frustum& frustum) {$/;"	f	class:QuadNode
getLeavesInFrustum	src/core/quadtree.cpp	/^void QuadTree::getLeavesInFrustum(std::set<QuadNode*>& nodeset, Frustum& frustum) {$/;"	f	class:QuadTree
getLength	src/core/shader_common.cpp	/^size_t Vec2ArrayShaderUniform::getLength() const {$/;"	f	class:Vec2ArrayShaderUniform
getLength	src/core/shader_common.cpp	/^size_t Vec3ArrayShaderUniform::getLength() const {$/;"	f	class:Vec3ArrayShaderUniform
getLength	src/core/shader_common.cpp	/^size_t Vec4ArrayShaderUniform::getLength() const {$/;"	f	class:Vec4ArrayShaderUniform
getLevel	src/core/logger.h	/^    int getLevel() const { return level; }$/;"	f	class:Logger
getLineNumber	src/core/conffile.cpp	/^int ConfEntry::getLineNumber() {$/;"	f	class:ConfEntry
getLineNumber	src/core/conffile.cpp	/^int ConfSection::getLineNumber() {$/;"	f	class:ConfSection
getLocation	src/core/shader_common.cpp	/^int ShaderUniform::getLocation() {$/;"	f	class:ShaderUniform
getLog	src/logstalgia.cpp	/^BaseLog* Logstalgia::getLog() {$/;"	f	class:Logstalgia
getMargin	src/core/ui/element.h	/^    virtual vec4 getMargin() const { return margin; };$/;"	f	class:UIElement
getMargin	src/core/ui/scroll_layout.cpp	/^vec4 UIScrollLayout::getMargin() const {$/;"	f	class:UIScrollLayout
getMaxHeight	src/core/fxfont.cpp	/^float FXFont::getMaxHeight() const {$/;"	f	class:FXFont
getMaxHeight	src/core/fxfont.cpp	/^float FXGlyphSet::getMaxHeight() const {$/;"	f	class:FXGlyphSet
getMaxWidth	src/core/fxfont.cpp	/^float FXFont::getMaxWidth() const {$/;"	f	class:FXFont
getMaxWidth	src/core/fxfont.cpp	/^float FXGlyphSet::getMaxWidth() const {$/;"	f	class:FXGlyphSet
getMessageCount	src/core/logger.cpp	/^int Logger::getMessageCount() {$/;"	f	class:Logger
getMiddlePosY	src/summarizer.cpp	/^float Summarizer::getMiddlePosY(const std::string& str) const {$/;"	f	class:Summarizer
getModifiers	src/core/ui/element.cpp	/^void UIElement::getModifiers(bool& left_ctrl, bool& left_shift) {$/;"	f	class:UIElement
getName	src/core/conffile.cpp	/^std::string ConfEntry::getName() {$/;"	f	class:ConfEntry
getName	src/core/conffile.cpp	/^std::string ConfSection::getName() {$/;"	f	class:ConfSection
getName	src/core/shader_common.cpp	/^const std::string& ShaderUniform::getName() const {$/;"	f	class:ShaderUniform
getName	src/core/timer.cpp	/^const std::string& GLTimer::getName() const {$/;"	f	class:GLTimer
getName	src/core/ui/console.cpp	/^const std::string& UIConsoleCommand::getName() const {$/;"	f	class:UIConsoleCommand
getNextLine	src/core/seeklog.cpp	/^bool SeekLog::getNextLine(std::string& line) {$/;"	f	class:SeekLog
getNextLine	src/core/seeklog.cpp	/^bool StreamLog::getNextLine(std::string& line) {$/;"	f	class:StreamLog
getNextLine	src/core/seeklog.h	/^    virtual bool getNextLine(std::string& line) { return false; };$/;"	f	class:BaseLog
getNextLineAt	src/core/seeklog.cpp	/^bool SeekLog::getNextLineAt(std::string& line, float percent) {$/;"	f	class:SeekLog
getObjectSource	src/core/shader_common.cpp	/^const std::string& AbstractShaderPass::getObjectSource() {$/;"	f	class:AbstractShaderPass
getPath	src/core/ui/file_selector.h	/^    const std::string& getPath() const { return path; };$/;"	f	class:UIFileSelectorLabel
getPercent	src/core/seeklog.cpp	/^float SeekLog::getPercent() {$/;"	f	class:SeekLog
getPointer	src/core/seeklog.cpp	/^std::streampos SeekLog::getPointer() {$/;"	f	class:SeekLog
getPos	src/core/mousecursor.h	/^    vec2 getPos() const { return mousepos; }$/;"	f	class:MouseCursor
getPosY	src/summarizer.cpp	/^float Summarizer::getPosY(const std::string& str) const {$/;"	f	class:Summarizer
getProgram	src/core/shader_common.cpp	/^unsigned int AbstractShader::getProgram() {$/;"	f	class:AbstractShader
getProgress	src/ball.cpp	/^float ProjectedBall::getProgress() const {$/;"	f	class:ProjectedBall
getRect	src/core/ui/element.h	/^    virtual vec2 getRect() { return rect; };$/;"	f	class:UIElement
getRect	src/core/ui/label.cpp	/^vec2 UILabel::getRect() {$/;"	f	class:UILabel
getRect	src/core/ui/layout.cpp	/^vec2 UILayout::getRect() {$/;"	f	class:UILayout
getRect	src/core/ui/scroll_layout.cpp	/^vec2 UIScrollLayout::getRect() {$/;"	f	class:UIScrollLayout
getScreenPercent	src/summarizer.cpp	/^int Summarizer::getScreenPercent() {$/;"	f	class:Summarizer
getScrollRect	src/core/ui/scroll_layout.cpp	/^vec2 UIScrollLayout::getScrollRect() {$/;"	f	class:UIScrollLayout
getSection	src/core/conffile.cpp	/^ConfSection* ConfFile::getSection(const std::string& section) {$/;"	f	class:ConfFile
getSections	src/core/conffile.cpp	/^ConfSectionList* ConfFile::getSections(const std::string& section) {$/;"	f	class:ConfFile
getSelected	src/core/ui/ui.cpp	/^UIElement* UI::getSelected() {$/;"	f	class:UI
getSelectedOption	src/core/ui/select.cpp	/^UIOptionLabel* UISelect::getSelectedOption() {$/;"	f	class:UISelect
getSize	src/core/fxfont.h	/^    int getSize() const { return size; };$/;"	f	class:FXGlyphSet
getSolidColour	src/core/ui/ui.cpp	/^vec4 UI::getSolidColour() {$/;"	f	class:UI
getSource	src/core/shader_common.cpp	/^const std::string& ShaderException::getSource() const {$/;"	f	class:ShaderException
getSource	src/core/shader_common.cpp	/^const std::string& ShaderPart::getSource() {$/;"	f	class:ShaderPart
getString	src/core/conffile.cpp	/^std::string ConfEntry::getString() {$/;"	f	class:ConfEntry
getString	src/core/conffile.cpp	/^std::string ConfFile::getString(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getString	src/core/conffile.cpp	/^std::string ConfSection::getString(const std::string& key) {$/;"	f	class:ConfSection
getTarget	src/paddle.cpp	/^RequestBall* Paddle::getTarget() {$/;"	f	class:Paddle
getTextColour	src/core/ui/ui.cpp	/^vec4 UI::getTextColour() {$/;"	f	class:UI
getTintColour	src/core/ui/ui.cpp	/^vec4 UI::getTintColour() {$/;"	f	class:UI
getType	src/core/shader_common.h	/^    int getType() { return shader_object_type; };$/;"	f	class:AbstractShaderPass
getType	src/core/shader_common.h	/^    int getType() { return uniform_type; };$/;"	f	class:ShaderUniform
getType	src/core/ui/button.h	/^    int getType() const { return UI_BUTTON; }$/;"	f	class:UIButton
getType	src/core/ui/checkbox.h	/^    int getType() const { return UI_CHECKBOX; };$/;"	f	class:UICheckbox
getType	src/core/ui/colour.h	/^    int getType() const { return UI_COLOUR; };$/;"	f	class:UIColour
getType	src/core/ui/element.h	/^    virtual int getType() const { return UI_ELEMENT; };$/;"	f	class:UIElement
getType	src/core/ui/group.h	/^    int getType() const { return UI_GROUP; };$/;"	f	class:UIGroup
getType	src/core/ui/image.h	/^    int getType() const { return UI_IMAGE; };$/;"	f	class:UIImage
getType	src/core/ui/label.h	/^    int getType() const { return UI_LABEL; }$/;"	f	class:UILabel
getType	src/core/ui/layout.h	/^    int getType() const { return UI_LAYOUT; };$/;"	f	class:UILayout
getType	src/core/ui/scroll_bar.h	/^    int getType() const { return UI_SCROLL_BAR; };$/;"	f	class:UIScrollBar
getType	src/core/ui/select.h	/^    int getType() const { return UI_SELECT; };$/;"	f	class:UISelect
getType	src/core/ui/slider.h	/^    int getType() const { return UI_SLIDER; };$/;"	f	class:UISlider
getUniform	src/core/shader_common.cpp	/^ShaderUniform* AbstractShader::getUniform(const std::string& name) {$/;"	f	class:AbstractShader
getUniformLocation	src/core/shader.cc	/^int Shader::getUniformLocation(const std::string& uniform_name) {$/;"	f	class:Shader
getUniforms	src/core/shader_common.cpp	/^std::list<ShaderUniform*>& AbstractShaderPass::getUniforms() {$/;"	f	class:AbstractShaderPass
getUniforms	src/core/shader_common.cpp	/^void AbstractShader::getUniforms(std::list<ShaderUniform*>& uniform_list) {$/;"	f	class:AbstractShader
getValue	src/core/shader_common.cpp	/^bool& BoolShaderUniform::getValue() {$/;"	f	class:BoolShaderUniform
getValue	src/core/shader_common.cpp	/^const std::vector<vec2>& Vec2ArrayShaderUniform::getValue() {$/;"	f	class:Vec2ArrayShaderUniform
getValue	src/core/shader_common.cpp	/^const std::vector<vec3>& Vec3ArrayShaderUniform::getValue() {$/;"	f	class:Vec3ArrayShaderUniform
getValue	src/core/shader_common.cpp	/^const std::vector<vec4>& Vec4ArrayShaderUniform::getValue() {$/;"	f	class:Vec4ArrayShaderUniform
getValue	src/core/shader_common.cpp	/^float& FloatShaderUniform::getValue() {$/;"	f	class:FloatShaderUniform
getValue	src/core/shader_common.cpp	/^int& IntShaderUniform::getValue() {$/;"	f	class:IntShaderUniform
getValue	src/core/shader_common.cpp	/^int& Sampler1DShaderUniform::getValue() {$/;"	f	class:Sampler1DShaderUniform
getValue	src/core/shader_common.cpp	/^int& Sampler2DShaderUniform::getValue() {$/;"	f	class:Sampler2DShaderUniform
getValue	src/core/shader_common.cpp	/^mat3& Mat3ShaderUniform::getValue() {$/;"	f	class:Mat3ShaderUniform
getValue	src/core/shader_common.cpp	/^mat4& Mat4ShaderUniform::getValue() {$/;"	f	class:Mat4ShaderUniform
getValue	src/core/shader_common.cpp	/^vec2& Vec2ShaderUniform::getValue() {$/;"	f	class:Vec2ShaderUniform
getValue	src/core/shader_common.cpp	/^vec3& Vec3ShaderUniform::getValue() {$/;"	f	class:Vec3ShaderUniform
getValue	src/core/shader_common.cpp	/^vec4& Vec4ShaderUniform::getValue() {$/;"	f	class:Vec4ShaderUniform
getValue	src/core/timer.cpp	/^GLuint64 GLTimer::getValue() const {$/;"	f	class:GLTimer
getVec2	src/core/conffile.cpp	/^vec2 ConfEntry::getVec2() {$/;"	f	class:ConfEntry
getVec3	src/core/conffile.cpp	/^vec3 ConfEntry::getVec3() {$/;"	f	class:ConfEntry
getVec3	src/core/conffile.cpp	/^vec3 ConfFile::getVec3(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getVec3	src/core/conffile.cpp	/^vec3 ConfSection::getVec3(const std::string& key) {$/;"	f	class:ConfSection
getVec4	src/core/conffile.cpp	/^vec4 ConfEntry::getVec4() {$/;"	f	class:ConfEntry
getVec4	src/core/conffile.cpp	/^vec4 ConfFile::getVec4(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
getVec4	src/core/conffile.cpp	/^vec4 ConfSection::getVec4(const std::string& key) {$/;"	f	class:ConfSection
getWidth	src/core/fxfont.cpp	/^float FXFont::getWidth(const std::string& text) const {$/;"	f	class:FXFont
getWidth	src/core/fxfont.cpp	/^float FXGlyphSet::getWidth(const std::string& text) {$/;"	f	class:FXGlyphSet
getX	src/ball.cpp	/^float ProjectedBall::getX() {$/;"	f	class:ProjectedBall
getX	src/paddle.cpp	/^float Paddle::getX() {$/;"	f	class:Paddle
getY	src/paddle.cpp	/^float Paddle::getY() {$/;"	f	class:Paddle
get_sequence_1	src/core/utf8/core.h	/^    utf_error get_sequence_1(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
get_sequence_2	src/core/utf8/core.h	/^    utf_error get_sequence_2(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
get_sequence_3	src/core/utf8/core.h	/^    utf_error get_sequence_3(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
get_sequence_4	src/core/utf8/core.h	/^    utf_error get_sequence_4(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
glCheckError	src/core/gl.h	14;"	d
glCheckError	src/core/gl.h	19;"	d
gl_context	src/core/display.h	/^    SDL_GLContext gl_context;$/;"	m	class:SDLAppDisplay
glow_duration	src/settings.h	/^    float glow_duration;$/;"	m	class:LogstalgiaSettings
glow_intensity	src/settings.h	/^    float glow_intensity;$/;"	m	class:LogstalgiaSettings
glow_multiplier	src/settings.h	/^    float glow_multiplier;$/;"	m	class:LogstalgiaSettings
glowtex	src/logstalgia.h	/^    TextureResource* glowtex;$/;"	m	class:Logstalgia
glyph_bitmap	src/core/fxfont.h	/^    FT_BitmapGlyph glyph_bitmap;$/;"	m	class:FXGlyph
glyphs	src/core/fxfont.h	/^    std::map<unsigned int, FXGlyph*> glyphs;$/;"	m	class:FXGlyphSet
glyphset	src/core/fxfont.h	/^    FXGlyphSet* glyphset;$/;"	m	class:FXFont
grab	src/core/fxfont.cpp	/^FXFont FXFontManager::grab(std::string font_file, int size, int dpi) {$/;"	f	class:FXFontManager
grab	src/core/shader.cc	/^Shader* ShaderManager::grab(const std::string& shader_prefix) {$/;"	f	class:ShaderManager
grab	src/core/texture.cpp	/^TextureResource* TextureManager::grab(const std::string& filename, bool mipmaps, GLint wrap, bool external) {$/;"	f	class:TextureManager
grabFile	src/core/texture.cpp	/^TextureResource* TextureManager::grabFile(const std::string& filename, bool mipmaps, GLint wrap) {$/;"	f	class:TextureManager
grabShaderPass	src/core/shader.cc	/^AbstractShaderPass* Shader::grabShaderPass(unsigned int shader_object_type) {$/;"	f	class:Shader
granulaity	src/core/ui/element.cpp	/^double UIElement::granulaity(double initial, double scale) {$/;"	f	class:UIElement
groups	src/settings.h	/^    std::vector<std::string> groups;$/;"	m	class:LogstalgiaSettings
h	src/core/texture.h	/^    int w, h;$/;"	m	class:TextureResource
handleEvent	src/core/sdlapp.cpp	/^bool SDLApp::handleEvent(SDL_Event& event) {$/;"	f	class:SDLApp
hasBounced	src/ball.h	/^    bool hasBounced() const { return has_bounced; }$/;"	f	class:ProjectedBall
hasEntry	src/core/conffile.cpp	/^bool ConfFile::hasEntry(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
hasFocus	src/core/mousecursor.cpp	/^bool MouseCursor::hasFocus() const {$/;"	f	class:MouseCursor
hasSection	src/core/conffile.cpp	/^bool ConfFile::hasSection(const std::string& section) {$/;"	f	class:ConfFile
hasValue	src/core/conffile.cpp	/^bool ConfEntry::hasValue() {$/;"	f	class:ConfEntry
hasValue	src/core/conffile.cpp	/^bool ConfFile::hasValue(const std::string& section, const std::string& key) {$/;"	f	class:ConfFile
hasValue	src/core/conffile.cpp	/^bool ConfSection::hasValue(const std::string& key) {$/;"	f	class:ConfSection
has_bounced	src/ball.h	/^    bool has_bounced;$/;"	m	class:ProjectedBall
height	src/core/bounds.h	/^    float height() const {$/;"	f	class:Bounds2D
height	src/core/bounds.h	/^    float height() {$/;"	f	class:Bounds3D
height	src/core/display.h	/^    int width, height;$/;"	m	class:SDLAppDisplay
height	src/core/fxfont.h	/^    int  height;$/;"	m	class:FXGlyph
height	src/paddle.h	/^    int width, height;$/;"	m	class:Paddle
help	src/settings.cpp	/^void LogstalgiaSettings::help(bool extended_help) {$/;"	f	class:LogstalgiaSettings
hidden	src/core/mousecursor.h	/^    bool hidden;$/;"	m	class:MouseCursor
hidden	src/core/ui/element.h	/^    bool  hidden;$/;"	m	class:UIElement
hide	src/core/ui/element.h	/^    void hide() { hidden=true; };$/;"	f	class:UIElement
hide	src/textarea.cpp	/^void TextArea::hide() {$/;"	f	class:TextArea
hide_paddle	src/settings.h	/^    bool hide_paddle;$/;"	m	class:LogstalgiaSettings
hide_paddle_tokens	src/settings.h	/^    bool hide_paddle_tokens;$/;"	m	class:LogstalgiaSettings
hide_response_code	src/settings.h	/^    bool hide_response_code;$/;"	m	class:LogstalgiaSettings
hide_url_prefix	src/settings.h	/^    bool hide_url_prefix;$/;"	m	class:LogstalgiaSettings
highSurrogateEnd	src/core/ftgl/FTUnicode.h	/^    static const unsigned long highSurrogateEnd;$/;"	m	class:FTUnicodeStringItr
highSurrogateEnd	src/core/ftgl/FTUnicode.h	/^const unsigned long FTUnicodeStringItr<T>::highSurrogateEnd = 0xDBFF;$/;"	m	class:FTUnicodeStringItr
highSurrogateShift	src/core/ftgl/FTUnicode.h	/^    static const unsigned long highSurrogateShift;$/;"	m	class:FTUnicodeStringItr
highSurrogateShift	src/core/ftgl/FTUnicode.h	/^const unsigned long FTUnicodeStringItr<T>::highSurrogateShift = 10;$/;"	m	class:FTUnicodeStringItr
highSurrogateStart	src/core/ftgl/FTUnicode.h	/^    static const unsigned long highSurrogateStart;$/;"	m	class:FTUnicodeStringItr
highSurrogateStart	src/core/ftgl/FTUnicode.h	/^const unsigned long FTUnicodeStringItr<T>::highSurrogateStart = 0xD800;$/;"	m	class:FTUnicodeStringItr
highscore	src/logstalgia.h	/^    int highscore;$/;"	m	class:Logstalgia
hist_capacity	src/core/logger.h	/^    int hist_capacity;$/;"	m	class:Logger
history	src/core/logger.h	/^    std::deque<LoggerMessage> history;$/;"	m	class:Logger
history	src/core/ui/console.h	/^    UIScrollLayout* history;$/;"	m	class:UIConsole
history_index	src/core/ui/console.h	/^    int history_index;$/;"	m	class:UIConsolePrompt
horizontal	src/core/ui/layout.h	/^    bool horizontal;$/;"	m	class:UILayout
horizontal	src/core/ui/scroll_bar.h	/^    bool horizontal;$/;"	m	class:UIScrollBar
horizontal_scrollbar	src/core/ui/scroll_layout.h	/^    UIScrollBar* horizontal_scrollbar;$/;"	m	class:UIScrollLayout
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
hostname	src/logentry.h	/^    std::string hostname;$/;"	m	class:LogEntry
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
hue	src/core/ui/colour.h	/^    float hue;$/;"	m	class:UIColour
icol	src/summarizer.h	/^    vec3* icol;$/;"	m	class:SummItem
id	src/core/vbo.h	/^    GLuint id;$/;"	m	class:VBO
idle	src/core/mousecursor.h	/^    float idle;$/;"	m	class:MouseCursor
idle	src/core/ui/action.h	/^    virtual void idle() {};$/;"	f	class:UIAction
idle	src/core/ui/checkbox.cpp	/^void UICheckbox::idle() {$/;"	f	class:UICheckbox
idle	src/core/ui/element.h	/^    virtual void idle() {};$/;"	f	class:UIElement
idle	src/core/ui/label.cpp	/^void UILabel::idle() {$/;"	f	class:UILabel
idle	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::idle() {$/;"	f	class:UIScrollBar
idle	src/core/ui/slider.cpp	/^void UISlider::idle() {$/;"	f	class:UISlider
image_path	src/core/ui/image.h	/^    std::string image_path;$/;"	m	class:UIImage
imagetex	src/core/ui/image.h	/^    TextureResource* imagetex;$/;"	m	class:UIImage
importDisplaySettings	src/core/settings.cpp	/^void SDLAppSettings::importDisplaySettings(ConfFile& conffile) {$/;"	f	class:SDLAppSettings
importLogstalgiaSettings	src/settings.cpp	/^void LogstalgiaSettings::importLogstalgiaSettings(ConfFile& conffile, ConfSection* settings) {$/;"	f	class:LogstalgiaSettings
includeFile	src/core/shader_common.cpp	/^void AbstractShader::includeFile(unsigned int shader_object_type, const std::string& filename) {$/;"	f	class:AbstractShader
includeFile	src/core/shader_common.cpp	/^void AbstractShaderPass::includeFile(const std::string& filename) {$/;"	f	class:AbstractShaderPass
includeSource	src/core/shader_common.cpp	/^void AbstractShader::includeSource(unsigned int shader_object_type, const std::string& source) {$/;"	f	class:AbstractShader
includeSource	src/core/shader_common.cpp	/^void AbstractShaderPass::includeSource(const std::string& string) {$/;"	f	class:AbstractShaderPass
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
incrementf	src/summarizer.h	/^    float incrementf;$/;"	m	class:Summarizer
info	src/logstalgia.h	/^    bool info;$/;"	m	class:Logstalgia
infoLog	src/core/logger.cpp	/^void infoLog(const char *str, ...) {$/;"	f
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infowindow	src/logstalgia.h	/^    TextArea infowindow;$/;"	m	class:Logstalgia
init	src/ball.cpp	/^void ProjectedBall::init(const vec2& pos, const vec2& vel, const vec3& colour, int dest_x, float size) {$/;"	f	class:ProjectedBall
init	src/core/display.cpp	/^void SDLAppDisplay::init(std::string window_title, int width, int height, bool fullscreen) {$/;"	f	class:SDLAppDisplay
init	src/core/fxfont.cpp	/^void FXFont::init() {$/;"	f	class:FXFont
init	src/core/fxfont.cpp	/^void FXFontManager::init() {$/;"	f	class:FXFontManager
init	src/core/fxfont.cpp	/^void FXGlyphSet::init() {$/;"	f	class:FXGlyphSet
init	src/core/logger.cpp	/^void Logger::init(int level, FILE* stream, int hist_capacity) {$/;"	f	class:Logger
init	src/core/sdlapp.h	/^    virtual void init() {};$/;"	f	class:SDLApp
init	src/core/ui/image.cpp	/^void UIImage::init() {$/;"	f	class:UIImage
init	src/core/vbo.h	/^    void init() {$/;"	f	class:VBO
init	src/logstalgia.cpp	/^void Logstalgia::init() {$/;"	f	class:Logstalgia
initConsole	src/core/sdlapp.cpp	/^void SDLApp::initConsole() {$/;"	f	class:SDLApp
initPaddles	src/logstalgia.cpp	/^void Logstalgia::initPaddles() {$/;"	f	class:Logstalgia
initRequestBalls	src/logstalgia.cpp	/^void Logstalgia::initRequestBalls() {$/;"	f	class:Logstalgia
init_tz	src/core/timezone.cpp	/^void init_tz() {$/;"	f
initialized	src/core/fxfont.h	/^    bool initialized() const { return (glyphset!=0); }$/;"	f	class:FXFont
initialized	src/core/shader_common.h	/^    bool initialized;$/;"	m	class:ShaderUniform
inner_rect	src/core/ui/scroll_layout.h	/^    vec2 inner_rect;$/;"	m	class:UIScrollLayout
install_sh	Makefile	/^install_sh = \/home\/lieanu\/ctf\/bctf-final\/Logstalgia\/build-aux\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
interaction	src/core/ui/ui.h	/^    bool interaction;$/;"	m	class:UI
internal	src/core/utf8/core.h	/^namespace internal$/;"	n	namespace:utf8
intersects	src/ball.cpp	/^bool Line::intersects(Line& l, vec2 *p) {$/;"	f	class:Line
intersects	src/core/frustum.cpp	/^bool Frustum::intersects(const Bounds2D& bounds, float z) const {$/;"	f	class:Frustum
intersects	src/core/frustum.cpp	/^bool Frustum::intersects(const Bounds3D& bounds) const {$/;"	f	class:Frustum
invalidValueException	src/core/conffile.cpp	/^void ConfFile::invalidValueException(ConfEntry* entry) {$/;"	f	class:ConfFile
invalid_code_point	src/core/utf8/checked.h	/^        invalid_code_point(uint32_t cp) : cp(cp) {}$/;"	f	class:utf8::invalid_code_point
invalid_code_point	src/core/utf8/checked.h	/^    class invalid_code_point : public std::exception {$/;"	c	namespace:utf8
invalid_utf16	src/core/utf8/checked.h	/^        invalid_utf16 (uint16_t u) : u16(u) {}$/;"	f	class:utf8::invalid_utf16
invalid_utf16	src/core/utf8/checked.h	/^    class invalid_utf16 : public std::exception {$/;"	c	namespace:utf8
invalid_utf8	src/core/utf8/checked.h	/^        invalid_utf8 (uint8_t u) : u8(u) {}$/;"	f	class:utf8::invalid_utf8
invalid_utf8	src/core/utf8/checked.h	/^    class invalid_utf8 : public std::exception {$/;"	c	namespace:utf8
inverted	src/core/ui/scroll_bar.h	/^    bool inverted;$/;"	m	class:UIScrollBar
inverted	src/core/ui/solid_layout.h	/^    bool inverted;$/;"	m	class:UISolidLayout
ipSummarizer	src/logstalgia.h	/^    Summarizer* ipSummarizer;$/;"	m	class:Logstalgia
isBaked	src/core/shader_common.h	/^    bool isBaked() const    { return baked; };$/;"	f	class:ShaderUniform
isBool	src/core/conffile.cpp	/^bool ConfEntry::isBool() {$/;"	f	class:ConfEntry
isChecked	src/core/ui/checkbox.cpp	/^bool UIBoolCheckbox::isChecked() {$/;"	f	class:UIBoolCheckbox
isChecked	src/core/ui/checkbox.cpp	/^bool UIFloatCheckbox::isChecked() {$/;"	f	class:UIFloatCheckbox
isChecked	src/core/ui/checkbox.h	/^    virtual bool isChecked() { return false; };$/;"	f	class:UICheckbox
isColoured	src/summarizer.cpp	/^bool Summarizer::isColoured() {$/;"	f	class:Summarizer
isDir	src/core/ui/file_selector.h	/^    bool isDir() const { return directory; };$/;"	f	class:UIFileSelectorLabel
isEditable	src/core/ui/element.h	/^    virtual bool isEditable()   { return editable; };$/;"	f	class:UIElement
isEmpty	src/core/shader_common.cpp	/^bool AbstractShader::isEmpty() {$/;"	f	class:AbstractShader
isEmpty	src/core/shader_common.cpp	/^bool AbstractShaderPass::isEmpty() {$/;"	f	class:AbstractShaderPass
isFinished	src/ball.cpp	/^bool ProjectedBall::isFinished() const {$/;"	f	class:ProjectedBall
isFinished	src/core/sdlapp.cpp	/^bool SDLApp::isFinished() {$/;"	f	class:SDLApp
isFinished	src/core/seeklog.cpp	/^bool SeekLog::isFinished() {$/;"	f	class:SeekLog
isFinished	src/core/seeklog.cpp	/^bool StreamLog::isFinished() {$/;"	f	class:StreamLog
isFinished	src/core/seeklog.h	/^    virtual bool isFinished() { return false; };$/;"	f	class:BaseLog
isFloat	src/core/conffile.cpp	/^bool ConfEntry::isFloat() {$/;"	f	class:ConfEntry
isHidden	src/core/mousecursor.cpp	/^bool MouseCursor::isHidden() const {$/;"	f	class:MouseCursor
isInitialized	src/core/shader_common.h	/^    bool  isInitialized() const { return initialized; };$/;"	f	class:ShaderUniform
isInt	src/core/conffile.cpp	/^bool ConfEntry::isInt() {$/;"	f	class:ConfEntry
isModified	src/core/shader_common.h	/^    bool isModified() const { return modified; };$/;"	f	class:ShaderUniform
isScrollable	src/core/ui/element.h	/^    virtual bool isScrollable() { return scrollable; };$/;"	f	class:UIElement
isScrollable	src/core/ui/scroll_bar.cpp	/^bool UIScrollBar::isScrollable() {$/;"	f	class:UIScrollBar
isScrollable	src/core/ui/scroll_layout.cpp	/^bool UIScrollLayout::isScrollable() {$/;"	f	class:UIScrollLayout
isSelectable	src/core/ui/element.h	/^    virtual bool isSelectable() { return selectable; };$/;"	f	class:UIElement
isSystemCursor	src/core/mousecursor.cpp	/^bool MouseCursor::isSystemCursor() const {$/;"	f	class:MouseCursor
isValid	src/core/regex.cpp	/^bool Regex::isValid() {$/;"	f	class:Regex
isVec2	src/core/conffile.cpp	/^bool ConfEntry::isVec2() {$/;"	f	class:ConfEntry
isVec3	src/core/conffile.cpp	/^bool ConfEntry::isVec3() {$/;"	f	class:ConfEntry
isVec4	src/core/conffile.cpp	/^bool ConfEntry::isVec4() {$/;"	f	class:ConfEntry
isVisible	src/core/mousecursor.cpp	/^bool MouseCursor::isVisible() const {$/;"	f	class:MouseCursor
isVisible	src/core/ui/element.h	/^    virtual bool isVisible() const { return !hidden; }$/;"	f	class:UIElement
is_bom	src/core/utf8/core.h	/^    inline bool is_bom (octet_iterator it)$/;"	f	namespace:utf8
is_code_point_valid	src/core/utf8/core.h	/^    inline bool is_code_point_valid(u32 cp)$/;"	f	namespace:utf8::internal
is_overlong_sequence	src/core/utf8/core.h	/^    inline bool is_overlong_sequence(uint32_t cp, int length)$/;"	f	namespace:utf8::internal
is_root	src/summarizer.h	/^    bool is_root;$/;"	m	class:SummNode
is_surrogate	src/core/utf8/core.h	/^    inline bool is_surrogate(u16 cp)$/;"	f	namespace:utf8::internal
is_trail	src/core/utf8/core.h	/^    inline bool is_trail(octet_type oc)$/;"	f	namespace:utf8::internal
is_valid	src/core/utf8/core.h	/^    inline bool is_valid(octet_iterator start, octet_iterator end)$/;"	f	namespace:utf8
it	src/core/utf8/checked.h	/^      octet_iterator it;$/;"	m	class:utf8::iterator
it	src/core/utf8/unchecked.h	/^            octet_iterator it;$/;"	m	class:utf8::unchecked::iterator
item_colour	src/summarizer.h	/^    vec3* item_colour;$/;"	m	class:Summarizer
item_count	src/core/quadtree.h	/^    int item_count;$/;"	m	class:QuadTree
items	src/core/quadtree.h	/^    std::list<QuadItem*> items;$/;"	m	class:QuadNode
items	src/summarizer.h	/^    std::vector<SummItem> items;$/;"	m	class:Summarizer
iterator	src/core/utf8/checked.h	/^      explicit iterator (const octet_iterator& octet_it,$/;"	f	class:utf8::iterator
iterator	src/core/utf8/checked.h	/^      iterator () {};$/;"	f	class:utf8::iterator
iterator	src/core/utf8/checked.h	/^    class iterator : public std::iterator <std::bidirectional_iterator_tag, uint32_t> {$/;"	c	namespace:utf8
iterator	src/core/utf8/unchecked.h	/^            explicit iterator (const octet_iterator& octet_it): it(octet_it) {}$/;"	f	class:utf8::unchecked::iterator
iterator	src/core/utf8/unchecked.h	/^            iterator () {};$/;"	f	class:utf8::unchecked::iterator
iterator	src/core/utf8/unchecked.h	/^          class iterator : public std::iterator <std::bidirectional_iterator_tag, uint32_t> { $/;"	c	namespace:utf8::unchecked
keyPress	src/core/sdlapp.h	/^    virtual void keyPress(SDL_KeyboardEvent *e) {};$/;"	f	class:SDLApp
keyPress	src/core/ui/console.cpp	/^bool UIConsolePrompt::keyPress(SDL_KeyboardEvent *e) {$/;"	f	class:UIConsolePrompt
keyPress	src/core/ui/element.h	/^    virtual bool keyPress(SDL_KeyboardEvent *e) { return false; };$/;"	f	class:UIElement
keyPress	src/core/ui/label.cpp	/^bool UIFloatLabel::keyPress(SDL_KeyboardEvent *e) {$/;"	f	class:UIFloatLabel
keyPress	src/core/ui/label.cpp	/^bool UIIntLabel::keyPress(SDL_KeyboardEvent *e) {$/;"	f	class:UIIntLabel
keyPress	src/core/ui/label.cpp	/^bool UILabel::keyPress(SDL_KeyboardEvent *e) {$/;"	f	class:UILabel
keyPress	src/core/ui/slider.cpp	/^bool UISlider::keyPress(SDL_KeyboardEvent *e) {$/;"	f	class:UISlider
keyPress	src/core/ui/ui.cpp	/^bool UI::keyPress(SDL_KeyboardEvent *e) {$/;"	f	class:UI
keyPress	src/logstalgia.cpp	/^void Logstalgia::keyPress(SDL_KeyboardEvent *e) {$/;"	f	class:Logstalgia
l	src/core/vectors.h	/^    vec2 l;$/;"	m	class:lerp2
l	src/core/vectors.h	/^    vec3 l;$/;"	m	class:lerp3
label	src/core/ui/button.h	/^    UILabel* label;$/;"	m	class:UIButton
label	src/core/ui/group.h	/^    UILabel* label;$/;"	m	class:UIGroupBar
label	src/core/ui/layout.h	/^    UILabel*  label;$/;"	m	class:UILabelledElement
label	src/core/ui/select.h	/^    UILabel* label;$/;"	m	class:UISelect
lastcol	src/paddle.h	/^    vec4 lastcol;$/;"	m	class:Paddle
lasttime	src/logstalgia.h	/^    time_t lasttime;$/;"	m	class:Logstalgia
layout	src/core/ui/group.h	/^    UILayout* layout;$/;"	m	class:UIGroup
layout	src/core/ui/layout.h	/^    UILayout* layout;$/;"	m	class:UILabelledElement
layout	src/core/ui/subgroup.h	/^    UILayout* layout;$/;"	m	class:UISubGroup
le	src/requestball.h	/^    LogEntry* le;$/;"	m	class:RequestBall
leftButtonPressed	src/core/mousecursor.cpp	/^bool MouseCursor::leftButtonPressed() const {$/;"	f	class:MouseCursor
leftClick	src/core/mousecursor.cpp	/^bool MouseCursor::leftClick() const {$/;"	f	class:MouseCursor
leftClick	src/core/mousecursor.cpp	/^void MouseCursor::leftClick(bool click) {$/;"	f	class:MouseCursor
left_click	src/core/mousecursor.h	/^    bool left_click;$/;"	m	class:MouseCursor
left_drag	src/core/ui/ui.h	/^    bool left_drag;$/;"	m	class:UI
left_pressed	src/core/ui/ui.h	/^    bool left_pressed;$/;"	m	class:UI
length	src/core/shader_common.h	/^    size_t length;$/;"	m	class:Vec2ArrayShaderUniform
length	src/core/shader_common.h	/^    size_t length;$/;"	m	class:Vec3ArrayShaderUniform
length	src/core/shader_common.h	/^    size_t length;$/;"	m	class:Vec4ArrayShaderUniform
lerp	src/core/vectors.h	/^    const vec2& lerp(float n) {$/;"	f	class:lerp2
lerp	src/core/vectors.h	/^    const vec3& lerp(float n) {$/;"	f	class:lerp3
lerp	src/core/vectors.h	/^    static vec2 lerp(const vec2& a, const vec2& b, float n) {$/;"	f	class:lerp2
lerp	src/core/vectors.h	/^    static vec3 lerp(const vec3& a, const vec3& b, float n) {$/;"	f	class:lerp3
lerp2	src/core/vectors.h	/^    lerp2() : vec2(), p(), l() {$/;"	f	class:lerp2
lerp2	src/core/vectors.h	/^class lerp2 : public glm::vec2 {$/;"	c
lerp3	src/core/vectors.h	/^    lerp3() : vec3(), p(), l() {$/;"	f	class:lerp3
lerp3	src/core/vectors.h	/^class lerp3 : public vec3 {$/;"	c
level	src/core/logger.h	/^    int level;$/;"	m	class:Logger
level	src/core/logger.h	/^    int level;$/;"	m	class:LoggerMessage
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
library	src/core/fxfont.h	/^    FT_Library library;$/;"	m	class:FXFontManager
lightness	src/core/ui/colour.h	/^    float lightness;$/;"	m	class:UIColour
line_lengths	src/ball.h	/^    std::vector<float> line_lengths;$/;"	m	class:ProjectedBall
lineno	src/core/conffile.h	/^    int lineno;$/;"	m	class:ConfEntry
lineno	src/core/conffile.h	/^    int lineno;$/;"	m	class:ConfFileException
lineno	src/core/conffile.h	/^    int lineno;$/;"	m	class:ConfSection
listid	src/core/quadtree.h	/^    GLuint listid;$/;"	m	class:QuadNode
listing	src/core/ui/file_selector.h	/^    UIScrollLayout* listing;$/;"	m	class:UIFileSelector
load	src/core/conffile.cpp	/^void ConfFile::load() {$/;"	f	class:ConfFile
load	src/core/conffile.cpp	/^void ConfFile::load(const std::string& conffile) {$/;"	f	class:ConfFile
load	src/core/shader.cc	/^void Shader::load() {$/;"	f	class:Shader
load	src/core/texture.cpp	/^void TextureResource::load(bool reload) {$/;"	f	class:TextureResource
loadPrefix	src/core/shader.cc	/^void Shader::loadPrefix() {$/;"	f	class:Shader
loadSourceFile	src/core/shader_common.cpp	/^void ShaderPart::loadSourceFile() {$/;"	f	class:ShaderPart
load_config	src/settings.h	/^    std::string load_config;$/;"	m	class:LogstalgiaSettings
local_tz	src/core/timezone.cpp	/^std::string local_tz;$/;"	v
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
location	src/core/shader_common.h	/^    int  location;$/;"	m	class:ShaderUniform
log_level	src/settings.h	/^    int log_level;$/;"	m	class:LogstalgiaSettings
log_levels	src/core/logger.cpp	/^std::map<int,std::string> log_levels = boost::assign::map_list_of$/;"	v
logfile	src/core/seeklog.h	/^    std::string logfile;$/;"	m	class:SeekLog
logfile	src/logstalgia.h	/^    std::string logfile;$/;"	m	class:Logstalgia
logger_level	src/core/logger.h	/^enum logger_level { LOG_LEVEL_OFF, LOG_LEVEL_ERROR, LOG_LEVEL_CONSOLE, LOG_LEVEL_INFO, LOG_LEVEL_SCRIPT, LOG_LEVEL_DEBUG, LOG_LEVEL_WARN, LOG_LEVEL_PEDANTIC };$/;"	g
logic	src/ball.cpp	/^void ProjectedBall::logic(float dt) {$/;"	f	class:ProjectedBall
logic	src/core/mousecursor.cpp	/^void MouseCursor::logic(float dt) {$/;"	f	class:MouseCursor
logic	src/core/sdlapp.h	/^    virtual void logic(float t, float dt) {};$/;"	f	class:SDLApp
logic	src/logstalgia.cpp	/^void Logstalgia::logic(float t, float dt) {$/;"	f	class:Logstalgia
logic	src/paddle.cpp	/^void Paddle::logic(float dt) {$/;"	f	class:Paddle
logic	src/requestball.cpp	/^int RequestBall::logic(float dt) {$/;"	f	class:RequestBall
logic	src/slider.cpp	/^void PositionSlider::logic(float dt) {$/;"	f	class:PositionSlider
logic	src/summarizer.cpp	/^void SummItem::logic(float dt) {$/;"	f	class:SummItem
logic	src/summarizer.cpp	/^void Summarizer::logic(float dt) {$/;"	f	class:Summarizer
logstalgia_CXXFLAGS	Makefile	/^logstalgia_CXXFLAGS = -std=gnu++0x -Wall -Wno-sign-compare -Wno-reorder -Wno-unused-but-set-variable -Wno-unused-variable$/;"	m
logstalgia_LDADD	Makefile	/^logstalgia_LDADD = $(LDADD)$/;"	m
logstalgia_OBJECTS	Makefile	/^logstalgia_OBJECTS = $(am_logstalgia_OBJECTS)$/;"	m
logstalgia_SOURCES	Makefile	/^logstalgia_SOURCES = \\$/;"	m
logstalgia_info	src/logstalgia.cpp	/^void logstalgia_info(std::string msg) {$/;"	f
logstalgia_quit	src/logstalgia.cpp	/^void logstalgia_quit(std::string error) {$/;"	f
logstalgia_version	dev/bin/build_win32.pl	/^sub logstalgia_version {$/;"	s
lowSurrogateBase	src/core/ftgl/FTUnicode.h	/^    static const unsigned long lowSurrogateBase;$/;"	m	class:FTUnicodeStringItr
lowSurrogateBase	src/core/ftgl/FTUnicode.h	/^const unsigned long FTUnicodeStringItr<T>::lowSurrogateBase = 0x0010000UL;$/;"	m	class:FTUnicodeStringItr
lowSurrogateEnd	src/core/ftgl/FTUnicode.h	/^    static const unsigned long lowSurrogateEnd;$/;"	m	class:FTUnicodeStringItr
lowSurrogateEnd	src/core/ftgl/FTUnicode.h	/^const unsigned long FTUnicodeStringItr<T>::lowSurrogateEnd = 0xDFFF;$/;"	m	class:FTUnicodeStringItr
lowSurrogateStart	src/core/ftgl/FTUnicode.h	/^    static const unsigned long lowSurrogateStart;$/;"	m	class:FTUnicodeStringItr
lowSurrogateStart	src/core/ftgl/FTUnicode.h	/^const unsigned long FTUnicodeStringItr<T>::lowSurrogateStart = 0xDC00;$/;"	m	class:FTUnicodeStringItr
ls_ncsa_months	src/ncsa.cpp	/^const char* ls_ncsa_months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug" , "Sep", "Oct", "Nov", "Dec" };$/;"	v
mag_filter	src/core/texture.h	/^    GLint mag_filter;$/;"	m	class:TextureResource
main	build-aux/config.guess	/^		main()$/;"	f
main	build-aux/config.guess	/^	main ()$/;"	f
main	build-aux/config.guess	/^main ()$/;"	f
main	src/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f
manage	src/core/shader.cc	/^void ShaderManager::manage(Shader* shader) {$/;"	f	class:ShaderManager
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
margin	src/core/ui/element.h	/^    vec4 margin;$/;"	m	class:UIElement
mask16	src/core/utf8/core.h	/^    inline uint16_t mask16(u16_type oc)$/;"	f	namespace:utf8::internal
mask8	src/core/utf8/core.h	/^    inline uint8_t mask8(octet_type oc)$/;"	f	namespace:utf8::internal
maskHostname	src/logentry.cpp	/^std::string LogEntry::maskHostname(const std::string& hostname) {$/;"	f	class:LogEntry
mask_hostnames	src/settings.h	/^    bool mask_hostnames;$/;"	m	class:LogstalgiaSettings
match	src/core/regex.cpp	/^bool Regex::match(const std::string& str, std::vector<std::string>* results) {$/;"	f	class:Regex
matchAll	src/core/regex.cpp	/^bool Regex::matchAll(const std::string& str, std::vector<std::string>* results) {$/;"	f	class:Regex
matchOffset	src/core/regex.cpp	/^int Regex::matchOffset(const std::string& str, std::vector<std::string>* results, int offset) {$/;"	f	class:Regex
matchre	src/summarizer.h	/^    Regex matchre;$/;"	m	class:Summarizer
max	src/core/bounds.h	/^    vec2 max;$/;"	m	class:Bounds2D
max	src/core/bounds.h	/^    vec3 max;$/;"	m	class:Bounds3D
max	src/core/ui/slider.h	/^    float max;$/;"	m	class:UIFloatSlider
max	src/core/ui/slider.h	/^    int max;$/;"	m	class:UIIntSlider
max_glyph_height	src/core/fxfont.h	/^    int max_glyph_height;$/;"	m	class:FXGlyphPage
max_height	src/core/fxfont.h	/^    int max_height;$/;"	m	class:FXGlyphSet
max_node_depth	src/core/quadtree.h	/^    int max_node_depth;$/;"	m	class:QuadTree
max_node_items	src/core/quadtree.h	/^    int max_node_items;$/;"	m	class:QuadTree
max_strings	src/summarizer.h	/^    int max_strings;$/;"	m	class:Summarizer
maximize	src/core/ui/group.cpp	/^void UIGroup::maximize() {$/;"	f	class:UIGroup
maximize	src/core/ui/subgroup.cpp	/^void UISubGroup::maximize() {$/;"	f	class:UISubGroup
message	src/core/logger.cpp	/^void Logger::message(int level, const std::string& message) {$/;"	f	class:Logger
message	src/core/logger.h	/^    std::string message;$/;"	m	class:LoggerMessage
message	src/core/sdlapp.h	/^    std::string message;$/;"	m	class:SDLAppException
message	src/core/shader_common.h	/^    std::string message;$/;"	m	class:ShaderException
message	src/logstalgia.h	/^    std::string message;$/;"	m	class:Logstalgia
message_count	src/core/logger.h	/^    int message_count;$/;"	m	class:Logger
message_count	src/core/ui/console.h	/^    int message_count;$/;"	m	class:UIConsole
message_timer	src/logstalgia.h	/^    float message_timer;$/;"	m	class:Logstalgia
middleClick	src/core/mousecursor.cpp	/^bool MouseCursor::middleClick() const {$/;"	f	class:MouseCursor
middleClick	src/core/mousecursor.cpp	/^void MouseCursor::middleClick(bool click) {$/;"	f	class:MouseCursor
middle_click	src/core/mousecursor.h	/^    bool middle_click;$/;"	m	class:MouseCursor
min	src/core/bounds.h	/^    vec2 min;$/;"	m	class:Bounds2D
min	src/core/bounds.h	/^    vec3 min;$/;"	m	class:Bounds3D
min	src/core/ui/slider.h	/^    float min;$/;"	m	class:UIFloatSlider
min	src/core/ui/slider.h	/^    int min;$/;"	m	class:UIIntSlider
min_delta_msec	src/core/sdlapp.h	/^    int  min_delta_msec;$/;"	m	class:SDLApp
min_filter	src/core/texture.h	/^    GLint min_filter;$/;"	m	class:TextureResource
min_rect	src/core/ui/layout.h	/^    vec2 min_rect;$/;"	m	class:UILayout
minimizable	src/core/ui/group.h	/^    bool minimizable;$/;"	m	class:UIGroup
minimize	src/core/ui/group.cpp	/^void UIGroup::minimize() {$/;"	f	class:UIGroup
minimize	src/core/ui/subgroup.cpp	/^void UISubGroup::minimize() {$/;"	f	class:UISubGroup
mintime	src/logstalgia.h	/^    time_t mintime;$/;"	m	class:Logstalgia
mipmaps	src/core/texture.h	/^    bool mipmaps;$/;"	m	class:TextureResource
missingEntryException	src/core/conffile.cpp	/^void ConfFile::missingEntryException(ConfSection* section, std::string entryname) {$/;"	f	class:ConfFile
missingValueException	src/core/conffile.cpp	/^void ConfFile::missingValueException(ConfEntry* entry) {$/;"	f	class:ConfFile
mkdir_p	Makefile	/^mkdir_p = mkdir -p --$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mktime_utc	src/core/timezone.cpp	/^time_t mktime_utc(struct tm* timeinfo) {$/;"	f
mode2D	src/core/display.cpp	/^void SDLAppDisplay::mode2D() {$/;"	f	class:SDLAppDisplay
mode3D	src/core/display.cpp	/^void SDLAppDisplay::mode3D(float fov, float znear, float zfar) {$/;"	f	class:SDLAppDisplay
modified	src/core/shader_common.h	/^    bool modified;$/;"	m	class:ShaderUniform
mouseClick	src/core/sdlapp.h	/^    virtual void mouseClick(SDL_MouseButtonEvent *e) {};$/;"	f	class:SDLApp
mouseClick	src/logstalgia.cpp	/^void Logstalgia::mouseClick(SDL_MouseButtonEvent *e) {$/;"	f	class:Logstalgia
mouseMove	src/core/sdlapp.h	/^    virtual void mouseMove(SDL_MouseMotionEvent *e) {};$/;"	f	class:SDLApp
mouseMove	src/logstalgia.cpp	/^void Logstalgia::mouseMove(SDL_MouseMotionEvent *e) {$/;"	f	class:Logstalgia
mouseOut	src/summarizer.cpp	/^void Summarizer::mouseOut() {$/;"	f	class:Summarizer
mouseOver	src/paddle.cpp	/^bool Paddle::mouseOver(TextArea& textarea, vec2& mouse) {$/;"	f	class:Paddle
mouseOver	src/requestball.cpp	/^bool RequestBall::mouseOver(TextArea& textarea, vec2& mouse) {$/;"	f	class:RequestBall
mouseOver	src/slider.cpp	/^bool PositionSlider::mouseOver(vec2 pos, float* percent_ptr) {$/;"	f	class:PositionSlider
mouseOver	src/summarizer.cpp	/^bool Summarizer::mouseOver(TextArea& textarea, vec2 mouse) {$/;"	f	class:Summarizer
mouseWheel	src/core/sdlapp.h	/^    virtual void mouseWheel(SDL_MouseWheelEvent *e) {};$/;"	f	class:SDLApp
mousehide_timeout	src/logstalgia.h	/^    float mousehide_timeout;$/;"	m	class:Logstalgia
mouseover	src/slider.h	/^    float mouseover;$/;"	m	class:PositionSlider
mouseover	src/summarizer.h	/^    bool mouseover;$/;"	m	class:Summarizer
mouseover_elapsed	src/slider.h	/^    float mouseover_elapsed;$/;"	m	class:PositionSlider
mousepos	src/core/mousecursor.h	/^    vec2 mousepos;$/;"	m	class:MouseCursor
mousepos	src/logstalgia.h	/^    vec2 mousepos;$/;"	m	class:Logstalgia
moveTo	src/paddle.cpp	/^void Paddle::moveTo(int y, float eta, vec4 nextcol) {$/;"	f	class:Paddle
moving	src/paddle.cpp	/^bool Paddle::moving() {$/;"	f	class:Paddle
moving	src/summarizer.h	/^    bool moving;$/;"	m	class:SummItem
multiSample	src/core/display.cpp	/^void SDLAppDisplay::multiSample(int samples) {$/;"	f	class:SDLAppDisplay
multiSamplingEnabled	src/core/display.cpp	/^bool SDLAppDisplay::multiSamplingEnabled() {$/;"	f	class:SDLAppDisplay
multi_sample	src/core/display.h	/^    int  multi_sample;$/;"	m	class:SDLAppDisplay
multisample	src/core/settings.h	/^    bool multisample;$/;"	m	class:SDLAppSettings
mutex	src/core/png_writer.h	/^    SDL_mutex*  mutex;$/;"	m	class:PNGExporter
mutex	src/core/ppm.h	/^    SDL_mutex* mutex;$/;"	m	class:FrameExporter
mutex	src/core/tga.h	/^    SDL_mutex*  mutex;$/;"	m	class:TGAExporter
name	src/core/conffile.h	/^    std::string name;$/;"	m	class:ConfEntry
name	src/core/conffile.h	/^    std::string name;$/;"	m	class:ConfSection
name	src/core/shader_common.h	/^    std::string name;$/;"	m	class:ShaderUniform
name	src/core/timer.h	/^    std::string name;$/;"	m	class:GLTimer
name	src/core/ui/console.h	/^    std::string name;$/;"	m	class:UIConsoleCommand
near_bottom_left	src/core/frustum.h	/^    vec3 near_bottom_left, near_bottom_right;$/;"	m	class:Frustum
near_bottom_right	src/core/frustum.h	/^    vec3 near_bottom_left, near_bottom_right;$/;"	m	class:Frustum
near_distance	src/core/frustum.h	/^    float near_distance, far_distance;$/;"	m	class:Frustum
near_half_height	src/core/frustum.h	/^    float near_half_height;$/;"	m	class:Frustum
near_half_width	src/core/frustum.h	/^    float near_half_width;$/;"	m	class:Frustum
near_top_left	src/core/frustum.h	/^    vec3 near_top_left,    near_top_right;$/;"	m	class:Frustum
near_top_right	src/core/frustum.h	/^    vec3 near_top_left,    near_top_right;$/;"	m	class:Frustum
needsCompile	src/core/shader_common.cpp	/^bool AbstractShader::needsCompile() {$/;"	f	class:AbstractShader
needs_update	src/core/fxfont.h	/^    bool     needs_update;$/;"	m	class:FXGlyphPage
next	src/core/utf8/checked.h	/^    uint32_t next(octet_iterator& it, octet_iterator end)$/;"	f	namespace:utf8
next	src/core/utf8/unchecked.h	/^        uint32_t next(octet_iterator& it)$/;"	f	namespace:utf8::unchecked
next	src/logstalgia.h	/^    bool next;$/;"	m	class:Logstalgia
nextPos	src/core/ftgl/FTUnicode.h	/^    const T* nextPos;$/;"	m	class:FTUnicodeStringItr
next_dir	src/core/ui/file_selector.h	/^    std::string next_dir;$/;"	m	class:UIFileSelector
nextcol	src/paddle.h	/^    vec4 nextcol;$/;"	m	class:Paddle
no_bounce	src/ball.h	/^    bool no_bounce;$/;"	m	class:ProjectedBall
no_bounce	src/settings.h	/^    bool no_bounce;$/;"	m	class:LogstalgiaSettings
node_count	src/core/quadtree.h	/^    int node_count;$/;"	m	class:QuadItem
node_count	src/core/quadtree.h	/^    int node_count;$/;"	m	class:QuadTree
normal	src/core/plane.h	/^    vec3 normal;$/;"	m	class:Plane
normalise	src/core/vectors.cpp	/^vec2 normalise(const vec2& v) {$/;"	f
normalise	src/core/vectors.cpp	/^vec3 normalise(const vec3& v) {$/;"	f
normalise	src/core/vectors.cpp	/^vec4 normalise(const vec4& v) {$/;"	f
not_enough_room	src/core/utf8/checked.h	/^    class not_enough_room : public std::exception {$/;"	c	namespace:utf8
offset	src/requestball.h	/^    vec2 offset;$/;"	m	class:RequestBall
offsetsFromUTF8	src/core/ftgl/FTUnicode.h	/^    static const unsigned long offsetsFromUTF8[6];$/;"	m	class:FTUnicodeStringItr
offsetsFromUTF8	src/core/ftgl/FTUnicode.h	/^const unsigned long FTUnicodeStringItr<T>::offsetsFromUTF8[6] = { 0x00000000UL, 0x00003080UL, 0x000E2080UL,$/;"	m	class:FTUnicodeStringItr
old_value	src/core/ui/slider.h	/^    float old_value;$/;"	m	class:UIFloatSlider
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldpos	src/summarizer.h	/^    vec2 oldpos;$/;"	m	class:SummItem
open	src/core/png_writer.cpp	/^bool PNGWriter::open(const std::string& filename) {$/;"	f	class:PNGWriter
open	src/core/tga.cpp	/^bool TGAWriter::open(const std::string& filename) {$/;"	f	class:TGAWriter
open	src/core/ui/console.cpp	/^void UIConsole::open() {$/;"	f	class:UIConsole
open	src/core/ui/file_selector.cpp	/^void UIFileSelector::open() {$/;"	f	class:UIFileSelector
open	src/core/ui/select.h	/^    bool open;$/;"	m	class:UISelect
open_action	src/core/ui/group.h	/^    UIAction* open_action;$/;"	m	class:UIGroup
open_action	src/core/ui/subgroup.h	/^    UIAction* open_action;$/;"	m	class:UISubGroup
operator !=	src/core/utf8/checked.h	/^      bool operator != (const iterator& rhs) const$/;"	f	class:utf8::iterator
operator !=	src/core/utf8/unchecked.h	/^            bool operator != (const iterator& rhs) const$/;"	f	class:utf8::unchecked::iterator
operator *	src/core/ftgl/FTUnicode.h	/^    unsigned int operator*() const$/;"	f	class:FTUnicodeStringItr
operator *	src/core/utf8/checked.h	/^      uint32_t operator * () const$/;"	f	class:utf8::iterator
operator *	src/core/utf8/unchecked.h	/^            uint32_t operator * () const$/;"	f	class:utf8::unchecked::iterator
operator ++	src/core/ftgl/FTUnicode.h	/^    FTUnicodeStringItr operator++(int)$/;"	f	class:FTUnicodeStringItr
operator ++	src/core/ftgl/FTUnicode.h	/^    FTUnicodeStringItr& operator++()$/;"	f	class:FTUnicodeStringItr
operator ++	src/core/utf8/checked.h	/^      iterator operator ++ (int)$/;"	f	class:utf8::iterator
operator ++	src/core/utf8/checked.h	/^      iterator& operator ++ ()$/;"	f	class:utf8::iterator
operator ++	src/core/utf8/unchecked.h	/^            iterator operator ++ (int)$/;"	f	class:utf8::unchecked::iterator
operator ++	src/core/utf8/unchecked.h	/^            iterator& operator ++ () $/;"	f	class:utf8::unchecked::iterator
operator --	src/core/utf8/checked.h	/^      iterator operator -- (int)$/;"	f	class:utf8::iterator
operator --	src/core/utf8/checked.h	/^      iterator& operator -- ()$/;"	f	class:utf8::iterator
operator --	src/core/utf8/unchecked.h	/^            iterator operator -- (int)$/;"	f	class:utf8::unchecked::iterator
operator --	src/core/utf8/unchecked.h	/^            iterator& operator -- ()$/;"	f	class:utf8::unchecked::iterator
operator =	src/core/vectors.h	/^    const lerp2& operator= (const vec2& vec) {$/;"	f	class:lerp2
operator =	src/core/vectors.h	/^    const lerp3& operator= (const vec3& vec) {$/;"	f	class:lerp3
operator ==	src/core/ftgl/FTUnicode.h	/^    bool operator==(const FTUnicodeStringItr& right) const$/;"	f	class:FTUnicodeStringItr
operator ==	src/core/utf8/checked.h	/^      bool operator == (const iterator& rhs) const$/;"	f	class:utf8::iterator
operator ==	src/core/utf8/unchecked.h	/^            bool operator == (const iterator& rhs) const $/;"	f	class:utf8::unchecked::iterator
options_layout	src/core/ui/select.h	/^    UILayout* options_layout;$/;"	m	class:UISelect
out	src/core/png_writer.h	/^    std::ostream* out;$/;"	m	class:PNGWriter
out	src/core/tga.h	/^    std::ostream* out;$/;"	m	class:TGAWriter
outline	src/core/quadtree.cpp	/^void QuadNode::outline() {$/;"	f	class:QuadNode
outline	src/core/quadtree.cpp	/^void QuadTree::outline() {$/;"	f	class:QuadTree
outlineItems	src/core/quadtree.cpp	/^void QuadNode::outlineItems() {$/;"	f	class:QuadNode
outlineItems	src/core/quadtree.cpp	/^void QuadTree::outlineItems() {$/;"	f	class:QuadTree
output	src/core/ppm.h	/^    std::ostream* output;$/;"	m	class:PPMExporter
output_framerate	src/core/settings.h	/^    int output_framerate;$/;"	m	class:SDLAppSettings
output_ppm_filename	src/core/settings.h	/^    std::string output_ppm_filename;$/;"	m	class:SDLAppSettings
overlaps	src/core/bounds.h	/^    bool overlaps(const Bounds2D & b) const {$/;"	f	class:Bounds2D
p	src/core/vectors.h	/^    vec2 p;$/;"	m	class:lerp2
p	src/core/vectors.h	/^    vec3 p;$/;"	m	class:lerp3
padding	src/core/ui/element.h	/^    vec2 padding;$/;"	m	class:UIElement
paddle_colour	src/logstalgia.h	/^    vec4 paddle_colour;$/;"	m	class:Logstalgia
paddle_mode	src/settings.h	/^    int   paddle_mode;$/;"	m	class:LogstalgiaSettings
paddle_position	src/settings.h	/^    float paddle_position;$/;"	m	class:LogstalgiaSettings
paddle_target	src/logstalgia.h	/^    RequestBall* paddle_target;$/;"	m	class:Logstalgia
paddle_x	src/logstalgia.h	/^    float paddle_x;$/;"	m	class:Logstalgia
paddles	src/logstalgia.h	/^    std::map<std::string,Paddle*> paddles;$/;"	m	class:Logstalgia
page	src/core/fxfont.h	/^    FXGlyphPage* page;$/;"	m	class:FXGlyph
page_height	src/core/fxfont.h	/^    int      page_height;$/;"	m	class:FXGlyphPage
page_width	src/core/fxfont.h	/^    int      page_width;$/;"	m	class:FXGlyphPage
pagecolour	src/requestball.h	/^    vec3 pagecolour;$/;"	m	class:RequestBall
pages	src/core/fxfont.h	/^    std::vector<FXGlyphPage*> pages;$/;"	m	class:FXGlyphSet
parent	src/core/quadtree.h	/^    QuadNode* parent;$/;"	m	class:QuadNode
parent	src/core/shader_common.h	/^    AbstractShader* parent;$/;"	m	class:AbstractShaderPass
parent	src/core/ui/element.h	/^    UIElement* parent;$/;"	m	class:UIElement
parent	src/summarizer.h	/^    SummNode* parent;$/;"	m	class:SummNode
parentPath	src/core/ui/file_selector.cpp	/^bool parentPath(const boost::filesystem::path& path, boost::filesystem::path& parent_path) {$/;"	f
parseArgs	src/core/settings.cpp	/^void SDLAppSettings::parseArgs(const std::vector<std::string>& arguments, ConfFile& conffile, std::vector<std::string>* files) {$/;"	f	class:SDLAppSettings
parseArgs	src/core/settings.cpp	/^void SDLAppSettings::parseArgs(int argc, char *argv[], ConfFile& conffile, std::vector<std::string>* files) {$/;"	f	class:SDLAppSettings
parseDateTime	src/core/settings.cpp	/^bool SDLAppSettings::parseDateTime(const std::string& datetime, time_t& timestamp) {$/;"	f	class:SDLAppSettings
parseLine	src/custom.cpp	/^bool CustomAccessLog::parseLine(std::string& line, LogEntry& entry) {$/;"	f	class:CustomAccessLog
parseLine	src/ncsa.cpp	/^bool NCSALog::parseLine(std::string& line, LogEntry& entry) {$/;"	f	class:NCSALog
parseRectangle	src/core/settings.cpp	/^bool SDLAppSettings::parseRectangle(const std::string& value, int& x, int& y) {$/;"	f	class:SDLAppSettings
parseViewport	src/core/settings.cpp	/^bool SDLAppSettings::parseViewport(const std::string& value, int& x, int& y, bool& no_resize) {$/;"	f	class:SDLAppSettings
path	src/core/ui/file_selector.h	/^    std::string path;$/;"	m	class:UIFileSelectorLabel
path	src/logentry.h	/^    std::string path;$/;"	m	class:LogEntry
path	src/settings.h	/^    std::string path;$/;"	m	class:LogstalgiaSettings
paused	src/logstalgia.h	/^    bool paused;$/;"	m	class:Logstalgia
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pedanticLog	src/core/logger.cpp	/^void pedanticLog(const char *str, ...) {$/;"	f
peek_next	src/core/utf8/checked.h	/^    uint32_t peek_next(octet_iterator it, octet_iterator end)$/;"	f	namespace:utf8
peek_next	src/core/utf8/unchecked.h	/^        uint32_t peek_next(octet_iterator it)$/;"	f	namespace:utf8::unchecked
percent	src/slider.h	/^    float percent;$/;"	m	class:PositionSlider
perform	src/core/ui/action.h	/^    virtual void perform() {};$/;"	f	class:UIAction
perform	src/core/ui/file_selector.h	/^    virtual void perform(const  std::string& path) {};$/;"	f	class:UIFileSelectorAction
perform	src/core/ui/select.cpp	/^void UIIntSelectAction::perform() {$/;"	f	class:UIIntSelectAction
pid	src/logentry.h	/^    std::string pid;$/;"	m	class:LogEntry
pitch_speed	src/settings.h	/^    float pitch_speed;$/;"	m	class:LogstalgiaSettings
pixels1	src/core/ppm.h	/^    char* pixels1;$/;"	m	class:FrameExporter
pixels2	src/core/ppm.h	/^    char* pixels2;$/;"	m	class:FrameExporter
pixels_out	src/core/ppm.h	/^    char* pixels_out;$/;"	m	class:FrameExporter
pixels_shared_ptr	src/core/ppm.h	/^    char* pixels_shared_ptr;$/;"	m	class:FrameExporter
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/logstalgia$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/logstalgia$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/logstalgia$/;"	m
planes	src/core/frustum.h	/^    Plane planes[6];$/;"	m	class:Frustum
png_exporter_state	src/core/png_writer.h	/^enum png_exporter_state { PNG_EXPORTER_WAIT, PNG_EXPORTER_WRITE, PNG_EXPORTER_EXIT, PNG_EXPORTER_STOPPED };$/;"	g
png_writer_flush_data	src/core/png_writer.cpp	/^void png_writer_flush_data(png_structp png_ptr) {$/;"	f
png_writer_write_data	src/core/png_writer.cpp	/^void png_writer_write_data(png_structp png_ptr, png_bytep data, png_size_t length) {$/;"	f
point	src/core/plane.h	/^    vec3 point;$/;"	m	class:Plane
points	src/ball.h	/^    std::vector<vec2> points;$/;"	m	class:ProjectedBall
pop2D	src/core/display.cpp	/^void SDLAppDisplay::pop2D() {$/;"	f	class:SDLAppDisplay
pos	src/ball.h	/^    vec2 pos;$/;"	m	class:ProjectedBall
pos	src/core/ui/element.h	/^    vec2  pos;$/;"	m	class:UIElement
pos	src/core/vbo.h	/^    vec2 pos;$/;"	m	class:quadbuf_vertex
pos	src/paddle.h	/^    vec2 pos;$/;"	m	class:Paddle
pos	src/summarizer.h	/^    vec2 pos;$/;"	m	class:SummItem
pos_x	src/summarizer.h	/^    float pos_x;$/;"	m	class:Summarizer
ppmheader	src/core/ppm.h	/^    char ppmheader[1024];$/;"	m	class:PPMExporter
pre_caching	src/core/fxfont.h	/^    bool pre_caching;$/;"	m	class:FXGlyphSet
precache	src/core/fxfont.cpp	/^void FXGlyphSet::precache(const std::string& chars) {$/;"	f	class:FXGlyphSet
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	src/core/shader_common.h	/^    std::string prefix;$/;"	m	class:AbstractShader
prependChar	src/summarizer.cpp	/^void SummUnit::prependChar(char c) {$/;"	f	class:SummUnit
preprocess	src/core/shader_common.cpp	/^bool AbstractShaderPass::preprocess(const std::string& line) {$/;"	f	class:AbstractShaderPass
preprocess	src/core/shader_common.cpp	/^void ShaderPart::preprocess() {$/;"	f	class:ShaderPart
prettyDirectory	src/core/ui/file_selector.cpp	/^void UIFileSelector::prettyDirectory(std::string& dir_string) {$/;"	f	class:UIFileSelector
previous	src/core/utf8/checked.h	/^    uint32_t previous(octet_iterator& it, octet_iterator pass_start)$/;"	f	namespace:utf8
previous	src/core/utf8/unchecked.h	/^        inline uint32_t previous(octet_iterator& it)$/;"	f	namespace:utf8::unchecked
previous_dir	src/core/ui/file_selector.h	/^    std::string previous_dir;$/;"	m	class:UIFileSelector
print	src/core/conffile.cpp	/^void ConfSection::print(std::ostream& out) {$/;"	f	class:ConfSection
print	src/core/fxfont.cpp	/^void FXFont::print(float x, float y, const char *str, ...) const{$/;"	f	class:FXFont
prior	src/core/utf8/checked.h	/^    uint32_t prior(octet_iterator& it, octet_iterator start)$/;"	f	namespace:utf8
prior	src/core/utf8/unchecked.h	/^        uint32_t prior(octet_iterator& it)$/;"	f	namespace:utf8::unchecked
proc_colour	src/paddle.h	/^    vec4 proc_colour;$/;"	m	class:Paddle
processMouse	src/core/ui/ui.cpp	/^UIElement* UI::processMouse(MouseCursor& cursor) {$/;"	f	class:UI
processed_source	src/core/shader_common.h	/^    std::string processed_source;$/;"	m	class:ShaderPart
profile_name	src/logstalgia.cpp	/^std::string profile_name;$/;"	v
profile_start	src/logstalgia.cpp	/^void profile_start(std::string profile) {$/;"	f
profile_start_msec	src/logstalgia.cpp	/^Uint32 profile_start_msec;$/;"	v
profile_stop	src/logstalgia.cpp	/^void profile_stop() {$/;"	f
program	src/core/shader_common.h	/^    unsigned int program;$/;"	m	class:AbstractShader
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
project	src/ball.cpp	/^void ProjectedBall::project() {$/;"	f	class:ProjectedBall
project	src/core/display.cpp	/^vec3 SDLAppDisplay::project(vec3 pos) {$/;"	f	class:SDLAppDisplay
prompt	src/core/ui/console.h	/^    UILabel* prompt;$/;"	m	class:UIConsole
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
purge	src/core/fxfont.cpp	/^void FXFontManager::purge() {$/;"	f	class:FXFontManager
purge	src/core/resource.cpp	/^void ResourceManager::purge() {$/;"	f	class:ResourceManager
push2D	src/core/display.cpp	/^void SDLAppDisplay::push2D() {$/;"	f	class:SDLAppDisplay
quadItemBounds	src/core/quadtree.h	/^    Bounds2D quadItemBounds;$/;"	m	class:QuadItem
quadbuf	src/core/vbo.cpp	/^quadbuf::quadbuf(int vertex_capacity) : vertex_capacity(vertex_capacity) {$/;"	f	class:quadbuf
quadbuf	src/core/vbo.h	/^class quadbuf {$/;"	c
quadbuf_tex	src/core/vbo.h	/^    quadbuf_tex() {};$/;"	f	class:quadbuf_tex
quadbuf_tex	src/core/vbo.h	/^    quadbuf_tex(int start_index, GLuint textureid) : start_index(start_index), textureid(textureid) {};$/;"	f	class:quadbuf_tex
quadbuf_tex	src/core/vbo.h	/^class quadbuf_tex {$/;"	c
quadbuf_vertex	src/core/vbo.h	/^    quadbuf_vertex() {};$/;"	f	class:quadbuf_vertex
quadbuf_vertex	src/core/vbo.h	/^    quadbuf_vertex(const vec2& pos, const vec4& colour, const vec2& texcoord) : pos(pos), colour(colour), texcoord(texcoord) {};$/;"	f	class:quadbuf_vertex
quadbuf_vertex	src/core/vbo.h	/^class quadbuf_vertex {$/;"	c
query_id	src/core/timer.h	/^    GLuint   query_id;$/;"	m	class:GLTimer
query_start	src/core/timer.h	/^    Uint32   query_start;$/;"	m	class:GLTimer
query_stop	src/core/timer.h	/^    Uint32   query_stop;$/;"	m	class:GLTimer
query_value	src/core/timer.h	/^    GLuint64 query_value;$/;"	m	class:GLTimer
queued_entries	src/logstalgia.h	/^    std::list<LogEntry*> queued_entries;$/;"	m	class:Logstalgia
quit	src/core/display.cpp	/^void SDLAppDisplay::quit() {$/;"	f	class:SDLAppDisplay
quit	src/core/sdlapp.h	/^    virtual void quit() { appFinished = true; };$/;"	f	class:SDLApp
range_end	src/core/utf8/checked.h	/^      octet_iterator range_end;$/;"	m	class:utf8::iterator
range_start	src/core/utf8/checked.h	/^      octet_iterator range_start;$/;"	m	class:utf8::iterator
raw_count	src/core/tga.h	/^    size_t raw_count;$/;"	m	class:TGAWriter
raw_source	src/core/shader_common.h	/^    std::string raw_source;$/;"	m	class:ShaderPart
re	src/core/regex.h	/^    pcre *re;$/;"	m	class:Regex
readFully	src/core/seeklog.cpp	/^bool SeekLog::readFully() {$/;"	f	class:SeekLog
readLog	src/logstalgia.cpp	/^void Logstalgia::readLog(int buffer_rows) {$/;"	f	class:Logstalgia
readUTF16	src/core/ftgl/FTUnicode.h	/^inline void FTUnicodeStringItr<T>::readUTF16()$/;"	f	class:FTUnicodeStringItr
readUTF8	src/core/ftgl/FTUnicode.h	/^inline void FTUnicodeStringItr<T>::readUTF8()$/;"	f	class:FTUnicodeStringItr
recalc_display	src/summarizer.cpp	/^void Summarizer::recalc_display() {$/;"	f	class:Summarizer
rect	src/core/ui/element.h	/^    vec2  rect;$/;"	m	class:UIElement
rectheight	src/textarea.h	/^    int rectheight;$/;"	m	class:TextArea
rectwidth	src/textarea.h	/^    int rectwidth;$/;"	m	class:TextArea
refcount	src/core/resource.h	/^    int refcount() { return refs; };$/;"	f	class:Resource
referrer	src/logentry.h	/^    std::string referrer;$/;"	m	class:LogEntry
refresh_delay	src/summarizer.h	/^    float refresh_delay;$/;"	m	class:Summarizer
refresh_elapsed	src/summarizer.h	/^    float refresh_elapsed;$/;"	m	class:Summarizer
refs	src/core/resource.h	/^    int refs;$/;"	m	class:Resource
refs	src/summarizer.h	/^    int refs;$/;"	m	class:SummNode
refs	src/summarizer.h	/^    int refs;$/;"	m	class:SummUnit
regex	src/core/regex.h	/^    std::string regex;$/;"	m	class:RegexCompilationException
registerCommand	src/core/ui/console.cpp	/^void UIConsole::registerCommand(UIConsoleCommand* command) {$/;"	f	class:UIConsole
reinit	src/logstalgia.cpp	/^void Logstalgia::reinit() {$/;"	f	class:Logstalgia
release	src/core/resource.cpp	/^void ResourceManager::release(Resource* resource) {$/;"	f	class:ResourceManager
reload	src/core/fxfont.cpp	/^void FXFontManager::reload() {$/;"	f	class:FXFontManager
reload	src/core/shader.cc	/^void ShaderManager::reload(bool force) {$/;"	f	class:ShaderManager
reload	src/core/shader_common.cpp	/^void AbstractShader::reload(bool force) {$/;"	f	class:AbstractShader
reload	src/core/shader_common.cpp	/^void ShaderPart::reload() {$/;"	f	class:ShaderPart
reload	src/core/texture.cpp	/^void TextureManager::reload() {$/;"	f	class:TextureManager
reload	src/core/texture.cpp	/^void TextureResource::reload() {$/;"	f	class:TextureResource
remaining_space	src/logstalgia.h	/^    int remaining_space;$/;"	m	class:Logstalgia
removeBall	src/logstalgia.cpp	/^void Logstalgia::removeBall(RequestBall* ball) {$/;"	f	class:Logstalgia
removeElement	src/core/ui/ui.cpp	/^void UI::removeElement(UIElement* e) {$/;"	f	class:UI
removeString	src/summarizer.cpp	/^void Summarizer::removeString(const std::string& str) {$/;"	f	class:Summarizer
removeWord	src/summarizer.cpp	/^bool SummNode::removeWord(const std::string& str, size_t offset) {$/;"	f	class:SummNode
render	src/core/fxfont.cpp	/^void FXFont::render(float x, float y, const std::string& text, const vec4& colour) const{$/;"	f	class:FXFont
replace	src/core/regex.cpp	/^bool Regex::replace(std::string& str, const std::string& replacement_str) {$/;"	f	class:Regex
replaceAll	src/core/regex.cpp	/^bool Regex::replaceAll(std::string& str, const std::string& replacement_str) {$/;"	f	class:Regex
replaceOffset	src/core/regex.cpp	/^int Regex::replaceOffset(std::string& str, const std::string& replacement_str, int offset) {$/;"	f	class:Regex
replace_invalid	src/core/utf8/checked.h	/^    inline output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out)$/;"	f	namespace:utf8
replace_invalid	src/core/utf8/checked.h	/^    output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out, uint32_t replacement)$/;"	f	namespace:utf8
reset	src/core/bounds.h	/^    void reset() {$/;"	f	class:Bounds2D
reset	src/core/bounds.h	/^    void reset() {$/;"	f	class:Bounds3D
reset	src/core/shader_common.cpp	/^void ShaderPart::reset() {$/;"	f	class:ShaderPart
reset	src/core/vbo.cpp	/^void quadbuf::reset() {$/;"	f	class:quadbuf
reset	src/logstalgia.cpp	/^void Logstalgia::reset() {$/;"	f	class:Logstalgia
resetButtonState	src/core/mousecursor.cpp	/^void MouseCursor::resetButtonState() {$/;"	f	class:MouseCursor
resetRect	src/core/ui/element.h	/^    virtual void resetRect() {};$/;"	f	class:UIElement
resetRect	src/core/ui/label.cpp	/^void UILabel::resetRect() {$/;"	f	class:UILabel
resetRect	src/core/ui/layout.cpp	/^void UILayout::resetRect() {$/;"	f	class:UILayout
resizable	src/core/display.h	/^    bool resizable;$/;"	m	class:SDLAppDisplay
resizable	src/core/settings.h	/^    bool resizable;$/;"	m	class:SDLAppSettings
resize	src/core/display.cpp	/^void SDLAppDisplay::resize(int width, int height) {$/;"	f	class:SDLAppDisplay
resize	src/core/sdlapp.h	/^    virtual void resize(int width, int height) {};$/;"	f	class:SDLApp
resize	src/core/ui/layout.cpp	/^void UILayout::resize(const vec2& pos) {$/;"	f	class:UILayout
resize	src/core/vbo.cpp	/^void quadbuf::resize(int new_size) {$/;"	f	class:quadbuf
resize	src/logstalgia.cpp	/^void Logstalgia::resize(int width, int height) {$/;"	f	class:Logstalgia
resize	src/slider.cpp	/^void PositionSlider::resize() {$/;"	f	class:PositionSlider
resizeConsole	src/core/sdlapp.cpp	/^void SDLApp::resizeConsole(int height) {$/;"	f	class:SDLApp
resizeGroups	src/logstalgia.cpp	/^void Logstalgia::resizeGroups() {$/;"	f	class:Logstalgia
resize_button	src/core/ui/layout.h	/^    UIResizeButton* resize_button;$/;"	m	class:UIResizableLayout
resizetex	src/core/ui/layout.h	/^    TextureResource* resizetex;$/;"	m	class:UIResizeButton
resource	src/core/resource.h	/^    std::string resource;$/;"	m	class:ResourceException
resource_dir	src/core/resource.h	/^    std::string resource_dir;$/;"	m	class:ResourceManager
resource_name	src/core/resource.h	/^    std::string resource_name;$/;"	m	class:Resource
resource_seq	src/core/texture.h	/^    int  resource_seq;$/;"	m	class:TextureManager
resources	src/core/resource.h	/^    std::map<std::string,Resource*> resources;$/;"	m	class:ResourceManager
responseColour	src/requestball.cpp	/^vec3 RequestBall::responseColour() {$/;"	f	class:RequestBall
response_code	src/logentry.h	/^    std::string response_code;$/;"	m	class:LogEntry
response_code	src/requestball.h	/^    std::string response_code;$/;"	m	class:RequestBall
response_colour	src/logentry.h	/^    vec3 response_colour;$/;"	m	class:LogEntry
response_colour	src/requestball.h	/^    vec3       response_colour;$/;"	m	class:RequestBall
response_size	src/logentry.h	/^    long response_size;$/;"	m	class:LogEntry
retarget	src/logstalgia.h	/^    bool retarget;$/;"	m	class:Logstalgia
returnCode	src/core/sdlapp.cpp	/^int SDLApp::returnCode() {$/;"	f	class:SDLApp
return_code	src/core/sdlapp.h	/^    int return_code;$/;"	m	class:SDLApp
reverse_zindex_sort	src/core/ui/element.h	/^    static bool reverse_zindex_sort (UIElement* e1, UIElement* e2) {$/;"	f	class:UIElement
right	src/summarizer.h	/^    bool right;$/;"	m	class:Summarizer
rightButtonPressed	src/core/mousecursor.cpp	/^bool MouseCursor::rightButtonPressed() const {$/;"	f	class:MouseCursor
rightClick	src/core/mousecursor.cpp	/^bool MouseCursor::rightClick() const {$/;"	f	class:MouseCursor
rightClick	src/core/mousecursor.cpp	/^void MouseCursor::rightClick(bool click) {$/;"	f	class:MouseCursor
right_click	src/core/mousecursor.h	/^    bool right_click;$/;"	m	class:MouseCursor
rle	src/core/tga.h	/^    bool rle;$/;"	m	class:TGAWriter
rle_count	src/core/tga.h	/^    size_t rle_count;$/;"	m	class:TGAWriter
root	src/core/quadtree.h	/^    QuadNode* root;$/;"	m	class:QuadTree
root	src/summarizer.h	/^    SummNode root;$/;"	m	class:Summarizer
rotate_vec2	src/core/vectors.cpp	/^vec2 rotate_vec2(const vec2& v, float s, float c) {$/;"	f
round	src/core/fxfont.h	/^    bool round;$/;"	m	class:FXFont
roundCoordinates	src/core/fxfont.cpp	/^void FXFont::roundCoordinates(bool round) {$/;"	f	class:FXFont
rowstride	src/core/ppm.h	/^    size_t rowstride;$/;"	m	class:FrameExporter
run	src/core/png_writer.cpp	/^void PNGExporter::run() {$/;"	f	class:PNGExporter
run	src/core/sdlapp.cpp	/^int SDLApp::run() {$/;"	f	class:SDLApp
run	src/core/tga.cpp	/^void TGAExporter::run() {$/;"	f	class:TGAExporter
runtime	src/logstalgia.h	/^    float runtime;$/;"	m	class:Logstalgia
saturation	src/core/ui/colour.h	/^    float saturation;$/;"	m	class:UIColour
save	src/core/conffile.cpp	/^void ConfFile::save() {$/;"	f	class:ConfFile
save	src/core/conffile.cpp	/^void ConfFile::save(const std::string& conffile) {$/;"	f	class:ConfFile
save_config	src/settings.h	/^    std::string save_config;$/;"	m	class:LogstalgiaSettings
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scale	src/core/ui/label.cpp	/^void UIFloatLabel::scale(bool up, float value_scale) {$/;"	f	class:UIFloatLabel
scale	src/core/ui/slider.cpp	/^void UIFloatSlider::scale(bool up, float value_scale) {$/;"	f	class:UIFloatSlider
scale	src/core/ui/slider.cpp	/^void UILabelFloatSlider::scale(bool up) {$/;"	f	class:UILabelFloatSlider
scale	src/core/ui/slider.cpp	/^void UILabelFloatSlider::scale(bool up, float value_scale) {$/;"	f	class:UILabelFloatSlider
scale	src/core/ui/slider.cpp	/^void UILabelIntSlider::scale(bool up) {$/;"	f	class:UILabelIntSlider
scale	src/core/ui/slider.h	/^    virtual void scale(bool up) {};$/;"	f	class:UISlider
screen_blank_elapsed	src/logstalgia.h	/^    float screen_blank_elapsed;$/;"	m	class:Logstalgia
screen_blank_interval	src/logstalgia.h	/^    float screen_blank_interval;$/;"	m	class:Logstalgia
screen_blank_period	src/logstalgia.h	/^    float screen_blank_period;$/;"	m	class:Logstalgia
screen_percent	src/summarizer.h	/^    int screen_percent;$/;"	m	class:Summarizer
screenshot	src/core/png_writer.cpp	/^void PNGWriter::screenshot(const std::string& filename) {$/;"	f	class:PNGWriter
screenshot	src/core/tga.cpp	/^void TGAWriter::screenshot(const std::string& filename) {$/;"	f	class:TGAWriter
screenshot	src/logstalgia.cpp	/^void Logstalgia::screenshot() {$/;"	f	class:Logstalgia
screentex	src/core/ppm.h	/^    GLuint screentex;$/;"	m	class:FrameExporter
scriptLog	src/core/logger.cpp	/^void scriptLog(const char *str, ...) {$/;"	f
scroll	src/core/mousecursor.cpp	/^void MouseCursor::scroll(bool dir) {$/;"	f	class:MouseCursor
scroll	src/core/ui/colour.cpp	/^void UIColourSlider::scroll(bool up) {$/;"	f	class:UIColourSlider
scroll	src/core/ui/element.cpp	/^void UIElement::scroll(bool up) {$/;"	f	class:UIElement
scroll	src/core/ui/label.cpp	/^void UIFloatLabel::scroll(bool up) {$/;"	f	class:UIFloatLabel
scroll	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::scroll(bool up) {$/;"	f	class:UIScrollBar
scroll	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::scroll(bool up) {$/;"	f	class:UIScrollLayout
scroll	src/core/ui/slider.cpp	/^void UIFloatSlider::scroll(bool up) {$/;"	f	class:UIFloatSlider
scroll	src/core/ui/slider.cpp	/^void UIIntSlider::scroll(bool up) {$/;"	f	class:UIIntSlider
scroll	src/core/ui/slider.cpp	/^void UILabelFloatSlider::scroll(bool up) {$/;"	f	class:UILabelFloatSlider
scroll	src/core/ui/slider.cpp	/^void UILabelIntSlider::scroll(bool up) {$/;"	f	class:UILabelIntSlider
scroll	src/core/ui/slider.h	/^    virtual void scroll(bool up) {};$/;"	f	class:UISlider
scroll	src/core/ui/ui.cpp	/^UIElement* UI::scroll(MouseCursor& cursor) {$/;"	f	class:UI
scrollToEnd	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::scrollToEnd() {$/;"	f	class:UIScrollBar
scrollToStart	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::scrollToStart() {$/;"	f	class:UIScrollBar
scrollWheel	src/core/mousecursor.cpp	/^int MouseCursor::scrollWheel() const {$/;"	f	class:MouseCursor
scroll_rect	src/core/ui/scroll_layout.h	/^    vec2 scroll_rect;$/;"	m	class:UIScrollLayout
scrollable	src/core/ui/element.h	/^    bool  scrollable;$/;"	m	class:UIElement
scrollableElementAt	src/core/ui/ui.cpp	/^UIElement* UI::scrollableElementAt(const vec2& pos) {$/;"	f	class:UI
scrolling	src/core/ui/ui.h	/^    bool scrolling;$/;"	m	class:UI
scrollwheel	src/core/mousecursor.h	/^    int scrollwheel;$/;"	m	class:MouseCursor
sdl_default_cursor	src/core/mousecursor.h	/^    SDL_Cursor* sdl_default_cursor;$/;"	m	class:MouseCursor
sdl_hidden_cursor	src/core/mousecursor.h	/^    SDL_Cursor* sdl_hidden_cursor;$/;"	m	class:MouseCursor
sdl_window	src/core/display.h	/^    SDL_Window*   sdl_window;$/;"	m	class:SDLAppDisplay
sdlappfontdir	Makefile	/^sdlappfontdir = $/;"	m
sectionException	src/core/conffile.cpp	/^void ConfFile::sectionException(ConfSection* section, std::string reason) {$/;"	f	class:ConfFile
sectionmap	src/core/conffile.h	/^    std::map<std::string, ConfSectionList*> sectionmap;$/;"	m	class:ConfFile
seekTo	src/core/seeklog.cpp	/^void SeekLog::seekTo(float percent) {$/;"	f	class:SeekLog
seekTo	src/logstalgia.cpp	/^void Logstalgia::seekTo(float percent) {$/;"	f	class:Logstalgia
seeklog	src/logstalgia.h	/^    SeekLog* seeklog;$/;"	m	class:Logstalgia
select	src/core/ui/select.h	/^    UISelect* select;$/;"	m	class:UIOptionLabel
selectElement	src/core/ui/ui.cpp	/^void UI::selectElement(UIElement* element) {$/;"	f	class:UI
selectElementAt	src/core/ui/ui.cpp	/^UIElement* UI::selectElementAt(const vec2& pos) {$/;"	f	class:UI
selectFile	src/core/ui/file_selector.cpp	/^void UIFileSelector::selectFile(const std::string& path) {$/;"	f	class:UIFileSelector
selectOption	src/core/ui/select.cpp	/^void UISelect::selectOption(UIOptionLabel* option, bool submit) {$/;"	f	class:UISelect
selectPath	src/core/ui/file_selector.cpp	/^void UIFileSelector::selectPath(const std::string& select_path) {$/;"	f	class:UIFileSelector
selectable	src/core/ui/element.h	/^    bool  selectable;$/;"	m	class:UIElement
selected	src/core/ui/element.h	/^    bool  selected;$/;"	m	class:UIElement
selectedElement	src/core/ui/ui.h	/^    UIElement* selectedElement;$/;"	m	class:UI
selected_edit_bgcolour	src/core/ui/label.h	/^    vec4 selected_edit_bgcolour;$/;"	m	class:UILabel
selected_option	src/core/ui/select.h	/^    UIOptionLabel* selected_option;$/;"	m	class:UISelect
selected_path	src/core/ui/file_selector.h	/^    std::string selected_path;$/;"	m	class:UIFileSelector
selectex	src/core/ui/select.h	/^    TextureResource* selectex;$/;"	m	class:UISelect
selector	src/core/ui/file_selector.h	/^    UIFileSelector* selector;$/;"	m	class:UIDirInputLabel
selector	src/core/ui/file_selector.h	/^    UIFileSelector* selector;$/;"	m	class:UIFileInputLabel
selector	src/core/ui/file_selector.h	/^    UIFileSelector* selector;$/;"	m	class:UIFileSelectorLabel
sequence_length	src/core/utf8/core.h	/^    sequence_length(octet_iterator lead_it)$/;"	f	namespace:utf8::internal
set	src/core/bounds.h	/^    void set(const Bounds2D& bounds) {$/;"	f	class:Bounds2D
set	src/core/bounds.h	/^    void set(const vec2& a, const vec2& b) {$/;"	f	class:Bounds2D
set	src/core/bounds.h	/^    void set(vec2 point) {$/;"	f	class:Bounds2D
set	src/core/fxfont.h	/^    FXGlyphSet* set;$/;"	m	class:FXGlyph
setAlignment	src/core/ui/layout.h	/^    void setAlignment(int alignment) { this->alignment = alignment; };$/;"	f	class:UILayout
setAlpha	src/core/fxfont.cpp	/^void FXFont::setAlpha(float alpha) {$/;"	f	class:FXFont
setBackground	src/logstalgia.cpp	/^void Logstalgia::setBackground(vec3 background) {$/;"	f	class:Logstalgia
setBaked	src/core/shader_common.cpp	/^void AbstractShader::setBaked(const std::string& name, bool baked) {$/;"	f	class:AbstractShader
setBaked	src/core/shader_common.cpp	/^void Sampler1DShaderUniform::setBaked(bool baked) {$/;"	f	class:Sampler1DShaderUniform
setBaked	src/core/shader_common.cpp	/^void Sampler2DShaderUniform::setBaked(bool baked) {$/;"	f	class:Sampler2DShaderUniform
setBaked	src/core/shader_common.cpp	/^void ShaderUniform::setBaked(bool baked) {$/;"	f	class:ShaderUniform
setBakedUniforms	src/core/shader_common.cpp	/^void AbstractShader::setBakedUniforms(bool baked) {$/;"	f	class:AbstractShader
setBool	src/core/conffile.cpp	/^void ConfEntry::setBool(bool value) {$/;"	f	class:ConfEntry
setBool	src/core/shader_common.cpp	/^void AbstractShader::setBool (const std::string& name, bool value) {$/;"	f	class:AbstractShader
setCaption	src/slider.cpp	/^void PositionSlider::setCaption(const std::string& caption) {$/;"	f	class:PositionSlider
setClearColour	src/core/display.cpp	/^void SDLAppDisplay::setClearColour(vec3 colour) {$/;"	f	class:SDLAppDisplay
setClearColour	src/core/display.cpp	/^void SDLAppDisplay::setClearColour(vec4 colour) {$/;"	f	class:SDLAppDisplay
setClipboardText	src/core/sdlapp.cpp	/^void SDLApp::setClipboardText(const std::string& text) {$/;"	f	class:SDLApp
setColour	src/core/fxfont.cpp	/^void FXFont::setColour(const vec4& colour) {$/;"	f	class:FXFont
setColour	src/core/ui/colour.cpp	/^void UIColour::setColour(vec3* colour) {$/;"	f	class:UIColour
setColour	src/core/ui/colour.cpp	/^void UIColourSlider::setColour(UIColour* colour) {$/;"	f	class:UIColourSlider
setColour	src/core/ui/colour.cpp	/^void UIHueSlider::setColour(UIColour* colour) {$/;"	f	class:UIHueSlider
setColour	src/core/ui/colour.cpp	/^void UILabelColour::setColour(vec3* value) {$/;"	f	class:UILabelColour
setColour	src/core/ui/colour.cpp	/^void UILightnessSlider::setColour(UIColour* colour) {$/;"	f	class:UILightnessSlider
setColour	src/core/ui/colour.cpp	/^void UISatSlider::setColour(UIColour* colour) {$/;"	f	class:UISatSlider
setColour	src/slider.cpp	/^void PositionSlider::setColour(vec3 col) {$/;"	f	class:PositionSlider
setColour	src/summarizer.cpp	/^void Summarizer::setColour(vec3 col) {$/;"	f	class:Summarizer
setColour	src/textarea.cpp	/^void TextArea::setColour(vec3 colour) {$/;"	f	class:TextArea
setComment	src/core/shader_common.cpp	/^void ShaderUniform::setComment(const std::string& comment) {$/;"	f	class:ShaderUniform
setConfFile	src/core/conffile.cpp	/^void ConfSection::setConfFile(ConfFile* conf) {$/;"	f	class:ConfSection
setCursorTexture	src/core/mousecursor.cpp	/^void MouseCursor::setCursorTexture(TextureResource* texture) {$/;"	f	class:MouseCursor
setDefaultFiltering	src/core/texture.cpp	/^void TextureResource::setDefaultFiltering() {$/;"	f	class:TextureResource
setDefaults	src/core/shader_common.cpp	/^void AbstractShader::setDefaults() {$/;"	f	class:AbstractShader
setDeparting	src/summarizer.cpp	/^void SummItem::setDeparting(bool departing) {$/;"	f	class:SummItem
setDest	src/summarizer.cpp	/^void SummItem::setDest(const vec2& dest) {$/;"	f	class:SummItem
setDir	src/core/fxfont.cpp	/^void FXFontManager::setDir(std::string font_dir) {$/;"	f	class:FXFontManager
setDir	src/core/resource.cpp	/^void ResourceManager::setDir(const std::string& resource_dir) {$/;"	f	class:ResourceManager
setDisplayDefaults	src/core/settings.cpp	/^void SDLAppSettings::setDisplayDefaults() {$/;"	f	class:SDLAppSettings
setDrawBackground	src/core/ui/layout.cpp	/^void UILayout::setDrawBackground(bool drawbg) {$/;"	f	class:UILayout
setDynamicCompile	src/core/shader_common.cpp	/^void AbstractShader::setDynamicCompile(bool dynamic_compile) {$/;"	f	class:AbstractShader
setEntry	src/core/conffile.cpp	/^void ConfFile::setEntry(const std::string& section, const std::string& key, const std::string& value) {$/;"	f	class:ConfFile
setEntry	src/core/conffile.cpp	/^void ConfSection::setEntry(ConfEntry* entry) {$/;"	f	class:ConfSection
setEntry	src/core/conffile.cpp	/^void ConfSection::setEntry(const std::string& name, const std::string& value, int lineno) {$/;"	f	class:ConfSection
setFilename	src/core/conffile.cpp	/^void ConfFile::setFilename(const std::string& filename) {$/;"	f	class:ConfFile
setFill	src/core/ui/element.h	/^    void setFill(bool fill)           { this->fill_horizontal = fill; this->fill_vertical = fill; };$/;"	f	class:UIElement
setFillHorizontal	src/core/ui/element.h	/^    void setFillHorizontal(bool fill) { this->fill_horizontal = fill; };$/;"	f	class:UIElement
setFillVertical	src/core/ui/element.h	/^    void setFillVertical  (bool fill) { this->fill_vertical  = fill; };$/;"	f	class:UIElement
setFiltering	src/core/texture.cpp	/^void TextureResource::setFiltering(GLint min_filter, GLint mag_filter) {$/;"	f	class:TextureResource
setFloat	src/core/conffile.cpp	/^void ConfEntry::setFloat(float value) {$/;"	f	class:ConfEntry
setFloat	src/core/shader_common.cpp	/^void AbstractShader::setFloat(const std::string& name, float value) {$/;"	f	class:AbstractShader
setFloat	src/core/ui/slider.cpp	/^void UIFloatSlider::setFloat(float* f) {$/;"	f	class:UIFloatSlider
setFloat	src/core/ui/slider.cpp	/^void UILabelFloatSlider::setFloat(float* f) {$/;"	f	class:UILabelFloatSlider
setFrameExporter	src/logstalgia.cpp	/^void Logstalgia::setFrameExporter(FrameExporter* exporter) {$/;"	f	class:Logstalgia
setHistoryCapacity	src/core/logger.cpp	/^void Logger::setHistoryCapacity(int hist_capacity) {$/;"	f	class:Logger
setHorizontal	src/core/ui/layout.cpp	/^void UILayout::setHorizontal(bool horizontal) {$/;"	f	class:UILayout
setInitialized	src/core/shader_common.h	/^    void setInitialized(bool initialized) { this->initialized = initialized; };$/;"	f	class:ShaderUniform
setInt	src/core/conffile.cpp	/^void ConfEntry::setInt(int value) {$/;"	f	class:ConfEntry
setInteger	src/core/shader_common.cpp	/^void AbstractShader::setInteger (const std::string& name, int value) {$/;"	f	class:AbstractShader
setIntensity	src/core/ui/ui.cpp	/^void UI::setIntensity(float intensity) {$/;"	f	class:UI
setLevel	src/core/logger.h	/^    void setLevel(int level)   { this->level = level; };$/;"	f	class:Logger
setLogstalgiaDefaults	src/settings.cpp	/^void LogstalgiaSettings::setLogstalgiaDefaults() {$/;"	f	class:LogstalgiaSettings
setMargin	src/core/ui/element.h	/^    void setMargin(const vec2& margin)  { this->margin = vec4(margin.x, margin.y, margin.x, margin.y); };$/;"	f	class:UIElement
setMargin	src/core/ui/element.h	/^    void setMargin(const vec4& margin)  { this->margin = margin; };$/;"	f	class:UIElement
setMargin	src/core/ui/element.h	/^    void setMargin(float margin)        { this->margin = vec4(margin); };$/;"	f	class:UIElement
setMat3	src/core/shader_common.cpp	/^void AbstractShader::setMat3 (const std::string& name, const mat3& value) {$/;"	f	class:AbstractShader
setMat4	src/core/shader_common.cpp	/^void AbstractShader::setMat4 (const std::string& name, const mat4& value) {$/;"	f	class:AbstractShader
setMessage	src/logstalgia.cpp	/^void Logstalgia::setMessage(const char* str, ...) {$/;"	f	class:Logstalgia
setMinRect	src/core/ui/layout.cpp	/^void UILayout::setMinRect(const vec2& min_rect) {$/;"	f	class:UILayout
setModified	src/core/shader_common.h	/^    virtual void setModified(bool modified) { this->modified = modified; };$/;"	f	class:ShaderUniform
setName	src/core/conffile.cpp	/^void ConfEntry::setName(const std::string& name) {$/;"	f	class:ConfEntry
setOpenAction	src/core/ui/group.cpp	/^void UIGroup::setOpenAction(UIAction* action) {$/;"	f	class:UIGroup
setOpenAction	src/core/ui/subgroup.cpp	/^void UISubGroup::setOpenAction(UIAction* action) {$/;"	f	class:UISubGroup
setOutputStream	src/core/png_writer.cpp	/^void PNGWriter::setOutputStream(std::ostream* out) {$/;"	f	class:PNGWriter
setOutputStream	src/core/tga.cpp	/^void TGAWriter::setOutputStream(std::ostream* out) {$/;"	f	class:TGAWriter
setPadding	src/core/ui/element.h	/^    void setPadding(const vec2& padding) { this->padding = padding; };$/;"	f	class:UIElement
setPadding	src/core/ui/element.h	/^    void setPadding(float padding)        { this->padding = vec2(padding, padding); };$/;"	f	class:UIElement
setPage	src/core/fxfont.cpp	/^void FXGlyph::setPage(FXGlyphPage* page, const vec4& texcoords) {$/;"	f	class:FXGlyph
setPercent	src/slider.cpp	/^void PositionSlider::setPercent(float percent) {$/;"	f	class:PositionSlider
setPointer	src/core/seeklog.cpp	/^void SeekLog::setPointer(std::streampos pointer) {$/;"	f	class:SeekLog
setPos	src/core/ui/element.h	/^    void setPos(const vec2& pos) { this->pos = pos; };$/;"	f	class:UIElement
setPos	src/summarizer.cpp	/^void SummItem::setPos(const vec2& pos) {$/;"	f	class:SummItem
setPos	src/textarea.cpp	/^void TextArea::setPos(vec2 pos) {$/;"	f	class:TextArea
setResourceName	src/core/resource.h	/^    void setResourceName(const std::string& resource_name) {$/;"	f	class:Resource
setResponseColour	src/logentry.cpp	/^void LogEntry::setResponseColour() {$/;"	f	class:LogEntry
setSampler1D	src/core/shader_common.cpp	/^void AbstractShader::setSampler1D (const std::string& name, int value) {$/;"	f	class:AbstractShader
setSampler2D	src/core/shader_common.cpp	/^void AbstractShader::setSampler2D (const std::string& name, int value) {$/;"	f	class:AbstractShader
setSection	src/core/conffile.cpp	/^void ConfFile::setSection(ConfSection* section) {$/;"	f	class:ConfFile
setSelected	src/core/ui/element.h	/^    virtual void setSelected(bool selected) { this->selected = selected; };$/;"	f	class:UIElement
setSelected	src/core/ui/label.cpp	/^void UIFloatLabel::setSelected(bool selected) {$/;"	f	class:UIFloatLabel
setSelected	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::setSelected(bool selected) {$/;"	f	class:UIScrollBar
setShowHelp	src/core/sdlapp.h	/^    void setShowHelp(bool showhelp) { this->showhelp = showhelp; };$/;"	f	class:SDLAppException
setSize	src/summarizer.cpp	/^void Summarizer::setSize(int x, float top_gap, float bottom_gap) {$/;"	f	class:Summarizer
setSource	src/core/shader_common.cpp	/^void ShaderPart::setSource(const std::string& source) {$/;"	f	class:ShaderPart
setSourceFile	src/core/shader_common.cpp	/^void ShaderPart::setSourceFile(const std::string& filename) {$/;"	f	class:ShaderPart
setString	src/core/conffile.cpp	/^void ConfEntry::setString(const std::string& value) {$/;"	f	class:ConfEntry
setSuccess	src/logentry.cpp	/^void LogEntry::setSuccess() {$/;"	f	class:LogEntry
setTarget	src/paddle.cpp	/^void Paddle::setTarget(RequestBall* target) {$/;"	f	class:Paddle
setText	src/core/ui/element.h	/^    virtual void setText(const std::string& text) {};$/;"	f	class:UIElement
setText	src/core/ui/group.cpp	/^void UIGroupBar::setText(const std::string& text) {$/;"	f	class:UIGroupBar
setText	src/core/ui/label.cpp	/^void UILabel::setText(const std::string& text) {$/;"	f	class:UILabel
setText	src/textarea.cpp	/^void TextArea::setText(std::vector<std::string>& content_) {$/;"	f	class:TextArea
setTextColour	src/core/ui/label.cpp	/^void UILabel::setTextColour(const vec4& text_colour) {$/;"	f	class:UILabel
setTextureCoords	src/core/ui/image.cpp	/^void UIImage::setTextureCoords(const vec4& coords) {$/;"	f	class:UIImage
setTextured	src/core/ui/ui.cpp	/^void UI::setTextured(bool textured) {$/;"	f	class:UI
setTitle	src/core/ui/group.cpp	/^void UIGroup::setTitle(const std::string& text) {$/;"	f	class:UIGroup
setUI	src/core/ui/element.h	/^    virtual void setUI(UI* ui) { this->ui = ui; };$/;"	f	class:UIElement
setUI	src/core/ui/layout.cpp	/^void UILayout::setUI(UI* ui) {$/;"	f	class:UILayout
setUI	src/core/ui/layout.cpp	/^void UIResizableLayout::setUI(UI* ui) {$/;"	f	class:UIResizableLayout
setUI	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::setUI(UI* ui) {$/;"	f	class:UIScrollLayout
setUI	src/core/ui/select.cpp	/^void UISelect::setUI(UI* ui) {$/;"	f	class:UISelect
setValue	src/core/shader_common.cpp	/^void BoolShaderUniform::setValue(bool value) {$/;"	f	class:BoolShaderUniform
setValue	src/core/shader_common.cpp	/^void FloatShaderUniform::setValue(float value) {$/;"	f	class:FloatShaderUniform
setValue	src/core/shader_common.cpp	/^void IntShaderUniform::setValue(int value) {$/;"	f	class:IntShaderUniform
setValue	src/core/shader_common.cpp	/^void Mat3ShaderUniform::setValue(const mat3& value) {$/;"	f	class:Mat3ShaderUniform
setValue	src/core/shader_common.cpp	/^void Mat4ShaderUniform::setValue(const mat4& value) {$/;"	f	class:Mat4ShaderUniform
setValue	src/core/shader_common.cpp	/^void Sampler1DShaderUniform::setValue(int value) {$/;"	f	class:Sampler1DShaderUniform
setValue	src/core/shader_common.cpp	/^void Sampler2DShaderUniform::setValue(int value) {$/;"	f	class:Sampler2DShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec2ArrayShaderUniform::setValue(const std::vector<vec2>& value) {$/;"	f	class:Vec2ArrayShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec2ArrayShaderUniform::setValue(const vec2* value) {$/;"	f	class:Vec2ArrayShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec2ShaderUniform::setValue(const vec2& value) {$/;"	f	class:Vec2ShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec3ArrayShaderUniform::setValue(const std::vector<vec3>& value) {$/;"	f	class:Vec3ArrayShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec3ArrayShaderUniform::setValue(const vec3* value) {$/;"	f	class:Vec3ArrayShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec3ShaderUniform::setValue(const vec3& value) {$/;"	f	class:Vec3ShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec4ArrayShaderUniform::setValue(const std::vector<vec4>& value) {$/;"	f	class:Vec4ArrayShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec4ArrayShaderUniform::setValue(const vec4* value) {$/;"	f	class:Vec4ArrayShaderUniform
setValue	src/core/shader_common.cpp	/^void Vec4ShaderUniform::setValue(const vec4& value) {$/;"	f	class:Vec4ShaderUniform
setValue	src/core/ui/colour.cpp	/^void UIColourSlider::setValue(float value) {$/;"	f	class:UIColourSlider
setValue	src/core/ui/label.cpp	/^void UIFloatLabel::setValue(float value) {$/;"	f	class:UIFloatLabel
setValue	src/core/ui/label.cpp	/^void UIFloatLabel::setValue(float* value) {$/;"	f	class:UIFloatLabel
setValue	src/core/ui/slider.cpp	/^void UIFloatSlider::setValue(float v) {$/;"	f	class:UIFloatSlider
setValue	src/core/ui/slider.cpp	/^void UIIntSlider::setValue(int v) {$/;"	f	class:UIIntSlider
setVec2	src/core/conffile.cpp	/^void ConfEntry::setVec2(vec2 value) {$/;"	f	class:ConfEntry
setVec2	src/core/shader_common.cpp	/^void AbstractShader::setVec2 (const std::string& name, const vec2& value) {$/;"	f	class:AbstractShader
setVec2Array	src/core/shader_common.cpp	/^void AbstractShader::setVec2Array (const std::string& name, std::vector<vec2>& value) {$/;"	f	class:AbstractShader
setVec2Array	src/core/shader_common.cpp	/^void AbstractShader::setVec2Array (const std::string& name, vec2* value) {$/;"	f	class:AbstractShader
setVec3	src/core/conffile.cpp	/^void ConfEntry::setVec3(vec3 value) {$/;"	f	class:ConfEntry
setVec3	src/core/shader_common.cpp	/^void AbstractShader::setVec3 (const std::string& name, const vec3& value) {$/;"	f	class:AbstractShader
setVec3Array	src/core/shader_common.cpp	/^void AbstractShader::setVec3Array (const std::string& name, std::vector<vec3>& value) {$/;"	f	class:AbstractShader
setVec3Array	src/core/shader_common.cpp	/^void AbstractShader::setVec3Array (const std::string& name, vec3* value) {$/;"	f	class:AbstractShader
setVec4	src/core/conffile.cpp	/^void ConfEntry::setVec4(vec4 value) {$/;"	f	class:ConfEntry
setVec4	src/core/shader_common.cpp	/^void AbstractShader::setVec4 (const std::string& name, const vec4& value) {$/;"	f	class:AbstractShader
setVec4Array	src/core/shader_common.cpp	/^void AbstractShader::setVec4Array (const std::string& name, std::vector<vec4>& value) {$/;"	f	class:AbstractShader
setVec4Array	src/core/shader_common.cpp	/^void AbstractShader::setVec4Array (const std::string& name, vec4* value) {$/;"	f	class:AbstractShader
setVideoMode	src/core/display.cpp	/^void SDLAppDisplay::setVideoMode(int width, int height, bool fullscreen) {$/;"	f	class:SDLAppDisplay
setWidth	src/core/ui/label.cpp	/^void UILabel::setWidth(float width) {$/;"	f	class:UILabel
setWrapStyle	src/core/texture.cpp	/^void TextureResource::setWrapStyle(GLint wrap) {$/;"	f	class:TextureResource
setZBufferDepth	src/core/display.cpp	/^void SDLAppDisplay::setZBufferDepth(int zbuffer_depth) {$/;"	f	class:SDLAppDisplay
set_utc_tz	src/core/timezone.cpp	/^void set_utc_tz() {$/;"	f
settings	src/settings.cpp	/^LogstalgiaSettings settings;$/;"	v
setupExtensions	src/core/display.cpp	/^void SDLAppDisplay::setupExtensions() {$/;"	f	class:SDLAppDisplay
shader	src/core/shader_common.h	/^    AbstractShader* shader;$/;"	m	class:ShaderUniform
shader	src/core/ui/ui.h	/^    Shader* shader;$/;"	m	class:UI
shader_object	src/core/shader_common.h	/^    unsigned int shader_object;$/;"	m	class:AbstractShaderPass
shader_object_desc	src/core/shader_common.h	/^    std::string  shader_object_desc;$/;"	m	class:AbstractShaderPass
shader_object_source	src/core/shader_common.h	/^    std::string shader_object_source;$/;"	m	class:AbstractShaderPass
shader_object_type	src/core/shader_common.h	/^    int          shader_object_type;$/;"	m	class:AbstractShaderPass
shadermanager	src/core/shader.cc	/^ShaderManager shadermanager;$/;"	v
shadow	src/core/fxfont.h	/^    bool shadow;$/;"	m	class:FXFont
shadow	src/core/ui/image.h	/^    float shadow;$/;"	m	class:UIImage
shadowOffset	src/core/fxfont.cpp	/^void FXFont::shadowOffset(float x, float y) {$/;"	f	class:FXFont
shadowStrength	src/core/fxfont.cpp	/^void FXFont::shadowStrength(float s) {$/;"	f	class:FXFont
shadow_colour	src/core/fxfont.h	/^    vec4 shadow_colour;$/;"	m	class:FXFont
shadow_offset	src/core/fxfont.h	/^    vec2 shadow_offset;$/;"	m	class:FXFont
shadow_offset	src/core/ui/image.h	/^    vec2  shadow_offset;$/;"	m	class:UIImage
shadow_strength	src/core/fxfont.h	/^    float shadow_strength;$/;"	m	class:FXFont
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
show	src/core/ui/element.h	/^    void show() { hidden=false; };$/;"	f	class:UIElement
show	src/slider.cpp	/^void PositionSlider::show() {$/;"	f	class:PositionSlider
showConsole	src/core/sdlapp.cpp	/^void SDLApp::showConsole(bool show) {$/;"	f	class:SDLApp
showContext	src/core/shader_common.cpp	/^void AbstractShaderPass::showContext(std::string& context, int line_no, int amount) {$/;"	f	class:AbstractShaderPass
showCount	src/summarizer.cpp	/^void Summarizer::showCount(bool showcount) {$/;"	f	class:Summarizer
showCursor	src/core/mousecursor.cpp	/^void MouseCursor::showCursor(bool show) {$/;"	f	class:MouseCursor
showHelp	src/core/sdlapp.h	/^    bool showHelp() const { return showhelp; }$/;"	f	class:SDLAppException
showHide	src/core/ui/console.cpp	/^void UIConsole::showHide() {$/;"	f	class:UIConsole
showcount	src/summarizer.h	/^    bool showcount;$/;"	m	class:SummItem
showcount	src/summarizer.h	/^    bool showcount;$/;"	m	class:Summarizer
showhelp	src/core/sdlapp.h	/^    bool showhelp;$/;"	m	class:SDLAppException
simu_speed	src/logstalgia.h	/^    float simu_speed;$/;"	m	class:Logstalgia
simulation_speed	src/settings.h	/^    float simulation_speed;$/;"	m	class:LogstalgiaSettings
size	src/ball.h	/^    float size;$/;"	m	class:ProjectedBall
size	src/core/fxfont.h	/^    int size;$/;"	m	class:FXGlyphSet
slider	src/core/ui/label.h	/^    UISlider* slider;$/;"	m	class:UILabel
slider	src/core/ui/slider.h	/^    UIFloatSlider* slider;$/;"	m	class:UILabelFloatSlider
slider	src/core/ui/slider.h	/^    UIIntSlider* slider;$/;"	m	class:UILabelIntSlider
slider	src/logstalgia.h	/^    PositionSlider slider;$/;"	m	class:Logstalgia
slider_width	src/core/ui/slider.h	/^    float slider_width;$/;"	m	class:UISlider
slidercol	src/slider.h	/^    vec3 slidercol;$/;"	m	class:PositionSlider
slidertex	src/core/ui/slider.h	/^    TextureResource* slidertex;$/;"	m	class:UISlider
snap	src/core/vectors.h	/^    const lerp2& snap() {$/;"	f	class:lerp2
snap	src/core/vectors.h	/^    const lerp3& snap() {$/;"	f	class:lerp3
solid_colour	src/core/ui/ui.h	/^    vec4 solid_colour;$/;"	m	class:UI
source	src/core/shader_common.h	/^    std::string source;$/;"	m	class:AbstractShaderPass
source	src/core/shader_common.h	/^    std::string source;$/;"	m	class:ShaderException
source	src/summarizer.h	/^    SummNode* source;$/;"	m	class:SummUnit
spawn_delay	src/logstalgia.h	/^    float spawn_delay;$/;"	m	class:Logstalgia
spawn_speed	src/logstalgia.h	/^    float spawn_speed;$/;"	m	class:Logstalgia
speed	src/ball.h	/^    float speed;$/;"	m	class:ProjectedBall
splash	src/settings.h	/^    float splash;$/;"	m	class:LogstalgiaSettings
srcdir	Makefile	/^srcdir = .$/;"	m
start	src/ball.h	/^    vec2 start;$/;"	m	class:Line
start	src/core/timer.cpp	/^void GLTimer::start() {$/;"	f	class:GLTimer
start	src/requestball.h	/^    vec2 start;$/;"	m	class:RequestBall
startBuffer	src/core/fxfont.cpp	/^void FXFontManager::startBuffer() {$/;"	f	class:FXFontManager
startThread	src/core/png_writer.cpp	/^int PNGExporter::startThread(void *exporter) {$/;"	f	class:PNGExporter
startThread	src/core/tga.cpp	/^int TGAExporter::startThread(void *exporter) {$/;"	f	class:TGAExporter
start_index	src/core/vbo.h	/^    int start_index;$/;"	m	class:quadbuf_tex
start_position	src/settings.h	/^    float start_position;$/;"	m	class:LogstalgiaSettings
start_time	src/settings.h	/^    time_t start_time;$/;"	m	class:LogstalgiaSettings
start_x	src/ball.h	/^    float start_x;$/;"	m	class:ProjectedBall
start_y	src/paddle.h	/^    int   start_y;$/;"	m	class:Paddle
starttime	src/logstalgia.h	/^    time_t starttime;$/;"	m	class:Logstalgia
stdin_handle	src/core/seeklog.h	/^    HANDLE stdin_handle;$/;"	m	class:StreamLog
stickToEnd	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::stickToEnd() {$/;"	f	class:UIScrollBar
stick_to_end	src/core/ui/scroll_bar.h	/^    bool stick_to_end;$/;"	m	class:UIScrollBar
stop	src/core/png_writer.cpp	/^void PNGExporter::stop() {$/;"	f	class:PNGExporter
stop	src/core/ppm.cpp	/^void FrameExporter::stop() {$/;"	f	class:FrameExporter
stop	src/core/sdlapp.cpp	/^void SDLApp::stop(int return_code) {$/;"	f	class:SDLApp
stop	src/core/tga.cpp	/^void TGAExporter::stop() {$/;"	f	class:TGAExporter
stop	src/core/timer.cpp	/^void GLTimer::stop() {$/;"	f	class:GLTimer
stop_position	src/settings.h	/^    float stop_position;$/;"	m	class:LogstalgiaSettings
stop_time	src/settings.h	/^    time_t stop_time;$/;"	m	class:LogstalgiaSettings
str	src/summarizer.h	/^    std::string str;$/;"	m	class:SummUnit
stream	src/core/logger.h	/^    FILE* stream;$/;"	m	class:Logger
stream	src/core/seeklog.h	/^    std::istream* stream;$/;"	m	class:BaseLog
streamlog	src/logstalgia.h	/^    StreamLog* streamlog;$/;"	m	class:Logstalgia
stringHash	src/core/stringhash.cpp	/^int stringHash(const std::string& str) {$/;"	f
strings	src/summarizer.h	/^    std::vector<SummUnit> strings;$/;"	m	class:Summarizer
subdir	Makefile	/^subdir = .$/;"	m
submit	src/core/ui/console.cpp	/^bool UIConsolePrompt::submit() {$/;"	f	class:UIConsolePrompt
submit	src/core/ui/element.h	/^    virtual bool submit() { return false; };$/;"	f	class:UIElement
submit	src/core/ui/file_selector.cpp	/^bool UIDirInputLabel::submit() {$/;"	f	class:UIDirInputLabel
submit	src/core/ui/file_selector.cpp	/^bool UIFileInputLabel::submit() {$/;"	f	class:UIFileInputLabel
submit	src/core/ui/file_selector.cpp	/^bool UIFileSelectorLabel::submit() {$/;"	f	class:UIFileSelectorLabel
submit	src/core/ui/label.cpp	/^bool UIColourLabel::submit() {$/;"	f	class:UIColourLabel
submit	src/core/ui/label.cpp	/^bool UIFloatLabel::submit() {$/;"	f	class:UIFloatLabel
submit	src/core/ui/label.cpp	/^bool UIIntLabel::submit() {$/;"	f	class:UIIntLabel
submit	src/core/ui/label.cpp	/^bool UILabel::submit() {$/;"	f	class:UILabel
submit	src/core/ui/select.cpp	/^bool UIOptionLabel::submit() {$/;"	f	class:UIOptionLabel
substitute	src/core/shader_common.cpp	/^void AbstractShader::substitute(std::string& source, const std::string& name, const std::string& value) {$/;"	f	class:AbstractShader
substitute	src/core/shader_common.cpp	/^void ShaderPart::substitute(const std::string& name, const char *value, ...) {$/;"	f	class:ShaderPart
substitute	src/core/shader_common.cpp	/^void ShaderPart::substitute(const std::string& name, const std::string& value) {$/;"	f	class:ShaderPart
substitutions	src/core/shader_common.h	/^    std::map<std::string,std::string> substitutions;$/;"	m	class:AbstractShader
substitutions	src/core/shader_common.h	/^    std::map<std::string,std::string> substitutions;$/;"	m	class:ShaderPart
successful	src/logentry.h	/^    bool successful;$/;"	m	class:LogEntry
summ_wildcard	src/summarizer.cpp	/^const char* summ_wildcard = "*";$/;"	v
summarize	src/summarizer.cpp	/^int SummNode::summarize(std::vector<SummUnit>& strvec, int no_words) {$/;"	f	class:SummNode
summarize	src/summarizer.cpp	/^void Summarizer::summarize() {$/;"	f	class:Summarizer
summarizer_types	src/logstalgia.h	/^    std::map<std::string, std::vector<Summarizer*>*> summarizer_types;$/;"	m	class:Logstalgia
summarizers	src/logstalgia.h	/^    std::vector<Summarizer*> summarizers;$/;"	m	class:Logstalgia
supportedString	src/summarizer.cpp	/^bool Summarizer::supportedString(const std::string& str) {$/;"	f	class:Summarizer
surface	src/core/display.h	/^    SDL_Surface *surface;$/;"	m	class:SDLAppDisplay
sync	src/logstalgia.h	/^    bool sync;$/;"	m	class:Logstalgia
sync	src/settings.h	/^    bool sync;$/;"	m	class:LogstalgiaSettings
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
system_cursor	src/core/mousecursor.h	/^    bool system_cursor;$/;"	m	class:MouseCursor
tab	src/core/ui/console.cpp	/^void UIConsolePrompt::tab() {$/;"	f	class:UIConsolePrompt
tab	src/core/ui/file_selector.cpp	/^void UIDirInputLabel::tab() {$/;"	f	class:UIDirInputLabel
tab	src/core/ui/file_selector.cpp	/^void UIFileInputLabel::tab() {$/;"	f	class:UIFileInputLabel
tab	src/core/ui/label.cpp	/^void UILabel::tab() {$/;"	f	class:UILabel
tab_width	src/core/fxfont.h	/^    float tab_width;$/;"	m	class:FXGlyphSet
take_screenshot	src/logstalgia.h	/^    bool take_screenshot;$/;"	m	class:Logstalgia
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
target	src/core/texture.h	/^    GLenum target;$/;"	m	class:TextureResource
target	src/paddle.h	/^    RequestBall* target;$/;"	m	class:Paddle
target_alias	Makefile	/^target_alias = $/;"	m
target_x	src/summarizer.h	/^    float target_x;$/;"	m	class:SummItem
tex	src/requestball.h	/^    TextureResource* tex;$/;"	m	class:RequestBall
texcoord	src/core/vbo.h	/^    vec2 texcoord;$/;"	m	class:quadbuf_vertex
texcoords	src/core/fxfont.h	/^    vec4 texcoords;$/;"	m	class:FXGlyph
text	src/core/ui/label.h	/^    std::string text;$/;"	m	class:UILabel
textEdit	src/core/sdlapp.h	/^    virtual void textEdit(SDL_TextEditingEvent* e) {};$/;"	f	class:SDLApp
textEdit	src/core/ui/ui.cpp	/^void UI::textEdit(SDL_TextEditingEvent* e) {$/;"	f	class:UI
textInput	src/core/sdlapp.h	/^    virtual void textInput(SDL_TextInputEvent* e)  {};$/;"	f	class:SDLApp
textInput	src/core/ui/ui.cpp	/^void UI::textInput(SDL_TextInputEvent *e) {$/;"	f	class:UI
text_changed	src/core/ui/label.h	/^    bool text_changed;$/;"	m	class:UILabel
text_colour	src/core/ui/label.h	/^    vec4 text_colour;$/;"	m	class:UILabel
text_colour	src/core/ui/ui.h	/^    vec4 text_colour;$/;"	m	class:UI
texture	src/core/fxfont.h	/^    TextureResource* texture;$/;"	m	class:FXGlyphPage
texture_changes	src/core/vbo.cpp	/^size_t quadbuf::texture_changes() {$/;"	f	class:quadbuf
texture_data	src/core/fxfont.h	/^    GLubyte* texture_data;$/;"	m	class:FXGlyphPage
textureid	src/core/texture.h	/^    GLuint textureid;$/;"	m	class:TextureResource
textureid	src/core/vbo.h	/^    GLuint textureid;$/;"	m	class:quadbuf_tex
texturemanager	src/core/texture.cpp	/^TextureManager texturemanager;$/;"	v
textures	src/core/vbo.h	/^    std::vector<quadbuf_tex> textures;$/;"	m	class:quadbuf
tga_exporter_state	src/core/tga.h	/^enum tga_exporter_state { TGA_EXPORTER_WAIT, TGA_EXPORTER_WRITE, TGA_EXPORTER_EXIT, TGA_EXPORTER_STOPPED };$/;"	g
thread	src/core/png_writer.h	/^    SDL_Thread* thread;$/;"	m	class:PNGExporter
thread	src/core/ppm.h	/^    SDL_Thread* thread;$/;"	m	class:FrameExporter
thread	src/core/tga.h	/^    SDL_Thread* thread;$/;"	m	class:TGAExporter
thread_state	src/core/png_writer.h	/^    int thread_state;$/;"	m	class:PNGExporter
thread_state	src/core/tga.h	/^    int thread_state;$/;"	m	class:TGAExporter
time_scale	src/logstalgia.h	/^    float time_scale;$/;"	m	class:Logstalgia
timeout	src/core/mousecursor.h	/^    float timeout;$/;"	m	class:MouseCursor
timestamp	src/logentry.h	/^    time_t timestamp;$/;"	m	class:LogEntry
tint_colour	src/core/ui/ui.h	/^    vec4 tint_colour;$/;"	m	class:UI
title	src/summarizer.h	/^    std::string title;$/;"	m	class:Summarizer
toColour	src/core/ui/colour.cpp	/^vec3 UIColour::toColour(float hue, float saturation, float lightness) {$/;"	f	class:UIColour
toColour	src/core/ui/colour.cpp	/^void UIColour::toColour() {$/;"	f	class:UIColour
toHSL	src/core/ui/colour.cpp	/^void UIColour::toHSL() {$/;"	f	class:UIColour
toHSL	src/core/ui/colour.cpp	/^void UIColour::toHSL(const vec3& colour, float& hue, float& saturation, float& lightness) {$/;"	f	class:UIColour
toString	src/core/shader_common.cpp	/^void AbstractShaderPass::toString(std::string& out) {$/;"	f	class:AbstractShaderPass
toggle	src/core/ui/file_selector.cpp	/^void UIFileSelector::toggle() {$/;"	f	class:UIFileSelector
toggle	src/core/ui/group.cpp	/^void UIGroup::toggle() {$/;"	f	class:UIGroup
toggle	src/core/ui/subgroup.cpp	/^bool UISubGroup::toggle() {$/;"	f	class:UISubGroup
toggleFullscreen	src/core/display.cpp	/^void SDLAppDisplay::toggleFullscreen() {$/;"	f	class:SDLAppDisplay
toggleFullscreen	src/logstalgia.cpp	/^void Logstalgia::toggleFullscreen() {$/;"	f	class:Logstalgia
togglePause	src/logstalgia.cpp	/^void Logstalgia::togglePause() {$/;"	f	class:Logstalgia
token	src/paddle.h	/^    std::string token;$/;"	m	class:Paddle
token_colour	src/paddle.h	/^    vec3 token_colour;$/;"	m	class:Paddle
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_gap	src/summarizer.h	/^    float top_gap, bottom_gap;$/;"	m	class:Summarizer
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
total_distance	src/ball.h	/^    float total_distance;$/;"	m	class:ProjectedBall
total_entries	src/logstalgia.h	/^    int total_entries;$/;"	m	class:Logstalgia
total_space	src/logstalgia.h	/^    int total_space;$/;"	m	class:Logstalgia
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transparent	src/core/settings.h	/^    bool transparent;$/;"	m	class:SDLAppSettings
tree	src/core/quadtree.h	/^    QuadTree* tree;$/;"	m	class:QuadNode
trilinear	src/core/texture.h	/^    bool trilinear;$/;"	m	class:TextureManager
trim	src/core/conffile.cpp	/^void ConfFile::trim(std::string& value) {$/;"	f	class:ConfFile
truncated	src/summarizer.h	/^    bool truncated;$/;"	m	class:SummUnit
type_name	src/core/shader_common.h	/^    std::string type_name;$/;"	m	class:ShaderUniform
tz_initialized	src/core/timezone.cpp	/^bool tz_initialized = false;$/;"	v
u16	src/core/utf8/checked.h	/^        uint16_t u16;$/;"	m	class:utf8::invalid_utf16
u8	src/core/utf8/checked.h	/^        uint8_t u8;$/;"	m	class:utf8::invalid_utf8
ui	src/core/ui/element.h	/^    UI* ui;$/;"	m	class:UIElement
ui_alpha	src/core/ui/ui.h	/^    vec4 ui_alpha;$/;"	m	class:UI
ui_colour	src/core/ui/colour.h	/^    UIColour* ui_colour;$/;"	m	class:UILabelColour
uint16_t	src/core/utf8/core.h	/^    typedef unsigned short  uint16_t;$/;"	t	namespace:utf8
uint32_t	src/core/utf8/core.h	/^    typedef unsigned int    uint32_t;$/;"	t	namespace:utf8
uint8_t	src/core/utf8/core.h	/^    typedef unsigned char   uint8_t;$/;"	t	namespace:utf8
unbind	src/core/shader.cc	/^void Shader::unbind() {$/;"	f	class:Shader
unbind	src/core/vbo.h	/^    void unbind() {$/;"	f	class:VBO
unchecked	src/core/utf8/unchecked.h	/^    namespace unchecked $/;"	n	namespace:utf8
uniform_type	src/core/shader_common.h	/^    int uniform_type;$/;"	m	class:ShaderUniform
uniforms	src/core/shader_common.h	/^    std::list<ShaderUniform*> uniforms;$/;"	m	class:AbstractShaderPass
uniforms	src/core/shader_common.h	/^    std::map<std::string, ShaderUniform*>  uniforms;$/;"	m	class:AbstractShader
uninst	dev/bin/build_win32.pl	/^ uninst:$/;"	l
unique_item_count	src/core/quadtree.h	/^    int unique_item_count;$/;"	m	class:QuadTree
unit	src/summarizer.h	/^    SummUnit unit;$/;"	m	class:SummItem
unit_scale	src/core/fxfont.h	/^    vec2 unit_scale;$/;"	m	class:FXGlyphSet
unknownOptionException	src/core/conffile.cpp	/^void ConfFile::unknownOptionException(ConfEntry* entry) {$/;"	f	class:ConfFile
unload	src/core/fxfont.cpp	/^void FXFontManager::unload() {$/;"	f	class:FXFontManager
unload	src/core/shader.cc	/^void Shader::unload() {$/;"	f	class:Shader
unload	src/core/shader.cc	/^void ShaderManager::unload() {$/;"	f	class:ShaderManager
unload	src/core/shader.cc	/^void ShaderPass::unload() {$/;"	f	class:ShaderPass
unload	src/core/shader_common.cpp	/^void ShaderUniform::unload() {$/;"	f	class:ShaderUniform
unload	src/core/texture.cpp	/^void TextureManager::unload() {$/;"	f	class:TextureManager
unload	src/core/texture.cpp	/^void TextureResource::unload() {$/;"	f	class:TextureResource
unload	src/core/timer.cpp	/^void GLTimer::unload() {$/;"	f	class:GLTimer
unload	src/core/vbo.cpp	/^void quadbuf::unload() {$/;"	f	class:quadbuf
unload	src/core/vbo.h	/^    void unload() {$/;"	f	class:VBO
unproject	src/core/display.cpp	/^vec3 SDLAppDisplay::unproject(vec2 pos) {$/;"	f	class:SDLAppDisplay
unset_utc_tz	src/core/timezone.cpp	/^void unset_utc_tz() {$/;"	f
update	src/core/bounds.h	/^    void update(const Bounds2D& bounds) {$/;"	f	class:Bounds2D
update	src/core/bounds.h	/^    void update(const vec2& point) {$/;"	f	class:Bounds2D
update	src/core/bounds.h	/^    void update(vec3 point) {$/;"	f	class:Bounds3D
update	src/core/display.cpp	/^void SDLAppDisplay::update() {$/;"	f	class:SDLAppDisplay
update	src/core/frustum.cpp	/^void Frustum::update(const vec3& source, const vec3& target, const vec3& up, float fov, float near_distance, float far_distance) {$/;"	f	class:Frustum
update	src/core/sdlapp.h	/^    virtual void update(float t, float dt) {};$/;"	f	class:SDLApp
update	src/core/ui/button.cpp	/^void UIButton::update(float dt) {$/;"	f	class:UIButton
update	src/core/ui/console.cpp	/^void UIConsole::update(float dt) {$/;"	f	class:UIConsole
update	src/core/ui/element.cpp	/^void UIElement::update(float dt) {$/;"	f	class:UIElement
update	src/core/ui/file_selector.cpp	/^void UIFileSelector::update(float dt) {$/;"	f	class:UIFileSelector
update	src/core/ui/label.cpp	/^void UILabel::update(float dt) {$/;"	f	class:UILabel
update	src/core/ui/layout.cpp	/^void UILayout::update(float dt) {$/;"	f	class:UILayout
update	src/core/ui/layout.cpp	/^void UIResizableLayout::update(float dt) {$/;"	f	class:UIResizableLayout
update	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::update(float dt) {$/;"	f	class:UIScrollLayout
update	src/core/ui/select.cpp	/^void UISelect::update(float dt) {$/;"	f	class:UISelect
update	src/core/ui/ui.cpp	/^void UI::update(float dt) {$/;"	f	class:UI
update	src/core/vbo.cpp	/^void quadbuf::update() {$/;"	f	class:quadbuf
update	src/logstalgia.cpp	/^void Logstalgia::update(float t, float dt) {$/;"	f	class:Logstalgia
updateContent	src/core/ui/console.cpp	/^void UIConsolePrompt::updateContent() {$/;"	f	class:UIConsolePrompt
updateContent	src/core/ui/element.h	/^    virtual void updateContent() {};$/;"	f	class:UIElement
updateContent	src/core/ui/file_selector.cpp	/^void UIFileSelectorLabel::updateContent() {$/;"	f	class:UIFileSelectorLabel
updateContent	src/core/ui/label.cpp	/^void UIColourLabel::updateContent() {$/;"	f	class:UIColourLabel
updateContent	src/core/ui/label.cpp	/^void UIFloatLabel::updateContent() {$/;"	f	class:UIFloatLabel
updateContent	src/core/ui/label.cpp	/^void UIIntLabel::updateContent() {$/;"	f	class:UIIntLabel
updateFramerate	src/core/sdlapp.cpp	/^void SDLApp::updateFramerate() {$/;"	f	class:SDLApp
updateGroups	src/logstalgia.cpp	/^void Logstalgia::updateGroups(float dt) {$/;"	f	class:Logstalgia
updateHistory	src/core/ui/console.cpp	/^void UIConsole::updateHistory() {$/;"	f	class:UIConsole
updateListing	src/core/ui/file_selector.cpp	/^void UIFileSelector::updateListing() {$/;"	f	class:UIFileSelector
updatePerspective	src/core/frustum.cpp	/^void Frustum::updatePerspective(float fov, float near_distance, float far_distance) {$/;"	f	class:Frustum
updatePos	src/core/mousecursor.cpp	/^void MouseCursor::updatePos(const vec2& pos) {$/;"	f	class:MouseCursor
updatePos	src/core/ui/element.h	/^    virtual void updatePos(const vec2& pos) { this->pos = pos; };$/;"	f	class:UIElement
updatePos	src/core/ui/layout.cpp	/^void UILayout::updatePos(const vec2& pos) {$/;"	f	class:UILayout
updatePos	src/core/ui/layout.cpp	/^void UIResizableLayout::updatePos(const vec2& pos) {$/;"	f	class:UIResizableLayout
updatePos	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::updatePos() {$/;"	f	class:UIScrollBar
updatePos	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::updatePos(const vec2& pos) {$/;"	f	class:UIScrollLayout
updatePos	src/core/ui/select.cpp	/^void UISelect::updatePos(const vec2& pos) {$/;"	f	class:UISelect
updateQuadItemBounds	src/core/quadtree.h	/^    virtual void updateQuadItemBounds() {};$/;"	f	class:QuadItem
updateRect	src/core/ui/colour.cpp	/^void UIColour::updateRect() {$/;"	f	class:UIColour
updateRect	src/core/ui/colour.cpp	/^void UIColourSlider::updateRect() {$/;"	f	class:UIColourSlider
updateRect	src/core/ui/console.cpp	/^void UIConsolePrompt::updateRect() {$/;"	f	class:UIConsolePrompt
updateRect	src/core/ui/element.h	/^    virtual void updateRect() {};$/;"	f	class:UIElement
updateRect	src/core/ui/label.cpp	/^void UILabel::updateRect() {$/;"	f	class:UILabel
updateRect	src/core/ui/scroll_bar.cpp	/^void UIScrollBar::updateRect() {$/;"	f	class:UIScrollBar
updateTexture	src/core/fxfont.cpp	/^void FXGlyphPage::updateTexture() {$/;"	f	class:FXGlyphPage
updateUnit	src/summarizer.cpp	/^void SummItem::updateUnit(SummUnit& unit) {$/;"	f	class:SummItem
updateView	src/core/frustum.cpp	/^void Frustum::updateView(const vec3& source, const vec3& target, const vec3& up) {$/;"	f	class:Frustum
updateZIndex	src/core/ui/element.cpp	/^void UIElement::updateZIndex() {$/;"	f	class:UIElement
updateZIndex	src/core/ui/scroll_layout.cpp	/^void UIScrollLayout::updateZIndex() {$/;"	f	class:UIScrollLayout
update_rate	src/logstalgia.h	/^    float update_rate;$/;"	m	class:Logstalgia
update_rate	src/settings.h	/^    float update_rate;$/;"	m	class:LogstalgiaSettings
use	src/core/shader_common.cpp	/^void AbstractShader::use() {$/;"	f	class:AbstractShader
useSystemCursor	src/core/mousecursor.cpp	/^void MouseCursor::useSystemCursor(bool system_cursor) {$/;"	f	class:MouseCursor
use_vbo	src/core/fxfont.h	/^    bool use_vbo;$/;"	m	class:FXFontManager
usedChildren	src/core/quadtree.cpp	/^int QuadNode::usedChildren() {$/;"	f	class:QuadNode
user_agent	src/logentry.h	/^    std::string user_agent;$/;"	m	class:LogEntry
utf16_word	src/core/utf8/checked.h	/^        uint16_t utf16_word() const {return u16;}$/;"	f	class:utf8::invalid_utf16
utf16to8	src/core/utf8/checked.h	/^    octet_iterator utf16to8 (u16bit_iterator start, u16bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8
utf16to8	src/core/utf8/unchecked.h	/^        octet_iterator utf16to8 (u16bit_iterator start, u16bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8::unchecked
utf32to8	src/core/utf8/checked.h	/^    octet_iterator utf32to8 (u32bit_iterator start, u32bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8
utf32to8	src/core/utf8/unchecked.h	/^        octet_iterator utf32to8 (u32bit_iterator start, u32bit_iterator end, octet_iterator result)$/;"	f	namespace:utf8::unchecked
utf8	src/core/utf8/checked.h	/^namespace utf8$/;"	n
utf8	src/core/utf8/core.h	/^namespace utf8$/;"	n
utf8	src/core/utf8/unchecked.h	/^namespace utf8$/;"	n
utf8_octet	src/core/utf8/checked.h	/^        uint8_t utf8_octet() const {return u8;}$/;"	f	class:utf8::invalid_utf8
utf8bytes	src/core/ftgl/FTUnicode.h	/^    static const char utf8bytes[256];$/;"	m	class:FTUnicodeStringItr
utf8bytes	src/core/ftgl/FTUnicode.h	/^const char FTUnicodeStringItr<T>::utf8bytes[256] = {$/;"	m	class:FTUnicodeStringItr
utf8to16	src/core/utf8/checked.h	/^    u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)$/;"	f	namespace:utf8
utf8to16	src/core/utf8/unchecked.h	/^        u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)$/;"	f	namespace:utf8::unchecked
utf8to32	src/core/utf8/checked.h	/^    u32bit_iterator utf8to32 (octet_iterator start, octet_iterator end, u32bit_iterator result)$/;"	f	namespace:utf8
utf8to32	src/core/utf8/unchecked.h	/^        u32bit_iterator utf8to32 (octet_iterator start, octet_iterator end, u32bit_iterator result)$/;"	f	namespace:utf8::unchecked
utf_error	src/core/utf8/core.h	/^    enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};$/;"	g	namespace:utf8::internal
valid	src/core/regex.h	/^    bool valid;$/;"	m	class:Regex
validate	src/logentry.cpp	/^bool LogEntry::validate() {$/;"	f	class:LogEntry
validate_next	src/core/utf8/core.h	/^    inline utf_error validate_next(octet_iterator& it, octet_iterator end) {$/;"	f	namespace:utf8::internal
validate_next	src/core/utf8/core.h	/^    utf_error validate_next(octet_iterator& it, octet_iterator end, uint32_t* code_point)$/;"	f	namespace:utf8::internal
value	src/core/conffile.h	/^    std::string value;$/;"	m	class:ConfEntry
value	src/core/shader_common.h	/^    bool value;$/;"	m	class:BoolShaderUniform
value	src/core/shader_common.h	/^    float value;$/;"	m	class:FloatShaderUniform
value	src/core/shader_common.h	/^    int value;$/;"	m	class:IntShaderUniform
value	src/core/shader_common.h	/^    int value;$/;"	m	class:Sampler1DShaderUniform
value	src/core/shader_common.h	/^    int value;$/;"	m	class:Sampler2DShaderUniform
value	src/core/shader_common.h	/^    mat3 value;$/;"	m	class:Mat3ShaderUniform
value	src/core/shader_common.h	/^    mat4 value;$/;"	m	class:Mat4ShaderUniform
value	src/core/shader_common.h	/^    std::vector<vec2> value;$/;"	m	class:Vec2ArrayShaderUniform
value	src/core/shader_common.h	/^    std::vector<vec3> value;$/;"	m	class:Vec3ArrayShaderUniform
value	src/core/shader_common.h	/^    std::vector<vec4> value;$/;"	m	class:Vec4ArrayShaderUniform
value	src/core/shader_common.h	/^    vec2 value;$/;"	m	class:Vec2ShaderUniform
value	src/core/shader_common.h	/^    vec3 value;$/;"	m	class:Vec3ShaderUniform
value	src/core/shader_common.h	/^    vec4 value;$/;"	m	class:Vec4ShaderUniform
value	src/core/ui/checkbox.h	/^    bool* value;$/;"	m	class:UIBoolCheckbox
value	src/core/ui/checkbox.h	/^    float* value;$/;"	m	class:UIFloatCheckbox
value	src/core/ui/label.h	/^    float* value;$/;"	m	class:UIFloatLabel
value	src/core/ui/label.h	/^    int* value;$/;"	m	class:UIIntLabel
value	src/core/ui/label.h	/^    std::string* value;$/;"	m	class:UILabel
value	src/core/ui/label.h	/^    vec3* value;$/;"	m	class:UILabelVec3
value	src/core/ui/select.h	/^    int value;$/;"	m	class:UIIntSelectAction
value	src/core/ui/select.h	/^    std::string value;$/;"	m	class:UIOptionLabel
value	src/core/ui/slider.h	/^    float* value;$/;"	m	class:UIFloatSlider
value	src/core/ui/slider.h	/^    int* value;$/;"	m	class:UIIntSlider
vec2Hash	src/core/stringhash.cpp	/^vec2 vec2Hash(const std::string& str) {$/;"	f
vec3Hash	src/core/stringhash.cpp	/^vec3 vec3Hash(const std::string& str) {$/;"	f
vel	src/ball.h	/^    vec2 vel;$/;"	m	class:ProjectedBall
version	src/core/shader_common.h	/^    int version;$/;"	m	class:AbstractShaderPass
vertex_capacity	src/core/vbo.h	/^    int vertex_capacity;$/;"	m	class:quadbuf
vertex_count	src/core/vbo.h	/^    int vertex_count;$/;"	m	class:quadbuf
vertex_positions	src/core/fxfont.h	/^    vec2 vertex_positions[4];$/;"	m	class:FXGlyph
vertex_shader	src/core/shader_common.h	/^    AbstractShaderPass* vertex_shader;$/;"	m	class:AbstractShader
vertex_texcoords	src/core/fxfont.h	/^    vec2 vertex_texcoords[4];$/;"	m	class:FXGlyph
vertical_scrollbar	src/core/ui/scroll_layout.h	/^    UIScrollBar* vertical_scrollbar;$/;"	m	class:UIScrollLayout
vertices	src/core/vbo.cpp	/^size_t quadbuf::vertices() {$/;"	f	class:quadbuf
vhost	src/logentry.h	/^    std::string vhost;$/;"	m	class:LogEntry
view_ratio	src/core/frustum.h	/^    float view_ratio;$/;"	m	class:Frustum
visible	src/paddle.cpp	/^bool Paddle::visible() {$/;"	f	class:Paddle
visible	src/textarea.h	/^    bool visible;$/;"	m	class:TextArea
visitItemsAt	src/core/quadtree.cpp	/^void QuadNode::visitItemsAt(const vec2 & pos, VisitFunctor<QuadItem> & visit){$/;"	f	class:QuadNode
visitItemsAt	src/core/quadtree.cpp	/^void QuadTree::visitItemsAt(const vec2 & pos, VisitFunctor<QuadItem> & visit){$/;"	f	class:QuadTree
visitItemsInBounds	src/core/quadtree.cpp	/^void QuadNode::visitItemsInBounds(const Bounds2D & bounds, VisitFunctor<QuadItem> & visit){$/;"	f	class:QuadNode
visitItemsInBounds	src/core/quadtree.cpp	/^void QuadTree::visitItemsInBounds(const Bounds2D & bounds, VisitFunctor<QuadItem> & visit){$/;"	f	class:QuadTree
visitItemsInFrustum	src/core/quadtree.cpp	/^void QuadNode::visitItemsInFrustum(const Frustum & frustum, VisitFunctor<QuadItem> & visit){$/;"	f	class:QuadNode
visitItemsInFrustum	src/core/quadtree.cpp	/^void QuadTree::visitItemsInFrustum(const Frustum & frustum, VisitFunctor<QuadItem> & visit){$/;"	f	class:QuadTree
visitLeavesInFrustum	src/core/quadtree.cpp	/^void QuadNode::visitLeavesInFrustum(const Frustum& frustum, VisitFunctor<QuadNode> & visit){$/;"	f	class:QuadNode
visitLeavesInFrustum	src/core/quadtree.cpp	/^void QuadTree::visitLeavesInFrustum(const Frustum& frustum, VisitFunctor<QuadNode> & visit){$/;"	f	class:QuadTree
vsync	src/core/display.h	/^    bool vsync;$/;"	m	class:SDLAppDisplay
vsync	src/core/settings.h	/^    bool vsync;$/;"	m	class:SDLAppSettings
w	src/core/texture.h	/^    int w, h;$/;"	m	class:TextureResource
warnLog	src/core/logger.cpp	/^void warnLog(const char *str, ...) {$/;"	f
what	src/core/conffile.h	/^    virtual const char* what() const throw() { return errmsg.c_str(); }$/;"	f	class:ConfFileException
what	src/core/display.h	/^    virtual const char* what() const throw() { return error.c_str(); }$/;"	f	class:SDLInitException
what	src/core/png_writer.h	/^    virtual const char* what() const throw() { return filename.c_str(); };$/;"	f	class:PNGExporterException
what	src/core/ppm.h	/^    virtual const char* what() const throw() { return filename.c_str(); }$/;"	f	class:PPMExporterException
what	src/core/regex.h	/^    virtual const char* what() const throw() { return regex.c_str(); }$/;"	f	class:RegexCompilationException
what	src/core/resource.h	/^    virtual const char* what() const throw() { return resource.c_str(); }$/;"	f	class:ResourceException
what	src/core/sdlapp.h	/^    virtual const char* what() const throw() { return message.c_str(); }$/;"	f	class:SDLAppException
what	src/core/seeklog.h	/^    virtual const char* what() const throw() { return filename.c_str(); }$/;"	f	class:SeekLogException
what	src/core/shader_common.h	/^    virtual const char* what() const throw() { return message.c_str(); }$/;"	f	class:ShaderException
what	src/core/tga.h	/^    virtual const char* what() const throw() { return filename.c_str(); };$/;"	f	class:TGAExporterException
what	src/core/utf8/checked.h	/^        virtual const char* what() const throw() { return "Invalid UTF-16"; }$/;"	f	class:utf8::invalid_utf16
what	src/core/utf8/checked.h	/^        virtual const char* what() const throw() { return "Invalid UTF-8"; }$/;"	f	class:utf8::invalid_utf8
what	src/core/utf8/checked.h	/^        virtual const char* what() const throw() { return "Invalid code point"; }$/;"	f	class:utf8::invalid_code_point
what	src/core/utf8/checked.h	/^        virtual const char* what() const throw() { return "Not enough space"; }$/;"	f	class:utf8::not_enough_room
width	src/core/bounds.h	/^    float width() const {$/;"	f	class:Bounds2D
width	src/core/bounds.h	/^    float width() {$/;"	f	class:Bounds3D
width	src/core/display.h	/^    int width, height;$/;"	m	class:SDLAppDisplay
width	src/core/ui/label.h	/^    float width;$/;"	m	class:UILabel
width	src/paddle.h	/^    int width, height;$/;"	m	class:Paddle
width	src/summarizer.h	/^    int width;$/;"	m	class:SummItem
win32LogSelector	src/main.cpp	/^std::string win32LogSelector() {$/;"	f
window_filter_proc	src/core/display.cpp	/^LRESULT CALLBACK window_filter_proc(HWND wnd, UINT msg, WPARAM wparam, LPARAM lparam) {$/;"	f
window_proc	src/core/display.cpp	/^WNDPROC window_proc = 0;$/;"	v
windowed_height	src/core/display.h	/^    int windowed_width, windowed_height;$/;"	m	class:SDLAppDisplay
windowed_width	src/core/display.h	/^    int windowed_width, windowed_height;$/;"	m	class:SDLAppDisplay
words	src/summarizer.h	/^    int words;$/;"	m	class:SummNode
words	src/summarizer.h	/^    int words;$/;"	m	class:SummUnit
wrap	src/core/texture.h	/^    GLint wrap;$/;"	m	class:TextureResource
write	src/core/shader_common.cpp	/^void BoolShaderUniform::write(std::string& content) const {$/;"	f	class:BoolShaderUniform
write	src/core/shader_common.cpp	/^void FloatShaderUniform::write(std::string& content) const {$/;"	f	class:FloatShaderUniform
write	src/core/shader_common.cpp	/^void IntShaderUniform::write(std::string& content) const {$/;"	f	class:IntShaderUniform
write	src/core/shader_common.cpp	/^void Mat3ShaderUniform::write(std::string& content) const {$/;"	f	class:Mat3ShaderUniform
write	src/core/shader_common.cpp	/^void Mat4ShaderUniform::write(std::string& content) const {$/;"	f	class:Mat4ShaderUniform
write	src/core/shader_common.cpp	/^void Sampler1DShaderUniform::write(std::string& content) const {$/;"	f	class:Sampler1DShaderUniform
write	src/core/shader_common.cpp	/^void Sampler2DShaderUniform::write(std::string& content) const {$/;"	f	class:Sampler2DShaderUniform
write	src/core/shader_common.cpp	/^void Vec2ArrayShaderUniform::write(std::string& content) const {$/;"	f	class:Vec2ArrayShaderUniform
write	src/core/shader_common.cpp	/^void Vec2ShaderUniform::write(std::string& content) const {$/;"	f	class:Vec2ShaderUniform
write	src/core/shader_common.cpp	/^void Vec3ArrayShaderUniform::write(std::string& content) const {$/;"	f	class:Vec3ArrayShaderUniform
write	src/core/shader_common.cpp	/^void Vec3ShaderUniform::write(std::string& content) const {$/;"	f	class:Vec3ShaderUniform
write	src/core/shader_common.cpp	/^void Vec4ArrayShaderUniform::write(std::string& content) const {$/;"	f	class:Vec4ArrayShaderUniform
write	src/core/shader_common.cpp	/^void Vec4ShaderUniform::write(std::string& content) const {$/;"	f	class:Vec4ShaderUniform
write	src/core/shader_common.h	/^    virtual void write(std::string& content) const {};$/;"	f	class:ShaderUniform
writeHeader	src/core/tga.cpp	/^void TGAWriter::writeHeader() {$/;"	f	class:TGAWriter
writePNG	src/core/png_writer.cpp	/^void PNGWriter::writePNG(std::vector<char>& buffer) {$/;"	f	class:PNGWriter
writeRLE	src/core/tga.cpp	/^void TGAWriter::writeRLE(int pixel_count, const char* pixel) {$/;"	f	class:TGAWriter
writeRaw	src/core/tga.cpp	/^void TGAWriter::writeRaw(std::vector<char>& buffer, int start, int pixel_count) {$/;"	f	class:TGAWriter
writeScanlines	src/core/tga.cpp	/^void TGAWriter::writeScanlines(std::vector<char>& buffer, int width, int height) {$/;"	f	class:TGAWriter
writeTGA	src/core/tga.cpp	/^void TGAWriter::writeTGA(std::vector<char>& buffer) {$/;"	f	class:TGAWriter
writer	src/core/png_writer.h	/^    PNGWriter writer;$/;"	m	class:PNGExporter
writer	src/core/tga.h	/^    TGAWriter writer;$/;"	m	class:TGAExporter
zbuffer_depth	src/core/display.h	/^    int  zbuffer_depth;$/;"	m	class:SDLAppDisplay
zindex	src/core/ui/element.h	/^    int zindex;$/;"	m	class:UIElement
zindex_sort	src/core/ui/element.h	/^    static bool zindex_sort (UIElement* e1, UIElement* e2) {$/;"	f	class:UIElement
~AbstractShaderPass	src/core/shader_common.h	/^    virtual ~AbstractShaderPass() {};$/;"	f	class:AbstractShaderPass
~AccessLog	src/logentry.h	/^    virtual ~AccessLog() {};$/;"	f	class:AccessLog
~BaseLog	src/core/seeklog.h	/^    virtual ~BaseLog() {};$/;"	f	class:BaseLog
~ConfFile	src/core/conffile.cpp	/^ConfFile::~ConfFile() {$/;"	f	class:ConfFile
~ConfFileException	src/core/conffile.h	/^    virtual ~ConfFileException() throw () {};$/;"	f	class:ConfFileException
~ConfSection	src/core/conffile.cpp	/^ConfSection::~ConfSection() {$/;"	f	class:ConfSection
~FXGlyphPage	src/core/fxfont.cpp	/^FXGlyphPage::~FXGlyphPage() {$/;"	f	class:FXGlyphPage
~FXGlyphSet	src/core/fxfont.cpp	/^FXGlyphSet::~FXGlyphSet() {$/;"	f	class:FXGlyphSet
~FrameExporter	src/core/ppm.cpp	/^FrameExporter::~FrameExporter() {$/;"	f	class:FrameExporter
~GLTimer	src/core/timer.cpp	/^GLTimer::~GLTimer() {$/;"	f	class:GLTimer
~Line	src/ball.cpp	/^Line::~Line() {$/;"	f	class:Line
~Logstalgia	src/logstalgia.cpp	/^Logstalgia::~Logstalgia() {$/;"	f	class:Logstalgia
~MouseCursor	src/core/mousecursor.cpp	/^MouseCursor::~MouseCursor() {$/;"	f	class:MouseCursor
~PNGExporter	src/core/png_writer.cpp	/^PNGExporter::~PNGExporter() {$/;"	f	class:PNGExporter
~PNGExporterException	src/core/png_writer.h	/^    virtual ~PNGExporterException() throw () {};$/;"	f	class:PNGExporterException
~PPMExporter	src/core/ppm.cpp	/^PPMExporter::~PPMExporter() {$/;"	f	class:PPMExporter
~PPMExporterException	src/core/ppm.h	/^    virtual ~PPMExporterException() throw () {};$/;"	f	class:PPMExporterException
~Paddle	src/paddle.cpp	/^Paddle::~Paddle() {$/;"	f	class:Paddle
~ProjectedBall	src/ball.cpp	/^ProjectedBall::~ProjectedBall() {$/;"	f	class:ProjectedBall
~QuadItem	src/core/quadtree.h	/^    virtual ~QuadItem() {};$/;"	f	class:QuadItem
~QuadNode	src/core/quadtree.cpp	/^QuadNode::~QuadNode() {$/;"	f	class:QuadNode
~QuadTree	src/core/quadtree.cpp	/^QuadTree::~QuadTree() {$/;"	f	class:QuadTree
~Regex	src/core/regex.cpp	/^Regex::~Regex() {$/;"	f	class:Regex
~RegexCompilationException	src/core/regex.h	/^    virtual ~RegexCompilationException() throw () {};$/;"	f	class:RegexCompilationException
~RequestBall	src/requestball.cpp	/^RequestBall::~RequestBall() {$/;"	f	class:RequestBall
~Resource	src/core/resource.h	/^    virtual ~Resource() {};$/;"	f	class:Resource
~ResourceException	src/core/resource.h	/^    virtual ~ResourceException() throw () {};$/;"	f	class:ResourceException
~ResourceManager	src/core/resource.cpp	/^ResourceManager::~ResourceManager() {$/;"	f	class:ResourceManager
~SDLApp	src/core/sdlapp.h	/^    virtual ~SDLApp() {};$/;"	f	class:SDLApp
~SDLAppDisplay	src/core/display.cpp	/^SDLAppDisplay::~SDLAppDisplay() {$/;"	f	class:SDLAppDisplay
~SDLAppException	src/core/sdlapp.h	/^    ~SDLAppException() throw () {};$/;"	f	class:SDLAppException
~SDLInitException	src/core/display.h	/^    virtual ~SDLInitException() throw () {};$/;"	f	class:SDLInitException
~SeekLog	src/core/seeklog.cpp	/^SeekLog::~SeekLog() {$/;"	f	class:SeekLog
~SeekLogException	src/core/seeklog.h	/^    virtual ~SeekLogException() throw () {};$/;"	f	class:SeekLogException
~Shader	src/core/shader.cc	/^Shader::~Shader() {$/;"	f	class:Shader
~ShaderException	src/core/shader_common.h	/^    ~ShaderException() throw () {};$/;"	f	class:ShaderException
~ShaderPass	src/core/shader.cc	/^ShaderPass::~ShaderPass() {$/;"	f	class:ShaderPass
~ShaderUniform	src/core/shader_common.h	/^    virtual ~ShaderUniform() {};$/;"	f	class:ShaderUniform
~StreamLog	src/core/seeklog.cpp	/^StreamLog::~StreamLog() {$/;"	f	class:StreamLog
~Summarizer	src/summarizer.cpp	/^Summarizer::~Summarizer() {$/;"	f	class:Summarizer
~TGAExporter	src/core/tga.cpp	/^TGAExporter::~TGAExporter() {$/;"	f	class:TGAExporter
~TGAExporterException	src/core/tga.h	/^    virtual ~TGAExporterException() throw () {};$/;"	f	class:TGAExporterException
~TextureResource	src/core/texture.cpp	/^TextureResource::~TextureResource() {$/;"	f	class:TextureResource
~UI	src/core/ui/ui.cpp	/^UI::~UI() {$/;"	f	class:UI
~UIAction	src/core/ui/action.h	/^    virtual ~UIAction() {};$/;"	f	class:UIAction
~UIConsole	src/core/ui/console.cpp	/^UIConsole::~UIConsole() {$/;"	f	class:UIConsole
~UIConsoleCommand	src/core/ui/console.h	/^    virtual ~UIConsoleCommand() {};$/;"	f	class:UIConsoleCommand
~UIElement	src/core/ui/element.cpp	/^UIElement::~UIElement() {$/;"	f	class:UIElement
~UIGroup	src/core/ui/group.h	/^    virtual ~UIGroup() {};$/;"	f	class:UIGroup
~UIImage	src/core/ui/image.cpp	/^UIImage::~UIImage() {$/;"	f	class:UIImage
~UILayout	src/core/ui/layout.cpp	/^UILayout::~UILayout() {$/;"	f	class:UILayout
~UIResizableLayout	src/core/ui/layout.cpp	/^UIResizableLayout::~UIResizableLayout() {$/;"	f	class:UIResizableLayout
~UIResizeButton	src/core/ui/layout.cpp	/^UIResizeButton::~UIResizeButton() {$/;"	f	class:UIResizeButton
~UIScrollBar	src/core/ui/scroll_bar.cpp	/^UIScrollBar::~UIScrollBar() {$/;"	f	class:UIScrollBar
~UIScrollLayout	src/core/ui/scroll_layout.cpp	/^UIScrollLayout::~UIScrollLayout() {$/;"	f	class:UIScrollLayout
~UISelect	src/core/ui/select.cpp	/^UISelect::~UISelect() {$/;"	f	class:UISelect
~UISolidLayout	src/core/ui/solid_layout.cpp	/^UISolidLayout::~UISolidLayout() {$/;"	f	class:UISolidLayout
~VBO	src/core/vbo.h	/^    ~VBO() {$/;"	f	class:VBO
~Vec2ArrayShaderUniform	src/core/shader_common.cpp	/^Vec2ArrayShaderUniform::~Vec2ArrayShaderUniform() {$/;"	f	class:Vec2ArrayShaderUniform
~Vec3ArrayShaderUniform	src/core/shader_common.cpp	/^Vec3ArrayShaderUniform::~Vec3ArrayShaderUniform() {$/;"	f	class:Vec3ArrayShaderUniform
~Vec4ArrayShaderUniform	src/core/shader_common.cpp	/^Vec4ArrayShaderUniform::~Vec4ArrayShaderUniform() {$/;"	f	class:Vec4ArrayShaderUniform
~quadbuf	src/core/vbo.cpp	/^quadbuf::~quadbuf() {$/;"	f	class:quadbuf
